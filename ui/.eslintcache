[{"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/FileCard.js":"1","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/PropertyCard.js":"2","/Users/eric.lin/Documents/RealEstateApp/ui/src/App.js":"3","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/PricingPage.js":"4","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/NavigationBar.js":"5","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/HomePage.js":"6","/Users/eric.lin/Documents/RealEstateApp/ui/src/reportWebVitals.js":"7","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/DashboardSidebar.js":"8","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/SignUpPage.js":"9","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/NotificationSidebar.js":"10","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/SignUp.js":"11","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/Login.js":"12","/Users/eric.lin/Documents/RealEstateApp/ui/src/index.js":"13","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/NewPropertyForm.js":"14","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/FilesDashboard.js":"15","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/MainDashboard.js":"16","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/PropertiesDashboard.js":"17","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/SettingsDashboard.js":"18","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/LoadingScreen.js":"19","/Users/eric.lin/Documents/RealEstateApp/ui/src/utility/ProgressBar.js":"20"},{"size":3560,"mtime":1608762243278,"results":"21","hashOfConfig":"22"},{"size":18633,"mtime":1608531545669,"results":"23","hashOfConfig":"22"},{"size":1857,"mtime":1608495557682,"results":"24","hashOfConfig":"22"},{"size":11734,"mtime":1608535151397,"results":"25","hashOfConfig":"22"},{"size":1678,"mtime":1608487392389,"results":"26","hashOfConfig":"22"},{"size":2867,"mtime":1608531433500,"results":"27","hashOfConfig":"22"},{"size":362,"mtime":1606110926381,"results":"28","hashOfConfig":"22"},{"size":11693,"mtime":1608786077466,"results":"29","hashOfConfig":"22"},{"size":597,"mtime":1608496280794,"results":"30","hashOfConfig":"22"},{"size":2160,"mtime":1607760170392,"results":"31","hashOfConfig":"22"},{"size":3637,"mtime":1608516325381,"results":"32","hashOfConfig":"22"},{"size":2742,"mtime":1608516586766,"results":"33","hashOfConfig":"22"},{"size":500,"mtime":1606110926380,"results":"34","hashOfConfig":"22"},{"size":15087,"mtime":1608176246132,"results":"35","hashOfConfig":"22"},{"size":40505,"mtime":1608886257946,"results":"36","hashOfConfig":"22"},{"size":22912,"mtime":1608786412594,"results":"37","hashOfConfig":"22"},{"size":15226,"mtime":1608531512874,"results":"38","hashOfConfig":"22"},{"size":8444,"mtime":1608532780361,"results":"39","hashOfConfig":"22"},{"size":929,"mtime":1607721990088,"results":"40","hashOfConfig":"22"},{"size":706,"mtime":1608772503798,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},"ga57tu",{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"67"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"67"},"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/FileCard.js",["96","97","98","99"],"import React from 'react';\n\nimport axios from 'axios';\n\nimport './CSS/FileCard.css';\nimport './CSS/Style.css';\n\nimport { IoMdDownload } from 'react-icons/io';\n\nlet timer;\n\nclass FileCard extends React.Component {\n    \n    constructor(props) {\n        super(props);\n\n        this.state = {\n            userID: this.props.data.state.userID,\n            file: this.props.data.state.file,\n            setActiveFileAttributes: this.props.data.state.setActiveFileAttributes,\n            openSignedURL: this.props.data.state.openSignedURL,\n            mapFileTypeToIcon: this.props.data.state.mapFileTypeToIcon,\n            timeClicked: null,\n            isClicked: false\n        };\n\n        this.trimTrailingFileName = this.trimTrailingFileName.bind(this);\n        this.clickCard = this.clickCard.bind(this);\n        this.doubleClickCard = this.doubleClickCard.bind(this);\n    }\n\n    trimTrailingFileName(fileName) {\n        if (fileName.length > 18) {\n            return fileName.substring(0,18) + \"...\";\n        }\n        return fileName;\n    }\n\n    clickCard() {\n\n        var now = Date.now();\n        var key = this.state.file[\"property_id\"] + '/' + this.state.file[\"name\"];\n\n        if (this.state.timeClicked === null || (now - this.state.timeClicked) > 200) { \n            // Let parent know this file was clicked\n            var success = this.state.setActiveFileAttributes(key, this.state.isClicked);\n            if (success) {\n                this.setState({\n                    isClicked: !this.state.isClicked,\n                    timeClicked: Date.now()\n                });\n            }\n        } else {\n            this.state.openSignedURL(key)\n            var success = this.state.setActiveFileAttributes(key, false);\n            if (success) {\n                this.setState({\n                    isClicked: true,\n                    timeClicked: Date.now()\n                })\n            }\n        }\n    }\n\n    doubleClickCard() {\n        if (this.state.isClicked) {\n            return;\n        }\n        var key = this.state.file[\"property_id\"] + '/' + this.state.file[\"name\"];\n        this.state.openSignedURL(key)\n    }  \n\n    componentDidMount() {\n        this.clickTimeout = null;\n    }\n\n    // onClickHandler = event => {\n    //     if (this.state.isClicked) {\n    //         this.clickCard();\n    //         return;\n    //     }\n    //     clearTimeout(timer);\n    //     if (event.detail === 1) {\n    //         timer = setTimeout(() => {\n    //             this.clickCard()}, 100)\n    //     } else if (event.detail === 2 ) {\n    //         this.doubleClickCard()\n    //     }\n    // }\n\n    render() {\n        return (\n            <div className={\n                            this.state.isClicked ? \n                            \"file_card_individual_file file_card_active\" : \n                            \"file_card_individual_file\"\n                            } \n                // onDoubleClick={() => this.doubleClickCard()}\n                onMouseDown={() => this.clickCard()}\n                >\n                {this.state.mapFileTypeToIcon(this.state.file[\"metadata\"][\"file_type\"], true)}\n                <div className=\"file_card_individual_file_footer\">\n                    <p className=\"file_card_individual_file_footer_title\" title={this.state.file[\"name\"] ? this.state.file[\"name\"] : \"Unknown File\"}>\n                        {this.state.file[\"name\"] ? this.trimTrailingFileName(this.state.file[\"name\"]) : \"Unknown File\"}\n                    </p>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default FileCard;",["100","101"],"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/PropertyCard.js",["102","103"],"import React from 'react';\nimport axios from 'axios';\n\nimport './CSS/PropertyCard.css';\n\nimport { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\n\nimport { BsHouseFill } from 'react-icons/bs';\nimport { IoMdTrash } from 'react-icons/io';\nimport { MdEdit } from 'react-icons/md';\nimport { SiGoogleanalytics } from 'react-icons/si';\nimport { GoFileDirectory } from 'react-icons/go';\nimport { FaCheckCircle } from 'react-icons/fa';\nimport { SiGooglecalendar } from 'react-icons/si';\nimport { GiTwoCoins } from 'react-icons/gi';\nimport { HiOutlineExclamationCircle } from 'react-icons/hi';\nimport { MdFileUpload } from 'react-icons/md';\n\nclass PropertyCard extends React.Component {\n    constructor(props) {\n        super(props);\n\n        var propDetails = this.props.data.state.property_details;\n        var iconsToggleMap = new Map([['analysis', false], ['files', false]]);\n        var filesToggleMap = new Map([\n                ['property', false],\n                ['receipts', false], \n                ['mortgage', false], \n                ['repairs', false], \n                ['contracting', false], \n                ['taxes', false], \n                ['other', false]]);\n\n        this.state = {\n            userID: this.props.data.state.userID,\n            username: this.props.data.state.username,\n            propertyID: propDetails[\"id\"],\n            address: propDetails[\"address\"],\n            city: propDetails[\"city\"],\n            state: propDetails[\"state\"],\n            zipCode: propDetails[\"zip_code\"],\n            priceBought: propDetails[\"price_bought\"],\n            priceRented: propDetails[\"price_rented\"],\n            priceEstimate: propDetails[\"price_estimate\"],\n            downPayment: propDetails[\"price_down_payment\"],\n            boughtDate: propDetails[\"bought_date\"],\n            rented: true,\n            propertyType: propDetails[\"property_type\"],\n            iconsToggleMap: iconsToggleMap,\n            filesToggleMap: filesToggleMap,\n            files: [],\n            isLoading: true\n        };\n        this.deletePropertyByUser = this.deletePropertyByUser.bind(this);\n        this.removePropertyFromState = this.props.removePropertyFromState;\n        this.numberWithCommas = this.numberWithCommas.bind(this);\n        this.toggleIcons = this.toggleIcons.bind(this);\n        this.toggleFilesIcons = this.toggleFilesIcons.bind(this);\n    }\n\n    numberWithCommas(x) {\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n    \n    deletePropertyByUser() {\n        var axiosDeletePropertyByUserURL = '/api/user/property/' + this.state.userID;\n        axios({\n            method: 'delete',\n            url: axiosDeletePropertyByUserURL,\n            params: {\n                property_id: this.state.propertyID\n            }\n        }).then(response => {\n            console.log(response);\n            this.removePropertyFromParentState(this.state.propertyID);\n        }).catch(error => console.log(error));\n\n        this.removePropertyFromState(this.state.propertyID, this.state.propertyType);\n\n    }\n\n    toggleIcons(type) {\n\n        var newMap = this.state.iconsToggleMap;\n        var toggled = this.state.iconsToggleMap[type];\n\n        Object.keys(this.state.iconsToggleMap).map(function(key) {\n            newMap[key] = false;\n        })\n\n        // flip the toggle.\n        newMap[type] = !toggled;\n        this.setState({\n            iconsToggleMap: newMap\n        });\n        return;\n    }\n\n    toggleFilesIcons(type) {\n\n        var newMap = this.state.filesToggleMap;\n        var toggled = this.state.filesToggleMap[type];\n\n        newMap[type] = !toggled;\n        this.setState({\n            filesToggleMap: newMap\n        });\n        return;\n    }\n\n    componentDidMount() {\n\n        var estimate = this.state.priceEstimate ? this.state.priceEstimate : this.state.priceBought;\n        var loan = this.state.priceBought - this.state.downPayment;\n        var ltvRatio = loan / estimate * 100;\n\n        var url = 'api/user/files/' + this.state.userID + '/' + this.state.propertyID;\n        console.log(this.state.propertyID);\n        console.log(url);\n        var files;\n        axios({\n            method: 'get',\n            url: url,\n        }).then(response => {\n\n            if (response == null) {\n                return;\n            }\n            files = [];\n\n            var data = response.data;\n            this.setState({\n                ltvRatio: Number(ltvRatio.toFixed(2)),\n                numBedrooms: 4,\n                numBathrooms: 2,\n                files: data.map((object, i) =>\n                    <div id=\"property_card_files_graphic\" key={i}>\n                        <p>\n                            {object[\"name\"]}\n                            {object[\"uploaded_at\"]}\n                            {object[\"last_edited_at\"]}\n                        </p>\n                    </div>\n                ),\n                isLoading: false\n            })\n            console.log(this.state.files);\n        }).catch(error => {\n            if (error.response.status === 404) {\n                files = [];\n            }\n            this.setState({\n                ltvRatio: Number(ltvRatio.toFixed(2)),\n                numBedrooms: 4,\n                numBathrooms: 2,\n                isLoading: false\n            })\n        });\n            \n    }\n\n    renderSubSection() {\n        if (this.state.iconsToggleMap['analysis']) {\n            return (\n                <div></div>\n            )\n        } else if (this.state.iconsToggleMap['files']) {\n            return (\n                <div id=\"property_card_files_box\" className=\"property_card_graphics_parent_title_box\">\n                    <ul id=\"property_card_files_overall_tag\">\n                        <li \n                            className={this.state.filesToggleMap['other'] ? \"property_card_files_tag property_card_files_tag_on\" : \"property_card_files_tag property_card_files_tag_off\" }\n                            onClick={() => this.toggleFilesIcons('other')}\n                        >\n                            Other\n                        </li>\n                        <li \n                            className={this.state.filesToggleMap['taxes'] ? \"property_card_files_tag property_card_files_tag_on\" : \"property_card_files_tag property_card_files_tag_off\" }\n                            onClick={() => this.toggleFilesIcons('taxes')}\n                        >\n                            Taxes\n                        </li>\n                        <li \n                            className={this.state.filesToggleMap['repairs'] ? \"property_card_files_tag property_card_files_tag_on\" : \"property_card_files_tag property_card_files_tag_off\" }\n                            onClick={() => this.toggleFilesIcons('repairs')}\n                        >\n                            Repairs\n                        </li>\n                        <li \n                            className={this.state.filesToggleMap['receipts'] ? \"property_card_files_tag property_card_files_tag_on\" : \"property_card_files_tag property_card_files_tag_off\"}\n                            onClick={() => this.toggleFilesIcons('receipts')}\n                        >\n                            Receipts\n                        </li>\n                        <li \n                            className={this.state.filesToggleMap['property'] ? \"property_card_files_tag property_card_files_tag_on\" : \"property_card_files_tag property_card_files_tag_off\"} \n                            onClick={() => this.toggleFilesIcons('property')}\n                        >\n                            Property\n                        </li>\n                        <li \n                            className={ this.state.filesToggleMap['contracting'] ? \"property_card_files_tag property_card_files_tag_on\" : \"property_card_files_tag property_card_files_tag_off\" }\n                            onClick={() => this.toggleFilesIcons('contracting')}\n                        >\n                            Contracting\n                        </li>\n                        <li \n                            className={this.state.filesToggleMap['mortgage'] ? \"property_card_files_tag property_card_files_tag_on\" : \"property_card_files_tag property_card_files_tag_off\" }\n                            onClick={() => this.toggleFilesIcons('mortgage')}\n                        >\n                            Mortgage\n                        </li>\n                    </ul>\n                    <div id=\"property_card_files_box\">\n                        {this.state.files}\n                    </div>\n                </div>\n            )\n        } else {\n            return (\n                <div id=\"property_card_graphics_box\" className=\"property_card_graphics_parent_title_box\">\n                    <div id=\"property_card_graphics_padding_left_box\">\n                        <div className=\"property_card_graphics_parent_box\">\n                            <div className=\"property_card_graphics_box_circular_graph\">\n                                <CircularProgressbar \n                                    value={this.state.ltvRatio ? this.state.ltvRatio : 0}\n                                    text={`${this.state.ltvRatio ? this.state.ltvRatio : 0}%`}\n                                    background\n                                    backgroundPadding={5}\n                                    styles={buildStyles({\n                                    backgroundColor: \"#EE9E77\",\n                                    textColor: \"#fff\",\n                                    pathColor: \"#fff\",\n                                    trailColor: \"transparent\",\n                                    })}/>\n                            </div>\n                            <p className=\"property_card_graphics_box_label\">\n                                Loan to Value Ratio\n                            </p>\n                        </div>\n                        <div className=\"property_card_graphics_parent_box\">\n                            <div className=\"property_card_graphics_box_circular_graph\">\n                                <CircularProgressbar \n                                    value={this.state.ltvRatio ? this.state.ltvRatio : 0}\n                                    text={`${this.state.ltvRatio ? this.state.ltvRatio : 0}%`}\n                                    background\n                                    backgroundPadding={5}\n                                    styles={buildStyles({\n                                    backgroundColor: \"#85bb65\",\n                                    textColor: \"#fff\",\n                                    pathColor: \"#fff\",\n                                    trailColor: \"transparent\",\n                                    })}/>\n                            </div>\n                            <p className=\"property_card_graphics_box_label\">\n                                LTV Ratio\n                            </p>\n                        </div>\n                        <div className=\"property_card_graphics_parent_box\">\n                            <div className=\"property_card_graphics_box_circular_graph\">\n                                <CircularProgressbar \n                                    value={this.state.ltvRatio ? this.state.ltvRatio : 0}\n                                    text={`${this.state.ltvRatio ? this.state.ltvRatio : 0}%`}\n                                    background\n                                    backgroundPadding={5}\n                                    styles={buildStyles({\n                                    backgroundColor: \"#6e4ec1\",\n                                    textColor: \"#fff\",\n                                    pathColor: \"#fff\",\n                                    trailColor: \"transparent\",\n                                    })}/>\n                            </div>\n                            <p className=\"property_card_graphics_box_label\">\n                                LTV Ratio\n                            </p>\n                        </div>\n                        <div className=\"property_card_graphics_parent_box\">\n                            <div className=\"property_card_graphics_box_circular_graph\">\n                                <CircularProgressbar \n                                    value={this.state.ltvRatio ? this.state.ltvRatio : 0}\n                                    text={`${this.state.ltvRatio ? this.state.ltvRatio : 0}%`}\n                                    background\n                                    backgroundPadding={5}\n                                    styles={buildStyles({\n                                    backgroundColor: \"#296CF6\",\n                                    textColor: \"#fff\",\n                                    pathColor: \"#fff\",\n                                    trailColor: \"transparent\",\n                                    })}/>\n                            </div>\n                            <p className=\"property_card_graphics_box_label\">\n                                LTV Ratio\n                            </p>\n                        </div> \n                    </div>\n                </div>\n            )\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                { this.state.isLoading ? <div></div> : \n                <div>\n                    <div className=\"propertyCard\">\n                        <p className=\"property_card_address\">\n                            {this.state.address} \n                        </p>\n                        {this.state.rented ? \n                        <div id=\"property_rented_box\">\n                            <FaCheckCircle id=\"rented_check_icon\">\n                            </FaCheckCircle>\n                            <p id=\"property_rented_text\">\n                                Rented\n                            </p>\n                        </div> : \n                        <div></div>}\n                        <IoMdTrash  onClick={this.deletePropertyByUser} className=\"property_card_delete_button property_card_end_button\"/>\n                        <MdEdit className=\"property_card_edit_button property_card_end_button\"></MdEdit>\n                        <div\n                            id=\"files\"\n                            onClick={(param) => this.toggleIcons('files')}>\n                            <GoFileDirectory \n                                className={ this.state.iconsToggleMap['files'] ? \"property_card_file_button_on property_card_end_button\" : \"property_card_file_button_off property_card_end_button\"} \n                            />  \n                        </div>\n                        <div>\n                            <SiGoogleanalytics\n                                id=\"analysis\"\n                                onClick={() => {this.toggleIcons('analysis')}}\n                                className={ this.state.iconsToggleMap['analysis'] ? \"property_card_analytics_button_on property_card_end_button\" : \"property_card_analytics_button_off property_card_end_button\"} \n                            />\n                        </div> \n                        <div>\n                            { this.state.iconsToggleMap['files'] ? \n                                    <MdFileUpload\n                                    id=\"add_file\"\n                                    className=\"property_card_add_file_icon property_card_end_button\"\n                                    />\n                                : <div></div>\n                            } \n                        </div>        \n                        <div className=\"clearfix\"/>\n                        <div id=\"property_card_sub_info_box\">\n                            <p id=\"property_card_sub_info_subaddress\">\n                                {this.state.city}, {this.state.state} {this.state.zipCode}\n                            </p>\n                            <br></br>\n                            <p className=\"property_card_sub_info_estimate\">\n                                ${this.state.priceEstimate ? this.numberWithCommas(this.state.priceEstimate) : this.numberWithCommas(this.state.priceBought)}\n                                {this.state.priceEstimate ? <div></div> : <HiOutlineExclamationCircle id=\"estimate_warning_icon\"></HiOutlineExclamationCircle>}\n                            </p>\n                            <div className=\"clearfix\"/>\n                            <br></br>\n                            <div id=\"property_card_sub_info_subtext_box\">\n                                <div className=\"property_card_sub_info_subbox\">\n                                    <BsHouseFill className=\"property_card_sub_info_icon\"></BsHouseFill>\n                                    <p className=\"property_card_sub_info_subtext_title\">\n                                        {this.state.numBedrooms ? this.state.numBedrooms : \"-\"} beds {this.state.numBathrooms ? this.state.numBathrooms : \"-\"} baths \n                                    </p>\n                                </div>\n                                <div className=\"property_card_sub_info_subbox\">\n                                    <GiTwoCoins className=\"property_card_sub_info_icon\"></GiTwoCoins>\n                                    <p className=\"property_card_sub_info_subtext_title\">\n                                        ${this.state.priceRented ? this.state.priceRented : \"-\"}\n                                    </p>\n                                    <p className=\"property_card_sub_info_subtext_subtitle\">\n                                            / month\n                                        </p> \n                                    </div>\n                                    <div className=\"clearfix\"/>\n                                    <div className=\"property_card_sub_info_subbox\">\n                                        <SiGooglecalendar className=\"property_card_sub_info_icon\"></SiGooglecalendar>\n                                        <p className=\"property_card_sub_info_subtext_title\">\n                                            {this.state.boughtDate ? this.state.boughtDate : \"-\"} \n                                        </p>\n                                        <p className=\"property_card_sub_info_subtext_subtitle\">\n                                            purchase date\n                                        </p>\n                                    </div>\n                                </div>\n                            </div>\n                            {this.renderSubSection()}\n                    </div>\n                </div>}\n            </div>\n        )\n    }\n}\n\nexport default PropertyCard;",["104","105"],"/Users/eric.lin/Documents/RealEstateApp/ui/src/App.js",["106"],"import './App.css';\nimport HomePage from './components/HomePage.js';\nimport PricingPage from './components/PricingPage.js';\nimport SignUpPage from './components/SignUpPage.js';\nimport Login from './components/Login.js';\nimport MainDashboard from './components/MainDashboard.js';\nimport PropertiesDashboard from './components/PropertiesDashboard.js';\nimport AnalysisDashboard from './components/AnalysisDashboard.js';\nimport FilesDashboard from './components/FilesDashboard.js';\nimport ExploreDashboard from './components/ExploreDashboard.js';\nimport SettingsDashboard from './components/SettingsDashboard.js';\n\nimport NewPropertyForm from './components/NewPropertyForm.js';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport './components/CSS/Style.css';\n\nfunction App() {\n  return (\n\n    <Router>\n      <div>\n        <Switch>\n          <Route path=\"/signup\">\n            <SignUpPage />\n          </Route>\n          <Route path=\"/login\">\n            <Login />\n          </Route>\n          <Route path=\"/pricing\">\n            <PricingPage/>\n          </Route>\n          <Route path=\"/addproperty\" render={(props) => <NewPropertyForm {...props}/>}/>\n          <Route path=\"/dashboard\" render={(props) => <MainDashboard {...props}/>}/>\n          <Route path=\"/properties\" render={(props) => <PropertiesDashboard {...props}/>}/>\n          <Route path=\"/analysis\" render={(props) => <AnalysisDashboard {...props}/>}/>\n          <Route path=\"/files\" render={(props) => <FilesDashboard {...props}/>}/>\n          <Route path=\"/explore\" render={(props) => <ExploreDashboard {...props}/>}/>\n          <Route path=\"/settings\" render={(props) => <SettingsDashboard {...props}/>}/>\n          <Route path=\"/\">\n            <HomePage/>\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n",["107","108"],"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/PricingPage.js",["109"],"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/NavigationBar.js",["110","111","112"],"import React from 'react';\n\nimport { AiFillHome } from 'react-icons/ai';\n\nimport './CSS/NavigationBar.css';\n\nimport logo from './Images/LogoStretch.png';\n\nimport { Link } from \"react-router-dom\";\n\nclass NavigationBar extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount() {\n        window.addEventListener(\"scroll\", this.handleScroll);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"scroll\", this.handleScroll);\n    }\n\n    handleScroll = () => {\n        if (window.scrollY > 20) {\n          document.querySelector(\"#navigation_bar_parent\").className = \"animate scroll\";\n        } else {\n          document.querySelector(\"#navigation_bar_parent\").className = \"animate\";\n        }\n    };\n\n      \n    render() {\n        return (\n            <div id=\"navigation_bar_parent\">\n                <div id=\"navigation_bar_subparent\">\n                    <Link to=\"/\">\n                        <li id=\"navigation_bar_subparent_first_child\">\n                            <img src={logo} id=\"navigation_bar_logo\"></img>\n                        </li>\n                    </Link>\n                    <li className=\"navigation_bar_subparent_list\">\n                        FAQ\n                    </li>\n                    <li className=\"navigation_bar_subparent_list\">\n                        Company\n                    </li>\n                    <Link to=\"/pricing\">\n                        <li className=\"navigation_bar_subparent_list\">\n                            Pricing\n                        </li>\n                    </Link>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default NavigationBar;",["113","114"],"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/HomePage.js",["115"],"/Users/eric.lin/Documents/RealEstateApp/ui/src/reportWebVitals.js",[],["116","117"],"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/DashboardSidebar.js",[],["118","119"],"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/SignUpPage.js",["120","121","122"],"import React from 'react';\n\nimport Login from './Login.js';\nimport NavigationBar from './NavigationBar.js';\n\nimport './CSS/SignUpPage.css';\n\nimport { Link } from \"react-router-dom\";\n\nclass SignUpPage extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div>\n                <NavigationBar/>\n                <div id=\"sign_up_page_parent\">\n                    <div id=\"sign_up_page_box\">\n                        \n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default SignUpPage;","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/NotificationSidebar.js",["123"],"import React from 'react';\nimport './CSS/NotificationSidebar.css';\nimport './CSS/Style.css';\nimport { Link } from 'react-router-dom';\n\nimport { IoMdNotifications } from 'react-icons/io';\nimport { HiOutlineExclamationCircle } from 'react-icons/hi';\n\nclass NotificationSidebar extends React.Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            totalEstimateWorth: this.props.data.state.totalEstimateWorth,\n            missingEstimate: this.props.data.state.missingEstimate\n        };\n    }\n    render() {\n        return (\n            <div id=\"main_dashboard_summary\">\n                <div id=\"main_dashboard_summary_estimated_net_worth\">\n                    <p id=\"main_dashboard_summary_estimated_net_worth_subtitle\">\n                        Estimated Net Worth\n                    </p>\n                    {this.state.missingEstimate ? \n                        <HiOutlineExclamationCircle id=\"main_dashboard_missing_estimate_icon\"></HiOutlineExclamationCircle> :\n                        <div></div>\n                    }\n                    <div className=\"clearfix\"/>\n                    <p id=\"main_dashboard_summary_estimated_net_worth_title\">\n                        ${this.state.totalEstimateWorth ? this.state.totalEstimateWorth : 0}\n                    </p>\n                </div>\n                <div id=\"main_dashboard_summary_notifications\">\n                    <IoMdNotifications id=\"main_dashboard_summary_notifications_icon\"></IoMdNotifications>\n                    <p id=\"main_dashboard_summary_notifications_title\">\n                        Notifications\n                    </p>\n                    <div className=\"clearfix\"/>\n                    {this.state.notifications ? this.state.notifications : \n                    <div id=\"main_dashboard_summary_notifications_no_notifications\">\n                        <p id=\"main_dashboard_summary_notifications_no_notifications_text\">\n                            No notifications\n                        </p>\n                    </div>\n                    }\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default NotificationSidebar;","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/SignUp.js",[],"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/Login.js",[],"/Users/eric.lin/Documents/RealEstateApp/ui/src/index.js",[],"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/NewPropertyForm.js",[],"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/FilesDashboard.js",["124","125","126"],"import React from 'react';\nimport axios from 'axios';\n\nimport './CSS/FilesDashboard.css';\nimport './CSS/Style.css';\n\nimport DashboardSidebar from './DashboardSidebar.js';\nimport NotificationSidebar from './NotificationSidebar.js';\nimport FileCard from './FileCard.js';\n\nimport ProgressBar from './../utility/ProgressBar.js';\n\nimport { MdFileDownload, MdFileUpload, MdEdit } from 'react-icons/md';\nimport { IoMdTrash, IoMdArrowDropdown } from 'react-icons/io';\nimport { IoCloseSharp } from 'react-icons/io5';\nimport { AiFillFile, AiFillFileImage, AiFillFileExclamation, AiFillFilePdf, AiFillFileExcel, AiFillFilePpt, AiFillFileText, AiFillFileWord, AiFillFileZip } from 'react-icons/ai';\n\nclass FilesDashboard extends React.Component {\n        \n    constructor(props) {\n        super(props);\n\n        this.state = {\n            userID: this.props.location.state.id,\n            firstName: this.props.location.state.firstName,\n            lastName: this.props.location.state.lastName,\n            email: this.props.location.state.email,\n            totalEstimateWorth: this.props.location.state.totalEstimateWorth,\n            missingEstimate: this.props.location.state.missingEstimate,\n            sortToggleMap: [['A-Z', false]],\n            // files is the main point with how files are displayed.\n            files: [],\n            originalLoadedFiles: [],\n            propertyToFilesMap: new Map(),\n            properties: new Map(),\n            // activeFiles are files that the user has currently selected.\n            activeFiles: new Map(),\n            activeSearchFiles: [],\n            filesToDisplay: null,\n            displayUploadFileBox: false,\n            fileUploadProgressBar: 0,\n            displayUploadFileBox: false,\n            sortType: null,\n            sortTypeArrowDown: true,\n            isFileLoading: true,\n            isPropertiesLoading: true,\n        };\n\n        this.setActiveFileAttributes = this.setActiveFileAttributes.bind(this);\n        this.openSignedURL = this.openSignedURL.bind(this);\n        this.downloadActiveFiles = this.downloadActiveFiles.bind(this);\n        this.downloadFile = this.downloadFile.bind(this);\n        this.deleteActiveFiles = this.deleteActiveFiles.bind(this);\n        this.deleteFile = this.deleteFile.bind(this);\n        this.handleSearchBar = this.handleSearchBar.bind(this);\n        this.handleFileUploadChange = this.handleFileUploadChange.bind(this);\n        this.handleFileUpload = this.handleFileUpload.bind(this);\n        this.trimTrailingFileName = this.trimTrailingFileName.bind(this);\n        this.renderFileUploadPropertiesSelection = this.renderFileUploadPropertiesSelection.bind(this);\n    }\n\n    componentDidMount() {\n        // Load our files list.\n        axios({\n            method: 'get',\n            url: 'api/user/files/' + this.state.userID,\n        }).then(response => {\n            var filesList = response.data;\n            filesList.sort(function(a,b){\n                return new Date(b[\"metadata\"][\"last_edited_at\"]) - new Date(a[\"metadata\"][\"last_edited_at\"]);\n            })\n\n            var loadedFiles = [];\n            var propertyToFilesMap = new Map();\n\n            for (var i = 0; i < filesList.length; i++) {\n\n                var file = filesList[i];\n\n                var fileCard = <FileCard key={i} data={{\n                    state: {\n                        userID: this.state.userID,\n                        file: file,\n                        setActiveFileAttributes: this.setActiveFileAttributes,\n                        openSignedURL: this.openSignedURL, \n                        mapFileTypeToIcon: this.mapFileTypeToIcon\n                    }                       \n                }}/>;\n                loadedFiles.push(fileCard);\n\n                var propertyID = file[\"property_id\"];\n                var propertyAddress = file[\"address\"];\n                // property does not exist yet. Add it.\n                if (!propertyToFilesMap.has(propertyID)) {\n                    // Add our title as the first element. \n                    propertyToFilesMap.set(propertyID, [\n                        <div key={propertyID + i}>\n                            <div className=\"files_dashboard_property_sort_title\">\n                                {propertyAddress}\n                            </div>\n                            <div className=\"clearfix\"/>\n                        </div>\n                    ]);\n                }\n\n                var filesArrAtProperty = propertyToFilesMap.get(propertyID);\n                filesArrAtProperty.push(fileCard);\n                propertyToFilesMap.set(propertyID, filesArrAtProperty);\n            }  \n\n            this.renderFiles(filesList)\n\n            this.setState({\n                files: filesList,\n                originalLoadedFiles: loadedFiles.slice(),\n                // sort our properties map by alphabetical order, except leave General as last.\n                propertyToFilesMap: new Map([...propertyToFilesMap].sort((a,b) => {\n                    if (a[1] === \"General\") {\n                        return -1;\n                    }\n                    return b[1] - a[1];\n                })),\n                isFileLoading: false\n            });\n        }).catch(error => {\n            this.setState({\n                isFileLoading: false\n            })\n            console.log(error);\n        });\n\n        // Load our properties list.\n        axios({\n            method: 'get',\n            url:  'api/user/property/' + this.state.userID,\n        }).then(response => {\n            var propertiesList = response.data;\n\n            var propertiesMap = new Map();\n            for (var i = 0; i < propertiesList.length; i++) {\n                var propertyID = propertiesList[i][\"id\"];\n                var propertyAddress = propertiesList[i][\"address\"];\n                propertiesMap.set(propertyID, propertyAddress);\n            }\n            this.setState({\n                properties: [...propertiesMap],\n                isPropertiesLoading: false\n            });\n        }).catch(error => {\n            console.log(error);\n            this.setState({\n                isPropertiesLoading: false\n            })\n        });\n    }\n\n    // file Key = propertyID + '/' + fileName\n    setActiveFileAttributes(fileKey, toRemove) {\n        console.log(fileKey);\n        var currentActiveFiles = this.state.activeFiles;\n        if (currentActiveFiles === null || currentActiveFiles === undefined || currentActiveFiles.length === 0) {\n            currentActiveFiles = new Map();\n        }\n        if (currentActiveFiles.size >= 25 && !toRemove) {\n            return false\n        }\n        console.log(currentActiveFiles);\n        if (!toRemove) {\n            currentActiveFiles.set(fileKey, true);\n            console.log(currentActiveFiles);\n        } else {\n            // Remove from active (\"unclicked\")\n            currentActiveFiles.delete(fileKey);\n        }\n        this.setState({\n            activeFiles: currentActiveFiles\n        });\n        return true;\n    }\n\n    openSignedURL(fileKey) {\n        var url = \"api/user/files/\" + this.state.userID + \"/\" + fileKey;\n        axios({\n            method: 'get',\n            url: url,\n            params: {\n                request: \"signed_url\"\n            }\n        }).then(response => {\n            var url = response.data;\n            if (url !== \"\") {\n                window.open(url, '_blank', 'noopener,noreferrer')\n            }\n        }).catch(error => console.log(error));\n    }\n\n    downloadFile(value, key, map) {\n        var url = \"api/user/files/\" + this.state.userID + \"/\" + key;\n        axios({\n            method: 'get',\n            url: url,\n            params: {\n                request: \"download\"\n            },\n            responseType: 'blob'\n        }).then(response => {\n            // Downloads the file\n            // Credit: https://gist.github.com/javilobo8/097c30a233786be52070986d8cdb1743\n            const url = window.URL.createObjectURL(new Blob([response.data]));\n            const link = document.createElement('a');\n            link.href = url;\n            const contentDisposition = response.headers['content-disposition'];\n            let fileName = 'unknown';\n            if (contentDisposition) {\n                const fileNameMatch = contentDisposition.match(/filename='(.+)'/);\n                if (fileNameMatch.length === 2)\n                    fileName = fileNameMatch[1];\n            }\n            link.setAttribute('download', fileName); //or any other extension\n            document.body.appendChild(link);\n            link.click();\n        }).catch(error => console.log(error));\n    }\n\n    downloadActiveFiles() {\n        this.state.activeFiles.forEach(this.downloadFile)\n    }\n\n    async deleteFile(key) {\n        var url = \"api/user/files/\" + this.state.userID + \"/\" + key;\n        var success = false;\n        await axios({\n            method: 'delete',\n            url: url,\n        }).then(response => {\n            if (response.status === 200) {\n                success = true;\n                return success;\n            }\n        }).catch(error => console.log(error));\n        return success;\n    }\n\n    async deleteActiveFiles() {\n        var currFiles = this.state.files;\n        var activeFiles = this.state.activeFiles\n        var activeFilesIterator = activeFiles.entries();\n\n        var nextElem = activeFilesIterator.next();\n        while (nextElem !== null && nextElem.value !== undefined) {\n            var key = nextElem.value[0];\n            var success = await this.deleteFile(key);\n            if (success === true) {\n                console.log(key);\n                console.log(activeFiles);\n                activeFiles.delete(key);\n                console.log(activeFiles);\n                for (var i = 0; i < currFiles.length; i++) {\n                    // When we filter by properties, we inject <div> elements which do not have a state.\n                    // Add this check to filter them out. \n                    var file = currFiles[i];\n                    var fKey = file[\"property_id\"] + \"/\" + file[\"name\"];\n                    if (key === fKey) {\n                        currFiles.splice(i, 1);\n                        continue;\n                    }\n                }\n            }\n            nextElem = activeFilesIterator.next();\n        }\n        this.renderFiles(currFiles);\n\n        this.setState({\n            files: [...currFiles],\n            activeFiles: [...activeFiles],\n        }, () => console.log(this.state.activeFiles));\n    }\n\n    handleFileUploadChange(event) {\n        var file = event.target.files[0];\n        if (file !== null && file !== undefined) {\n            this.setState({\n                fileToUpload: file\n            })\n        }\n    }\n     \n    handleFileUpload() {\n        var file = this.state.fileToUpload;\n        if (file === null || file === undefined) {\n            return;\n        }\n\n        var nameInput = document.getElementById(\"files_dashboard_upload_file_name_input\");\n        var nameInputValue = nameInput.value;\n\n        var fileName = file[\"name\"];\n        if (nameInputValue !== \"\") {\n            fileName = nameInputValue;\n        }\n\n        var propertySelect = document.getElementById(\"files_dashboard_upload_file_property_select\");\n        var propertySelectValue = propertySelect.value;\n        var propertySelectAddress = propertySelect.options[propertySelect.selectedIndex].text;\n\n        var fileCategorySelect = document.getElementById(\"files_dashboard_upload_file_category_select\");\n        var fileCategorySelectValue = fileCategorySelect.value;\n\n        var yearInput = document.getElementById(\"files_dashboard_upload_file_year_input\");\n\n        // Year sanitization is handled server side. If empty, server will fill in with current year. \n        var yearInputValue = yearInput.value;\n\n        // var signedURL;\n        // axios({\n        //     method: 'get',\n        //     url: 'api/user/files/upload/' + this.state.userID + '/' + propertySelectValue + '?file_name=' + fileName,\n        // }).then(response => {\n        //     signedURL = response.data;\n        //     axios({\n        //         method: 'put',\n        //         url: signedURL,\n        //         data: file\n        //     }).then(signedURLResponse => {\n        //         console.log(signedURLResponse);\n        //     }).catch(signedURLError => {\n        //         console.log(signedURLError);\n        //     });\n        // }).catch(error => {\n        // });\n\n        var formData = new FormData();\n        formData.append('file', file);\n        formData.append('property_id', propertySelectValue);\n        formData.append('file_category', fileCategorySelectValue);\n        formData.append('file_type', file[\"type\"]);\n        formData.append('address', propertySelectAddress);\n        formData.append('year', yearInputValue);\n\n\n        // If user wants to override the default name.\n        if (nameInputValue !== \"\") {\n            formData.append('file_name', nameInputValue);\n        }\n\n        axios({\n            method: 'post',\n            url: 'api/user/files/upload/' + this.state.userID,\n            config: {\n                headers: {\n                    'Content-Type': 'multipart/form-data'\n                },\n            },\n            onUploadProgress: (progressEvent) => {\n                // Use Math.min because we currently upload to the server, then upload to GCS. The GCS step can take a while,\n                // but this only tracks progress from client -> server. Stop it at 90, then finish the last 10 once we \n                // successfully write to GCS.\n                var progressCompleted = Math.min(Math.round((progressEvent.loaded * 100) / progressEvent.total), 98);\n                this.setState({\n                    fileUploadProgressBar: progressCompleted\n                })\n            },\n            data: formData\n        }).then(response => {\n            var currFiles = this.state.files;\n            currFiles.push(response.data);\n            // currFiles.push(<FileCard key={currFiles.length + 1} data={{\n            //     state: {\n            //         userID: this.state.userID,\n            //         file: response.data,\n            //         setActiveFileAttributes: this.setActiveFileAttributes,\n            //         openSignedURL: this.openSignedURL, \n            //         mapFileTypeToIcon: this.mapFileTypeToIcon,\n            //     }                       \n            // }}/>);\n\n            this.renderFiles(currFiles);\n\n            this.setState({\n                files: [...currFiles],\n                displayUploadFileBox: false,\n                fileToUpload: null,\n                fileUploadProgressBar: 0,\n            })\n        }).catch(error => console.log(error));\n    }\n\n    trimTrailingFileName(fileName) {\n        if (fileName.length > 20) {\n            return fileName.substring(0,20) + \"...\";\n        }\n        return fileName;\n    }\n\n    // isSmall is used for small icons\n    mapFileTypeToIcon(imageType, isSmall) {\n        if (imageType === null || imageType === undefined) {\n            return (\n                <div>\n                    <AiFillFileExclamation \n                        className={\n                            isSmall ? \n                            \"files_dashboard_upload_image_type_mini_icon grey\" : \n                            \"files_dashboard_upload_image_type grey\"\n                        }>\n                    </AiFillFileExclamation>\n                </div>\n            )\n        }\n\n        if (imageType.includes(\"image\")){\n            return (\n                <div>\n                    <AiFillFileImage \n                        className={\n                            isSmall ? \n                            \"files_dashboard_upload_image_type_mini_icon blue\": \n                            \"files_dashboard_upload_image_type blue\"\n                    }>\n                    </AiFillFileImage>\n                </div>\n            );\n        } else if (imageType.includes(\"pdf\")) {\n            return (\n                <div>\n                    <AiFillFilePdf\n                        className={\n                            isSmall ? \n                            \"files_dashboard_upload_image_type_mini_icon red\": \n                            \"files_dashboard_upload_image_type red\"\n                    }>\n                    </AiFillFilePdf>\n                </div>\n            )\n        } else if (imageType.includes(\"video\")) {\n            return (\n                <div>\n                    <AiFillFile \n                        className={\n                            isSmall ? \n                            \"files_dashboard_upload_image_type_mini_icon blue\": \n                            \"files_dashboard_upload_image_type blue\"\n                    }>\n                    </AiFillFile>\n                </div>\n            )\n        } else if (imageType.includes(\"audio\")) {\n            return (\n                <div>\n                    <AiFillFile \n                        className={\n                            isSmall ? \n                            \"files_dashboard_upload_image_type_mini_icon blue\": \n                            \"files_dashboard_upload_image_type blue\"\n                    }>\n                    </AiFillFile>\n                </div>\n            )\n        } else if (imageType.includes(\"zip\")) {\n            return (\n                <div>\n                    <AiFillFileZip\n                        className={\n                            isSmall ? \n                            \"files_dashboard_upload_image_type_mini_icon grey\": \n                            \"files_dashboard_upload_image_type grey\"\n                    }>\n                    </AiFillFileZip>\n                </div>\n            )\n        } else if (imageType.includes(\"text\")) {\n            return (\n                <div>\n                    <AiFillFileText\n                        className={\n                            isSmall ? \n                            \"files_dashboard_upload_image_type_mini_icon grey\": \n                            \"files_dashboard_upload_image_type grey\"\n                    }>\n                    </AiFillFileText>\n                </div>\n            )\n        } else if (imageType.includes(\"presentation\")) {\n            return (\n                <div>\n                    <AiFillFilePpt\n                        className={\n                            isSmall ? \n                            \"files_dashboard_upload_image_type_mini_icon orange\": \n                            \"files_dashboard_upload_image_type orange\"\n                    }>\n                    </AiFillFilePpt>\n                </div>\n            )\n        } else if (imageType.includes(\"spreadsheet\")) {\n            return (\n                <div>\n                    <AiFillFileExcel\n                        className={\n                            isSmall ? \n                            \"files_dashboard_upload_image_type_mini_icon green\": \n                            \"files_dashboard_upload_image_type green\"\n                    }>\n                    </AiFillFileExcel>\n                </div>\n            )\n        } else if (imageType.includes(\"doc\")) {\n            return (\n                <div>\n                    <AiFillFileWord\n                        className={\n                            isSmall ? \n                            \"files_dashboard_upload_image_type_mini_icon blue\": \n                            \"files_dashboard_upload_image_type blue\"\n                    }>\n                    </AiFillFileWord>\n                </div>\n            )\n        } else {\n            return (\n                <div>\n                    <AiFillFileExclamation\n                        className={\n                            isSmall ? \n                            \"files_dashboard_upload_image_type_mini_icon grey\": \n                            \"files_dashboard_upload_image_type grey\"\n                    }>\n                    </AiFillFileExclamation>\n                </div>\n            )\n        }\n    }\n\n    renderFileUploadPropertiesSelection() {\n        return (\n            this.state.properties.map((property, i) => \n            <option name={property[1]} key={i} value={property[0]}>{property[1]}</option>\n        ))\n    }\n\n    handleSearchBar(e) {\n        var searchValue = e.target.value.toLowerCase();\n        this.setState({\n            activeSearchFiles: this.state.files.filter(file => {\n                return file.props.data ? file.props.data.state.file[\"name\"].toLowerCase().startsWith(searchValue) : 0;\n            })\n        })\n    }\n\n    renderActiveSearchFiles() {\n        return this.state.activeSearchFiles.length > 0 ? this.state.activeSearchFiles : this.renderNoFiles();\n    }\n\n    renderNoFiles() {\n        return (\n            <div id=\"files_dashboard_no_files_box\">\n                <p id=\"files_dashboard_no_files_box_title\">\n                    No Files\n                </p>\n            </div>\n        );\n    }\n\n    enforceYearInput(e) {\n        if (e.target.value > 4) {\n            e.target.value = e.target.value.slice(0, 4);\n        }\n    }\n\n    convertPropertyToFilesMapToElements(propertyToFilesMap) {\n\n        var files = [];\n        propertyToFilesMap.forEach(function(key, value, map) {\n            // value is an array of html elements.\n            files = files.concat(key);\n            files = files.concat(\n                <div className=\"clearfix\"/>\n            );\n        })\n        return files;\n    }\n\n    handleSortOptionsHelper(files, sortType, arrowDown) {\n        switch (sortType) {\n            case \"A-Z\":\n                files = this.state.originalLoadedFiles;\n                files.sort(function(a,b) {\n                    if (a.props.data.state.file[\"name\"] > b.props.data.state.file[\"name\"]) {\n                        return arrowDown ? 1 : -1;\n                    } else if (b.props.data.state.file[\"name\"] > a.props.data.state.file[\"name\"]){\n                        return arrowDown ? -1 : 1;\n                    }\n                    return 0;\n                })\n                break;\n            case \"Uploaded Date\":\n                files = this.state.originalLoadedFiles;\n                files.sort(function(a,b) {\n                    return arrowDown ? \n                    new Date(a.props.data.state.file[\"metadata\"][\"uploaded_at\"]) - new Date(b.props.data.state.file[\"metadata\"][\"uploaded_at\"]) :\n                    new Date(b.props.data.state.file[\"metadata\"][\"uploaded_at\"]) - new Date(a.props.data.state.file[\"metadata\"][\"uploaded_at\"]);\n                })\n                break;\n            case \"Last Edited Date\":\n                files.sort(function(a,b) {\n                    return arrowDown ?\n                    new Date(a.props.data.state.file[\"metadata\"][\"last_edited_at\"]) - new Date(b.props.data.state.file[\"metadata\"][\"last_edited_at\"]) :\n                    new Date(b.props.data.state.file[\"metadata\"][\"last_edited_at\"]) - new Date(a.props.data.state.file[\"metadata\"][\"last_edited_at\"]);\n                })\n                break;\n            case \"Property\":\n                files = this.convertPropertyToFilesMapToElements();\n                break;\n        }\n        return files;\n    }\n\n    /* handleSortOptions is a state machine handler. There are three possible \n    /* states that our Sort button can be in. \n    /* State 1: Default: (Sort V) (V is the down Arrow)\n    /* State 2: After click: (SORT_TYPE V), for example (A-Z V)\n    /* State 3: After secondary click: (SORT_TYPE ^) (^ is the up Arrow)\n    /* We cycle between these states */\n    handleSortOptions(sortType) {\n\n        var sortTypeArrowDown = this.state.sortTypeArrowDown;\n        var files = this.state.files;\n        var newFiles;\n\n        if (this.state.sortType === null || this.state.sortType === undefined || this.state.sortType !== sortType) {\n            newFiles = this.handleSortOptionsHelper(files, sortType, true);\n            sortTypeArrowDown = true;\n        } else if (sortTypeArrowDown){\n            newFiles = this.handleSortOptionsHelper(files, sortType, false);\n            sortTypeArrowDown = false;\n        } else if (!sortTypeArrowDown) {\n            newFiles = this.state.originalLoadedFiles;\n            sortType = null;\n            sortTypeArrowDown = true;\n        }\n        this.setState({\n            sortType: sortType,\n            displaySortBox: false,\n            files: [...newFiles.slice()],\n            sortTypeArrowDown: sortTypeArrowDown\n        })\n    }\n\n    renderFiles(files) {\n        var propertyToFilesMap = new Map();\n        for (var i = 0; i < files.length; i++) {\n            var file = files[i];\n            var propertyID = file[\"property_id\"];\n            var propertyAddress = file[\"address\"];\n            \n            if (!propertyToFilesMap.has(propertyID)) {\n                // Add our title as the first element. \n                propertyToFilesMap.set(propertyID, [\n                    <div key={propertyID + i}>\n                        <div className=\"files_dashboard_property_sort_title\">\n                            {propertyAddress}\n                        </div>\n                        <div className=\"clearfix\"/>\n                    </div>\n                ]);\n            }\n\n            var fileCard = <FileCard key={i} data={{\n                state: {\n                    userID: this.state.userID,\n                    file: file,\n                    setActiveFileAttributes: this.setActiveFileAttributes,\n                    openSignedURL: this.openSignedURL, \n                    mapFileTypeToIcon: this.mapFileTypeToIcon\n                }                       \n            }}/>;\n\n            var filesArrAtProperty = propertyToFilesMap.get(propertyID);\n            filesArrAtProperty.push(fileCard);\n            propertyToFilesMap.set(propertyID, filesArrAtProperty);\n        }\n\n        this.setState({\n            filesToDisplay: this.convertPropertyToFilesMapToElements(propertyToFilesMap)\n        })\n    }\n\n\n    renderUploadBox() {\n        return (\n            <div id=\"files_dashboard_upload_file_box\">\n                <div id=\"files_dashboard_upload_file_left_box\">\n                    <label htmlFor=\"files_dashboard_upload_file_button\" id=\"files_dashboard_upload_file_button_label\">\n                        {this.state.fileToUpload ? \n                            <div alt={this.state.fileToUpload[\"name\"] ? this.state.fileToUpload[\"name\"] : \"Unknown File\"}>\n                                <div>\n                                    {this.mapFileTypeToIcon(this.state.fileToUpload[\"type\"], false)}\n                                </div>\n                                <p id=\"files_dashboard_uploaded_file_name\">\n                                    {this.state.fileToUpload[\"name\"] ? this.trimTrailingFileName(this.state.fileToUpload[\"name\"]) : \"Unable to Upload File\"}\n                                </p>\n                            </div> : \n                            <div>\n                                <MdFileUpload id=\"files_dashboard_upload_file_icon\"></MdFileUpload>\n                                <p id=\"files_dashboard_upload_file_title\">\n                                    Choose File\n                                </p>\n                            </div>}\n                    </label>\n                    <input id=\"files_dashboard_upload_file_button\" type=\"file\" onChange={this.handleFileUploadChange}></input>\n                </div>\n                <div id=\"files_dashboard_upload_file_right_box\">\n                    <div>\n                        <p id=\"files_dashboard_upload_file_label\">Upload a File</p>\n                        <IoCloseSharp \n                            id=\"files_dashboard_upload_file_close_icon\" \n                            onClick={() => \n                                this.setState({\n                                    displayUploadFileBox: false,\n                                    fileToUpload: null\n                                })}>\n                        </IoCloseSharp>\n                        <div id=\"files_dashboard_upload_file_final_button\" onClick={this.handleFileUpload}>\n                            Upload\n                        </div>\n                    </div>\n                    <input \n                        id=\"files_dashboard_upload_file_name_input\"\n                        placeholder={this.state.fileToUpload && this.state.fileToUpload[\"name\"] ? this.state.fileToUpload[\"name\"] : \"File Name\"} \n                        className={this.state.fileToUpload && this.state.fileToUpload[\"name\"] ? \"upload_file_input dark_placeholder\" : \"upload_file_input\"}>\n                    </input>\n                    <br></br>\n                    <select id=\"files_dashboard_upload_file_property_select\" className=\"upload_file_select\">\n                        <option value=\"\" disabled selected>Property</option>\n                        <option name=\"general\" value=\"general\">General</option>\n                        {this.renderFileUploadPropertiesSelection()}\n                    </select>\n                    <br></br>\n                    <select id=\"files_dashboard_upload_file_category_select\" className=\"upload_file_select_half_left\">\n                        <option value=\"\" disabled selected>File Type</option>\n                        <option name=\"mortgage\" value=\"mortgage\">Mortgage</option>\n                        <option name=\"contracting\" value=\"contracting\">Contracting</option>\n                        <option name=\"property\" value=\"property\">Property</option>\n                        <option name=\"receipts\" value=\"receipts\">Receipts</option>\n                        <option name=\"repairs\" value=\"repairs\">Repairs</option>\n                        <option name=\"taxes\" value=\"taxes\">Taxes</option>\n                        <option name=\"other\" value=\"other\">Other</option>\n                    </select>\n                    <input \n                        id=\"files_dashboard_upload_file_year_input\" \n                        className=\"upload_file_input_half_right\" \n                        type=\"number\" \n                        maxlength=\"4\"\n                        onChange={this.enforceYearInput}\n                        placeholder=\"Year\">\n                    </input>\n                    <div className=\"clearfix\"/>\n                </div>\n                <div className=\"clearfix\"></div>\n                <ProgressBar id=\"upload_file_progress_bar\" bgColor=\"#296CF6\" completed={this.state.fileUploadProgressBar}></ProgressBar>\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <div>\n                <DashboardSidebar data={{\n                    state: {\n                        id: this.state.userID,\n                        firstName: this.state.firstName,\n                        lastName: this.state.lastName,\n                        email: this.state.email,\n                        totalEstimateWorth: this.state.totalEstimateWorth,\n                        missingEstimate: this.state.missingEstimate,\n                        currentPage: \"files\"\n                    }\n                }}/>\n                <div id=\"files_dashboard_parent_box\">\n                    <div id=\"files_dashboard_welcome_box\">\n                        <p id=\"files_dashboard_welcome_box_title\">\n                            Files\n                        </p>\n                        <input id=\"files_dashboard_search_bar\" placeholder=\"Search...\" onChange={this.handleSearchBar}>\n                        </input>\n                    </div>\n                    <div className=\"clearfix\"/>\n                    {/* <div id=\"files_dashboard_sort_box\">\n                        <p id=\"files_dashboard_sort_box_title\">\n                            Filter: \n                        </p> \n                        <ul id =\"files_dashboard_sort_box_list\">\n                            <li className={this.state.sortToggleMap['A-Z'] ? \"files_dashboard_sort_box_type_list_on files_dashboard_sort_box_type_list\" : \"files_dashboard_sort_box_type_list_off files_dashboard_sort_box_type_list\"}>\n                                Mortgage\n                            </li>\n                            <li className={this.state.sortToggleMap['Date'] ? \"files_dashboard_sort_box_type_list_on files_dashboard_sort_box_type_list\" : \"files_dashboard_sort_box_type_list_off files_dashboard_sort_box_type_list\"}>\n                                Contracting\n                            </li>\n                            <li className={this.state.sortToggleMap['Property'] ? \"files_dashboard_sort_box_type_list_on files_dashboard_sort_box_type_list\" : \"files_dashboard_sort_box_type_list_off files_dashboard_sort_box_type_list\"}>\n                                Property\n                            </li>\n                            <li className={this.state.sortToggleMap['A-Z'] ? \"files_dashboard_sort_box_type_list_on files_dashboard_sort_box_type_list\" : \"files_dashboard_sort_box_type_list_off files_dashboard_sort_box_type_list\"}>\n                                Receipts\n                            </li>\n                            <li className={this.state.sortToggleMap['Date'] ? \"files_dashboard_sort_box_type_list_on files_dashboard_sort_box_type_list\" : \"files_dashboard_sort_box_type_list_off files_dashboard_sort_box_type_list\"}>\n                                Repairs\n                            </li>\n                            <li className={this.state.sortToggleMap['Property'] ? \"files_dashboard_sort_box_type_list_on files_dashboard_sort_box_type_list\" : \"files_dashboard_sort_box_type_list_off files_dashboard_sort_box_type_list\"}>\n                                Taxes\n                            </li>\n                            <li className={this.state.sortToggleMap['Property'] ? \"files_dashboard_sort_box_type_list_on files_dashboard_sort_box_type_list\" : \"files_dashboard_sort_box_type_list_off files_dashboard_sort_box_type_list\"}>\n                                Other\n                            </li>\n                        </ul>\n                        <div className=\"clearfix\"/>\n                    </div> */}\n                    {this.state.isFileLoading || this.state.isPropertiesLoading ? <div></div> : \n                    <div>\n                        <div id=\"files_dashboard_icons_box\">\n                            <div id=\"files_dashboard_filter_and_sort_box\" onMouseEnter={() => this.setState({displaySortBox: true})} onMouseLeave={() => this.setState({displaySortBox: false})}>\n                                <div \n                                    id=\"files_dashboard_sort\" \n                                    className={\n                                            this.state.displaySortBox ? \n                                            \"square_bottom_borders display_sort_box\" : \n                                            (\n                                                this.state.sortType ? \n                                                \"display_sort_box\" : \n                                                \"\"\n                                            )}\n                                    onClick={() => {\n                                        if (this.state.sortType) {\n                                            this.handleSortOptions(this.state.sortType);\n                                            }}\n                                        }\n                                        >\n                                    <p className=\"files_dashboard_sort_text\">\n                                        {this.state.sortType ? this.state.sortType : \"Sort\"}\n                                    </p>\n                                    <IoMdArrowDropdown id=\"files_dashboard_sort_icon\" className={this.state.sortTypeArrowDown ? \"\" : \"files_dashboard_sort_icon_up\"}></IoMdArrowDropdown>\n                                    \n                                </div>\n                            </div>\n                            {\n                                        this.state.displaySortBox ? \n                                        <div id=\"files_dashboard_sort_options_box\" onMouseEnter={() => this.setState({displaySortBox: true})} onMouseLeave={() => this.setState({displaySortBox: false})}>\n                                            <li className={\n                                                    this.state.sortType === \"A-Z\" ? \n                                                    \"files_dashboard_sort_options_list files_dashboard_sort_focus\" : \n                                                    \"files_dashboard_sort_options_list\"\n                                                } \n                                                onClick={() => this.handleSortOptions(\"A-Z\")}>\n                                                A-Z\n                                            </li>\n                                            <li className={\n                                                    this.state.sortType === \"Uploaded Date\" ? \n                                                    \"files_dashboard_sort_options_list files_dashboard_sort_focus\" :\n                                                    \"files_dashboard_sort_options_list\"\n                                                } \n                                                onClick={() => this.handleSortOptions(\"Uploaded Date\")}>\n                                                Uploaded Date\n                                            </li>\n                                            <li className={\n                                                    this.state.sortType === \"Last Edited Date\" ?\n                                                    \"files_dashboard_sort_options_list files_dashboard_sort_focus\" :\n                                                    \"files_dashboard_sort_options_list\"\n                                             } onClick={() => this.handleSortOptions(\"Last Edited Date\")}>\n                                                Last Edited Date\n                                            </li>\n                                        </div> : \n                                        <div></div>}\n                            <div id=\"files_dashboard_upload_file_text_button\" onClick={() => this.setState({displayUploadFileBox: true})}>Add File</div>\n                            {this.state.activeFiles.size >= 1 ?\n                                <IoMdTrash id=\"trash_file_icon\" className=\"files_dashboard_icons\" onClick={() => this.deleteActiveFiles()}></IoMdTrash> : \n                                <div></div>}\n                            {this.state.activeFiles.size >= 1 ? \n                                <MdFileDownload id=\"download_file_icon\" className=\"files_dashboard_icons\" onClick={() => this.downloadActiveFiles()}></MdFileDownload> : \n                                <div></div>\n                            }\n                            {this.state.activeFiles.size === 1 ? \n                                <MdEdit id=\"edit_file_icon\" className=\"files_dashboard_icons\"></MdEdit> : \n                                <div></div>\n                            }\n                        </div>\n                        <div className=\"clearfix\"/>\n                        {this.state.displayUploadFileBox ? \n                        this.renderUploadBox()\n                         : <div></div>}\n                        <div className=\"clearfix\"/>\n                        <div id=\"files_dashboard_files_box\">\n                            {\n                                this.state.isLoading ? \n                                <div></div> : \n                                (\n                                    (this.state.activeSearchFiles.length > 0 || document.getElementById(\"files_dashboard_search_bar\").value !== \"\") ? \n                                    this.renderActiveSearchFiles() :\n                                    (this.state.files ?\n                                    this.state.filesToDisplay : \n                                    this.renderNoFiles()\n                                    )\n                                )\n                            }\n                        </div>\n                    </div>}\n                    <NotificationSidebar data={{\n                        state: {\n                            totalEstimateWorth: this.state.totalEstimateWorth,\n                            missingEstimate: this.state.missingEstimate \n                        }\n                    }}/>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default FilesDashboard;","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/MainDashboard.js",["127"],"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/PropertiesDashboard.js",[],"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/SettingsDashboard.js",[],"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/LoadingScreen.js",[],"/Users/eric.lin/Documents/RealEstateApp/ui/src/utility/ProgressBar.js",["128"],"import React from \"react\";\n\nconst ProgressBar = (props) => {\n\n    const { bgcolor, completed } = props;\n\n    const containerStyles = {\n        bottom: 0,\n        borderRadius: \"0px 0px 0px 8px\",\n        height: 7,\n        width: '100%',\n        backgroundColor: \"transparent\",\n    }\n\n    const fillerStyles = {\n        height: '100%',\n        width: `${completed}%`,\n        backgroundColor: \"#296CF6\",\n        borderRadius: 'inherit',\n        textAlign: 'right',\n        transition: 'width 1s ease-in-out'\n    }\n\n    return (\n        <div style={containerStyles}>\n            <div style={fillerStyles}>\n                <span></span>\n            </div>\n        </div>\n    );\n};\n\nexport default ProgressBar;",{"ruleId":"129","severity":1,"message":"130","line":3,"column":8,"nodeType":"131","messageId":"132","endLine":3,"endColumn":13},{"ruleId":"129","severity":1,"message":"133","line":8,"column":10,"nodeType":"131","messageId":"132","endLine":8,"endColumn":22},{"ruleId":"129","severity":1,"message":"134","line":10,"column":5,"nodeType":"131","messageId":"132","endLine":10,"endColumn":10},{"ruleId":"135","severity":1,"message":"136","line":55,"column":17,"nodeType":"131","messageId":"137","endLine":55,"endColumn":24},{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","severity":1,"message":"143","line":87,"column":52,"nodeType":"144","messageId":"145","endLine":87,"endColumn":60},{"ruleId":"129","severity":1,"message":"146","line":150,"column":17,"nodeType":"131","messageId":"132","endLine":150,"endColumn":22},{"ruleId":"138","replacedBy":"147"},{"ruleId":"140","replacedBy":"148"},{"ruleId":"129","severity":1,"message":"149","line":18,"column":3,"nodeType":"131","messageId":"132","endLine":18,"endColumn":7},{"ruleId":"138","replacedBy":"150"},{"ruleId":"140","replacedBy":"151"},{"ruleId":"152","severity":1,"message":"153","line":12,"column":5,"nodeType":"154","messageId":"155","endLine":14,"endColumn":6},{"ruleId":"129","severity":1,"message":"156","line":3,"column":10,"nodeType":"131","messageId":"132","endLine":3,"endColumn":20},{"ruleId":"152","severity":1,"message":"153","line":12,"column":5,"nodeType":"154","messageId":"155","endLine":14,"endColumn":6},{"ruleId":"157","severity":1,"message":"158","line":39,"column":29,"nodeType":"159","endLine":39,"endColumn":70},{"ruleId":"138","replacedBy":"160"},{"ruleId":"140","replacedBy":"161"},{"ruleId":"129","severity":1,"message":"149","line":9,"column":10,"nodeType":"131","messageId":"132","endLine":9,"endColumn":14},{"ruleId":"138","replacedBy":"162"},{"ruleId":"140","replacedBy":"163"},{"ruleId":"138","replacedBy":"164"},{"ruleId":"140","replacedBy":"165"},{"ruleId":"129","severity":1,"message":"166","line":3,"column":8,"nodeType":"131","messageId":"132","endLine":3,"endColumn":13},{"ruleId":"129","severity":1,"message":"149","line":8,"column":10,"nodeType":"131","messageId":"132","endLine":8,"endColumn":14},{"ruleId":"152","severity":1,"message":"153","line":11,"column":5,"nodeType":"154","messageId":"155","endLine":13,"endColumn":6},{"ruleId":"129","severity":1,"message":"149","line":4,"column":10,"nodeType":"131","messageId":"132","endLine":4,"endColumn":14},{"ruleId":"167","severity":1,"message":"168","line":42,"column":13,"nodeType":"169","messageId":"170","endLine":42,"endColumn":33},{"ruleId":"129","severity":1,"message":"171","line":299,"column":13,"nodeType":"131","messageId":"132","endLine":299,"endColumn":21},{"ruleId":"172","severity":1,"message":"173","line":584,"column":9,"nodeType":"174","messageId":"175","endLine":614,"endColumn":10},{"ruleId":"176","severity":1,"message":"177","line":79,"column":78,"nodeType":"178","messageId":"170","endLine":79,"endColumn":80},{"ruleId":"129","severity":1,"message":"179","line":5,"column":13,"nodeType":"131","messageId":"132","endLine":5,"endColumn":20},"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'IoMdDownload' is defined but never used.","'timer' is defined but never used.","no-redeclare","'success' is already defined.","redeclared","no-native-reassign",["180"],"no-negated-in-lhs",["181"],"array-callback-return","Array.prototype.map() expects a return value from function.","FunctionExpression","expectedInside","'files' is assigned a value but never used.",["180"],["181"],"'Link' is defined but never used.",["180"],["181"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'AiFillHome' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["180"],["181"],["180"],["181"],["180"],["181"],"'Login' is defined but never used.","no-dupe-keys","Duplicate key 'displayUploadFileBox'.","ObjectExpression","unexpected","'fileName' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","'bgcolor' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]