[{"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/SignUp.js":"1","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/SignUpSelectPricingPlan.js":"2","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/DashboardSidebar.js":"3","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/SettingsDashboard.js":"4","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/Login.js":"5","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/FilesDashboard.js":"6","/Users/eric.lin/Documents/RealEstateApp/ui/src/App.js":"7","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/PropertiesDashboard.js":"8","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/ExpenseCard.js":"9","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/UploadFileModal.js":"10","/Users/eric.lin/Documents/RealEstateApp/ui/src/utility/ProgressBar.js":"11","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/CreateExpenseModal.js":"12","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/DropdownSelect.js":"13","/Users/eric.lin/Documents/RealEstateApp/ui/src/reportWebVitals.js":"14","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/FeedbackForm.js":"15","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/AnalysisDashboard.js":"16","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/MainDashboard.js":"17","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/ExpensesDashboard.js":"18","/Users/eric.lin/Documents/RealEstateApp/ui/src/index.js":"19","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/ExploreDashboard.js":"20","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/Loader.js":"21","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/PricingPage.js":"22","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/FileCard.js":"23","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/ExpandedExpenseCard.js":"24"},{"size":2705,"mtime":1610227778139,"results":"25","hashOfConfig":"26"},{"size":19740,"mtime":1610227983313,"results":"27","hashOfConfig":"26"},{"size":13941,"mtime":1610171857525,"results":"28","hashOfConfig":"26"},{"size":46782,"mtime":1610837002891,"results":"29","hashOfConfig":"26"},{"size":2713,"mtime":1610172468319,"results":"30","hashOfConfig":"26"},{"size":35216,"mtime":1610846187074,"results":"31","hashOfConfig":"26"},{"size":2354,"mtime":1610168858380,"results":"32","hashOfConfig":"26"},{"size":39576,"mtime":1610079516119,"results":"33","hashOfConfig":"26"},{"size":3506,"mtime":1610784185378,"results":"34","hashOfConfig":"26"},{"size":12193,"mtime":1610259744622,"results":"35","hashOfConfig":"26"},{"size":706,"mtime":1608772503798,"results":"36","hashOfConfig":"26"},{"size":12502,"mtime":1610439103696,"results":"37","hashOfConfig":"26"},{"size":8097,"mtime":1610433630712,"results":"38","hashOfConfig":"26"},{"size":362,"mtime":1606110926381,"results":"39","hashOfConfig":"26"},{"size":18752,"mtime":1610262060453,"results":"40","hashOfConfig":"26"},{"size":28112,"mtime":1610078904110,"results":"41","hashOfConfig":"26"},{"size":38380,"mtime":1610516905313,"results":"42","hashOfConfig":"26"},{"size":24132,"mtime":1610847904733,"results":"43","hashOfConfig":"26"},{"size":500,"mtime":1606110926380,"results":"44","hashOfConfig":"26"},{"size":1296,"mtime":1609983185674,"results":"45","hashOfConfig":"26"},{"size":309,"mtime":1610438333391,"results":"46","hashOfConfig":"26"},{"size":12632,"mtime":1610159770070,"results":"47","hashOfConfig":"26"},{"size":3159,"mtime":1610758317130,"results":"48","hashOfConfig":"26"},{"size":7808,"mtime":1610864945242,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ga57tu",{"filePath":"52","messages":"53","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":1,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/SignUp.js",[],"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/SignUpSelectPricingPlan.js",["114","115","116","117","118","119","120"],"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/DashboardSidebar.js",["121","122"],"import React from 'react';\n\nimport axios from 'axios';\n\nimport './CSS/DashboardSidebar.css';\nimport './CSS/Style.css';\n\nimport { Link, Redirect } from 'react-router-dom';\n\nimport { capitalizeName } from './MainDashboard.js';\n\nimport { BsFillHouseFill } from 'react-icons/bs';\nimport { GoFileDirectory } from 'react-icons/go';\nimport { SiGoogleanalytics } from 'react-icons/si';\nimport { IoSettingsSharp } from 'react-icons/io5';\nimport { MdFeedback, MdDashboard } from 'react-icons/md';\nimport { FiChevronDown } from 'react-icons/fi';\nimport { FaMoneyCheck } from 'react-icons/fa';\nimport { TiUser } from 'react-icons/ti';\nimport { ImUser } from 'react-icons/im';\n\nclass DashboardSidebar extends React.Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            user: this.props.data.state.user,\n            totalEstimateWorth: this.props.data.state.totalEstimateWorth,\n            missingEstimate: this.props.data.state.missingEstimate,\n            currentPage: this.props.data.state.currentPage,\n            profilePicture: this.props.data.state.profilePicture,\n            inactivatedAccount: this.props.data.state.inactivatedAccount,\n        };\n    }\n\n    componentDidMount() {\n        if (this.state.profilePicture === \"\" || this.state.profilePicture === undefined || this.state.profilePicture === null) {\n            axios({\n                method: 'get',\n                url: '/api/user/settings/profile/picture/' + this.state.user[\"id\"],\n            }).then(response => {\n                var src = response.data;\n                console.log(response.data);\n                this.setState({\n                    profilePicture: src\n                })\n            }).catch(error => {\n                console.log(error);\n                this.setState({\n                    profilePicture: null,\n                })\n            })\n        }\n    }\n\n    render() {\n        if (this.state.redirect) {\n            return <Redirect to={{\n                pathname: this.state.redirect\n            }} />\n        }\n        return (\n            <div>\n                {this.state.inactivatedAccount ? \n                <div className=\"dashboard_sidebar_locked_parent\">\n\n                </div> : <div></div>}\n                <div id=\"dashboard_sidebar_parent\">\n                    {this.state.profilePicture !== null && this.state.profilePicture !== undefined && this.state.profilePicture !== \"\" ? \n                    <img className=\"dashboard_sidebar_profile_pic\" src={this.state.profilePicture}>\n                    </img>:\n                    <TiUser className=\"dashboard_sidebar_profile_pic_image_icon\"></TiUser>}\n                    <div className=\"clearfix\"/>\n                    <div id=\"dashboard_sidebar_profile_pic_text_box\">\n                        <p className=\"dashboard_sidebar_profile_pic_title\">\n                            {capitalizeName(this.state.user[\"first_name\"])} {capitalizeName(this.state.user[\"last_name\"])}\n                            <FiChevronDown\n                                onMouseDown={() => {\n                                    if (!this.state.inactivatedAccount) {\n                                        this.setState({\n                                            displayAccountTooltip: !this.state.displayAccountTooltip\n                                        })\n                                    }\n                                }}\n                                className=\"dashboard_sidebar_profile_pic_icon\"></FiChevronDown>\n                        </p>\n                        {this.state.displayAccountTooltip ? \n                        <div id=\"dashboard_sidebar_profile_tooltip\">\n                            <li \n                                onClick={() => this.setState({\n                                    redirect: \"/\"\n                                })}\n                                className=\"dashboard_sidebar_profile_tooltip_list\">\n                                Sign Out\n                            </li>\n                        </div> :\n                        <div></div>}\n                    </div>\n                    \n                    <Link id=\"dashboard_new_property_button\" to={{\n                        pathname: \"/addproperty\",\n                        state: {\n                            user: this.state.user,\n                            totalEstimateWorth: this.state.totalEstimateWorth,\n                            missingEstimate: this.state.missingEstimate,\n                            profilePicture: this.state.profilePicture\n                        }\n                    }}>\n                        <div id=\"BsFillPlusSquareFill\">New Property</div>\n                        {/* New Property */}\n                    </Link> \n                    <div className=\"clearfix\"/>\n                    <div className=\"dashboard_sidebar_link\">\n                        <Link className=\"dashboard_sidebar_inner_link\" to={{\n                            pathname: \"/dashboard\",\n                            state: {\n                                user: this.state.user,\n                                totalEstimateWorth: this.state.totalEstimateWorth,\n                                missingEstimate: this.state.missingEstimate,\n                                profilePicture: this.state.profilePicture\n                            }\n                        }}>\n                            <MdDashboard className={this.state.currentPage === \"overview\" ? \"dashboard_sidebar_link_icon_on dashboard_sidebar_link_icon\" : \"dashboard_sidebar_link_icon\"} />\n                            <p className={this.state.currentPage === \"overview\" ? \"dashboard_sidebar_link_icon_on dashboard_sidebar_link_text\" : \"dashboard_sidebar_link_text\"}>\n                                Overview\n                            </p>\n                        </Link>\n                    </div>\n                    <div className=\"clearfix\"/>\n                    <div className=\"dashboard_sidebar_link\">\n                        <Link className=\"dashboard_sidebar_inner_link\" to={{\n                            pathname: \"/properties\",\n                            state: {\n                                user: this.state.user,\n                                totalEstimateWorth: this.state.totalEstimateWorth,\n                                missingEstimate: this.state.missingEstimate,\n                                profilePicture: this.state.profilePicture\n                            }\n                        }}>\n                            <BsFillHouseFill className={this.state.currentPage === \"properties\" ? \"dashboard_sidebar_link_icon_on dashboard_sidebar_link_icon\" : \"dashboard_sidebar_link_icon\"} />\n                            <p className={this.state.currentPage === \"properties\" ? \"dashboard_sidebar_link_icon_on dashboard_sidebar_link_text\" : \"dashboard_sidebar_link_text\"}>\n                                Properties\n                            </p>\n                        </Link>\n                    </div>\n                    <div className=\"clearfix\"/>\n                    <div className=\"dashboard_sidebar_link\">\n                        <Link className=\"dashboard_sidebar_inner_link\" to={{\n                            pathname: \"/analysis\",\n                            state: {\n                                user: this.state.user,\n                                totalEstimateWorth: this.state.totalEstimateWorth,\n                                missingEstimate: this.state.missingEstimate,\n                                profilePicture: this.state.profilePicture\n                            }\n                        }}>\n                            <SiGoogleanalytics className={this.state.currentPage === \"analysis\" ? \"dashboard_sidebar_link_icon_on dashboard_sidebar_link_icon\" : \"dashboard_sidebar_link_icon\"} />\n                            <p className={this.state.currentPage === \"analysis\" ? \"dashboard_sidebar_link_icon_on dashboard_sidebar_link_text\" : \"dashboard_sidebar_link_text\"}>\n                                Analysis\n                            </p>\n                        </Link>\n                    </div>\n                    <div className=\"dashboard_sidebar_link\">\n                        <Link className=\"dashboard_sidebar_inner_link\" to={{\n                            pathname: \"/expenses\",\n                            state: {\n                                user: this.state.user,\n                                totalEstimateWorth: this.state.totalEstimateWorth,\n                                missingEstimate: this.state.missingEstimate,\n                                profilePicture: this.state.profilePicture\n                            }\n                        }}>\n                            <FaMoneyCheck className={this.state.currentPage === \"expenses\" ? \"dashboard_sidebar_link_icon_on dashboard_sidebar_link_icon\" : \"dashboard_sidebar_link_icon\"} />\n                            <p className={this.state.currentPage === \"expenses\" ? \"dashboard_sidebar_link_icon_on dashboard_sidebar_link_text\" : \"dashboard_sidebar_link_text\"}>\n                                Expenses\n                            </p>\n                        </Link>\n                    </div>\n                    <div className=\"clearfix\"/>\n                    <div className=\"dashboard_sidebar_link\">\n                        <Link className=\"dashboard_sidebar_inner_link\" to={{\n                            pathname: \"/files\",\n                            state: {\n                                user: this.state.user,\n                                totalEstimateWorth: this.state.totalEstimateWorth,\n                                missingEstimate: this.state.missingEstimate,\n                                profilePicture: this.state.profilePicture\n                            }\n                        }}>\n                            <GoFileDirectory className={this.state.currentPage === \"files\" ? \"dashboard_sidebar_link_icon_on dashboard_sidebar_link_icon\" : \"dashboard_sidebar_link_icon\"} />\n                            <p className={this.state.currentPage === \"files\" ? \"dashboard_sidebar_link_icon_on dashboard_sidebar_link_text\" : \"dashboard_sidebar_link_text\"}>\n                                Files\n                            </p>\n                        </Link>\n                    </div>\n                    {/* <div className=\"clearfix\"/>\n                    <div className=\"dashboard_sidebar_link\">\n                        <Link className=\"dashboard_sidebar_inner_link\" to={{\n                            pathname: \"/explore\",\n                            state: {\n                                id: this.state.id,\n                                firstName: this.state.firstName,\n                                lastName: this.state.lastName,\n                                email: this.state.email,\n                                totalEstimateWorth: this.state.totalEstimateWorth,\n                                missingEstimate: this.state.missingEstimate,\n                            }\n                        }}>\n                            <MdExplore className=\"dashboard_sidebar_link_icon\" />\n                            <p className=\"dashboard_sidebar_link_text\">\n                                Explore\n                            </p>\n                        </Link>\n                    </div> */}\n                    <div className=\"clearfix\"/>\n                    <div className=\"dashboard_sidebar_link\">\n                        <Link className=\"dashboard_sidebar_inner_link\" to={{\n                            pathname: \"/settings\",\n                            state: {\n                                user: this.state.user,\n                                totalEstimateWorth: this.state.totalEstimateWorth,\n                                missingEstimate: this.state.missingEstimate,\n                                profilePicture: this.state.profilePicture\n                            }\n                        }}>\n                            <IoSettingsSharp className={this.state.currentPage === \"settings\" ? \"dashboard_sidebar_link_icon_on dashboard_sidebar_link_icon\" : \"dashboard_sidebar_link_icon\"} />\n                            <p className={this.state.currentPage === \"settings\" ? \"dashboard_sidebar_link_icon_on dashboard_sidebar_link_text\" : \"dashboard_sidebar_link_text\"}>\n                                Settings\n                            </p>\n                        </Link>\n                    </div>\n                    <div className=\"clearfix\"/>\n                    <div className=\"dashboard_sidebar_link\" id=\"dashboard_last\">\n                        <Link className=\"dashboard_sidebar_inner_link\" to={{\n                            pathname: \"/feedback\",\n                            state: {\n                                user: this.state.user,\n                                totalEstimateWorth: this.state.totalEstimateWorth,\n                                missingEstimate: this.state.missingEstimate,\n                                profilePicture: this.state.profilePicture\n                            }\n                        }}>\n                            <MdFeedback className={this.state.currentPage === \"feedback\" ? \"dashboard_sidebar_link_icon_on dashboard_sidebar_link_icon\" : \"dashboard_sidebar_link_icon\"} />\n                            <p className={this.state.currentPage === \"feedback\" ? \"dashboard_sidebar_link_icon_on dashboard_sidebar_link_text\" : \"dashboard_sidebar_link_text\"}>\n                                Feedback\n                            </p>\n                        </Link>\n                    </div>\n                    <div className=\"clearfix\"/>\n                    <div id=\"dashboard_sidebar_version\">\n                        <p id=\"dashboard_sidebar_version_text\">\n                            Beta\n                        </p>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default DashboardSidebar;","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/SettingsDashboard.js",["123","124","125"],"import React from 'react';\nimport axios from 'axios';\n\nimport './CSS/SettingsDashboard.css';\nimport './CSS/Style.css';\n\nimport DashboardSidebar from './DashboardSidebar.js';\n\nimport { MdEdit, MdEmail } from 'react-icons/md';\nimport { ImUser } from 'react-icons/im';\nimport { AiFillClockCircle } from 'react-icons/ai';\nimport { BsFillAwardFill } from 'react-icons/bs';\nimport { RiUser3Fill } from 'react-icons/ri';\nimport { IoSettingsSharp } from 'react-icons/io5';\nimport { IoMdSettings, IoMdNotifications, IoIosSend } from 'react-icons/io';\nimport { FaUserTie, FaBuilding } from 'react-icons/fa';\nimport { TiUser } from 'react-icons/ti';\n\nconst general = \"general\";\nconst email = \"email\";\nconst notifications = \"notifications\";\nconst plan = \"plan\";\n\nclass SettingsDashboard extends React.Component {\n    \n    /***\n     * At a top level, a user's settings are split into\n     * 2 types: user information and user preferences.\n     * User information is stored (and changes to should affect\n     * the Users table.\n     * User preferences is stored in a field within the users table\n     * called settings that is a json field (unstructured).\n     */\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            user: this.props.location.state.user,\n            totalEstimateWorth: this.props.location.state.totalEstimateWorth,\n            missingEstimate: this.props.location.state.missingEstimate,\n            profilePicture: this.props.location.state.profilePicture,\n            toDisplay: general,\n            editGeneral: false,\n            checkboxStates: new Map(\n                [{'receive_digest': true}, \n                {'receive_marketing': true},\n                {'receive_newsletter': true},\n                {'receive_rent_pay_date': true},\n                {'receive_mortgage_pay_date': true},\n                {'receive_property_value': true}]),\n            originalCheckboxStates: new Map(),\n            starterPlanActive: false,\n            professionalPlanActive: false,\n            enterprisePlanActive: false,\n            isLoading: true\n        };\n\n        this.handleFieldChange = this.handleFieldChange.bind(this);\n        this.handleProfilePictureChange = this.handleProfilePictureChange.bind(this);\n        this.capitalizeName = this.capitalizeName.bind(this);\n        this.getJoinedAt = this.getJoinedAt.bind(this);\n        this.handleCheckboxChange = this.handleCheckboxChange.bind(this);\n        this.convertCheckboxMapToObject = this.convertCheckboxMapToObject.bind(this);\n        this.deepCopyMap = this.deepCopyMap.bind(this);\n        this.updateUserSettingsProfile = this.updateUserSettingsProfile.bind(this);\n        this.updateUserSettingsPreferences = this.updateUserSettingsPreferences.bind(this);\n        this.mapsAreEqual = this.mapsAreEqual.bind(this);\n    }\n\n    componentDidMount() {\n        var url = '/api/user/settings/preferences/' + this.state.user[\"id\"];\n        axios({\n            method: 'get',\n            url: url,\n        }).then(response => {\n            var data = response.data;\n\n            // data is a map in the format.\n            // map[string]map[string]interface{}\n            // Example: \n            // data: {\n            //      \"emails\": {\n            //          \"receive_digest\": true,\n            //          \"receive_marketing\": true,\n            //      },\n            //      \"notifications\": {\n            //          \"property_value\": true\n            //      }\n            // }\n\n            var checkboxMap = new Map();\n            checkboxMap.set('receive_digest', data[\"emails\"][\"receive_digest\"]);\n            checkboxMap.set('receive_marketing', data[\"emails\"][\"receive_marketing\"]);\n            checkboxMap.set('receive_newsletter', data[\"emails\"][\"receive_newsletter\"]);\n            checkboxMap.set('rent_pay_date', data[\"notifications\"][\"rent_pay_date\"]);\n            checkboxMap.set('mortgage_pay_date', data[\"notifications\"][\"mortgage_pay_date\"]);\n            checkboxMap.set('property_value', data[\"notifications\"][\"property_value\"]);\n\n            // originalCheckboxMap gives us a reference to what is loaded for the user, since user\n            // actions will modify checkboxStates directly. When we \"save\" their changes, we need to\n            // make sure we update this map as well or it will override their changes until a page reload.\n            var originalCheckboxMap = this.deepCopyMap(checkboxMap);\n\n            this.setState({\n                checkboxStates: checkboxMap,\n                originalCheckboxStates: originalCheckboxMap,\n                isLoading: false\n            });\n        }).catch(error =>{\n            this.setState({\n                displayErrorMessage: true,\n                isLoading: false,\n            });\n        });\n\n        // axios({\n        //     method: 'get',\n        //     url: '/api/user/settings/profile/picture/' + this.state.user[\"id\"],\n        // }).then(response => {\n        //     var src = response.data;\n        //     this.setState({\n        //         profilePicture: src\n        //     })\n        // }).catch(error => console.log(error))\n    }\n\n    updateUserSettingsProfile() {\n\n        var editFirstNameInput = document.getElementById(\"edit_first_name_input\")\n        var editLastNameInput = document.getElementById(\"edit_last_name_input\")\n        var editEmailInput = document.getElementById(\"edit_email_input\")\n        var editPasswordInput = document.getElementById(\"edit_password_input\")\n\n        var editFirstNameInputValue = editFirstNameInput.value;\n        var editLastNameInputValue = editLastNameInput.value;\n        var editEmailInputValue = editEmailInput.value;\n        var editPasswordInputValue = editPasswordInput.value;\n\n        let formData = new FormData();\n        \n        if (editFirstNameInputValue !== \"\") {\n            formData.append(\"first_name\", editFirstNameInputValue)\n        }\n        if (editLastNameInputValue !== \"\") {\n            formData.append(\"last_name\", editLastNameInputValue)\n        }\n        if (editEmailInputValue !== \"\") {\n            formData.append(\"email\", editEmailInputValue)\n        }\n        if (editPasswordInputValue !== \"\") {\n            formData.append(\"password\", editPasswordInputValue)\n        }\n\n        var url = 'api/user/settings/profile/' + this.state.user[\"id\"];\n        axios({\n            method: 'put',\n            url: url,\n            data: formData\n        }).then(response => {\n            console.log(response);\n            if (response.status === 200) {\n                // response.data contains the fields which were successfully changed.\n\n                var editedFields = response.data;\n                var user = this.mergeUser(this.state.user, editedFields);\n                \n                this.setState({\n                    user: user,\n                    editGeneral: false,\n                })\n            }\n        }).catch(error => {\n            console.log(error);\n        });\n    }\n\n    mergeUser(originalUser, editedFields) {\n        for (const [key, value] of Object.entries(editedFields)) {\n            originalUser[key] = value;\n        }\n        return originalUser;\n    }\n    \n    // updateUserSettingsPreferences updates the 'settings' field within the users table.\n    updateUserSettingsPreferences() {\n\n        // No changes to the settings made by the user, just return. \n        if (this.mapsAreEqual(this.state.checkboxStates, this.state.originalCheckboxStates)) {\n            this.setState({\n                editNotifications: false,\n                editEmail: false\n            })\n            return;\n        }\n\n        let formData = new FormData();\n\n        var checkboxStatesObject = this.convertCheckboxMapToObject(this.state.checkboxStates);\n        formData.append('settings', JSON.stringify(checkboxStatesObject));\n\n        var url = 'api/user/settings/preferences/' + this.state.user[\"id\"];\n        axios({\n            method: 'put',\n            url: url,\n            data: formData\n        }).then(response => {\n            if (response.status === 200) {\n                this.setState({\n                    editEmail: false,\n                    editNotifications: false\n                })\n            }\n        }).catch(error => {\n            console.log(error);\n        });\n    }\n\n    mapsAreEqual(map1, map2) {\n        var testVal;\n        if (map1.size !== map2.size) {\n            return false;\n        }\n\n        for (var [key, val] of map1) {\n            testVal = map2.get(key);\n            // in cases of an undefined value, make sure the key\n            // actually exists on the object so there are no false positives\n            if (testVal !== val || (testVal === undefined && !map2.has(key))) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    convertCheckboxMapToObject(checkboxMap) {\n\n        // TODO: el (do we need to convert our response to a map, then back to object? Maybe we can just keep it as an\n        // object).\n        var obj = {\n            \"emails\": {\n                \"receive_digest\": checkboxMap.get(\"receive_digest\"),\n                \"receive_marketing\": checkboxMap.get(\"receive_marketing\"),\n                \"receive_newsletter\": checkboxMap.get(\"receive_newsletter\")\n            },\n            \"notifications\": {\n                \"rent_pay_date\": checkboxMap.get(\"rent_pay_date\"),\n                \"mortgage_pay_date\": checkboxMap.get(\"mortgage_pay_date\"),\n                \"property_value\": checkboxMap.get(\"property_value\")\n            }\n        };\n        return obj;\n    }\n\n    // deepCopyMap will create a deep copy of the input map.\n    deepCopyMap(originalMap) {\n        var newMap = new Map();\n        originalMap.forEach((value, key, map) => {\n            newMap.set(key, value);\n        })\n        return newMap;\n    }\n\n    handleProfilePictureChange(e) {\n        var file = e.target.files[0];\n        var url = '/api/user/settings/profile/picture/' + this.state.user[\"id\"];\n        let formData = new FormData();\n        formData.append('file', file);\n\n        axios({\n            method: 'post',\n            url: url,\n            data: formData\n        }).then(response => {\n            if (response.status === 200) {\n                var src = URL.createObjectURL(file);\n                console.log(src);\n                this.setState({\n                    profilePicture: src\n                })\n            }\n        }).catch(error => {\n            console.log(error);\n        })\n        \n    }\n\n    handleFieldChange(e) {\n        this.setState({ [e.target.name]: e.target.value })\n    }\n\n    capitalizeName(x) {\n        return x.charAt(0).toUpperCase() + x.slice(1);\n    }\n\n    getJoinedAt() {\n        var joined = this.state.user[\"created_at\"];\n        if (joined === null || joined === undefined) {\n            return \"01/01/0001\";\n        }\n        var date = new Date(joined);\n        return date.getMonth() + \"/\" + date.getDate() + \"/\" + date.getFullYear();\n    }\n\n    handleCheckboxChange(e) {\n        var checkboxMap = this.state.checkboxStates;\n        checkboxMap.set(e.target.name, !checkboxMap.get(e.target.name));\n        this.setState({ \n            checkboxStates: checkboxMap\n        });\n    }\n\n    renderChangePlanWarningText() {\n        // Depending on the current user's plans and the plan they have selected, we want to display different warning texts. \n    }\n    \n    renderRightBoxPage() {\n        switch(this.state.toDisplay) {\n            case general:\n                return (\n                    <div className=\"right_box_page_inner_box\">\n                        <p className=\"right_box_page_title\">\n                            General Settings\n                        </p>\n                        <p \n                            className=\"right_box_page_edit_button\"\n                            onClick={() => this.setState({editGeneral: !this.state.editGeneral})}>\n                            {this.state.editGeneral ? \"Cancel\" : \"Edit\"}\n                        </p>\n                        <div className=\"right_box_page_content_inner_box\">\n                            <div className=\"right_box_page_content_inner_box_list\">\n                                <p className=\"right_box_page_content_inner_box_list_text\">\n                                    First Name\n                                </p>\n                                <p className=\"right_box_page_content_inner_box_list_value_text\">\n                                    {this.state.editGeneral ? \n                                    <input\n                                        id=\"edit_first_name_input\"\n                                        className=\"right_box_page_content_inner_box_list_input\"\n                                        placeholder={this.capitalizeName(this.state.user[\"first_name\"])}></input>: \n                                    this.capitalizeName(this.state.user[\"first_name\"])}\n                                </p>\n                            </div>\n                            <div className=\"clearfix\"/>\n                            <div className=\"right_box_page_content_inner_box_list\">\n                                <p className=\"right_box_page_content_inner_box_list_text\">\n                                    Last Name\n                                </p>\n                                <p className=\"right_box_page_content_inner_box_list_value_text\">\n                                    {this.state.editGeneral && this.state.toDisplay === general ? \n                                    <input\n                                        id=\"edit_last_name_input\"\n                                        className=\"right_box_page_content_inner_box_list_input\"\n                                        placeholder={this.capitalizeName(this.state.user[\"last_name\"])}></input>: \n                                    this.capitalizeName(this.state.user[\"last_name\"])}\n                                </p>\n                            </div>\n                            <div className=\"clearfix\"/>\n                            <div className=\"right_box_page_content_inner_box_list\">\n                                <p className=\"right_box_page_content_inner_box_list_text\">\n                                    Email\n                                </p>\n                                <p className=\"right_box_page_content_inner_box_list_value_text\">\n                                    {this.state.editGeneral ? \n                                    <input\n                                        id=\"edit_email_input\"\n                                        className=\"right_box_page_content_inner_box_list_input\"\n                                        placeholder={this.state.user[\"email\"]}></input>: \n                                        this.state.user[\"email\"]}\n                                </p>\n                            </div>\n                            <div className=\"clearfix\"/>\n                            {/* <div className=\"right_box_page_content_inner_box_list\">\n                                <p className=\"right_box_page_content_inner_box_list_text\">\n                                    Phone Number\n                                </p>\n                                <p className=\"right_box_page_content_inner_box_list_value_text\">\n                                    {this.state.editGeneral ? \n                                    <input\n                                        id=\"edit_phone_number_input\"\n                                        type=\"number\"\n                                        className=\"right_box_page_content_inner_box_list_input\"\n                                        placeholder={this.state.phoneNumber ? this.state.phoneNumber : \"(XXX) XXX - XXXX\"}></input>:\n                                    (this.state.phoneNumber ? this.state.phoneNumber : \"(XXX) XXX - XXXX\")}\n                                </p>\n                            </div> */}\n                            <div className=\"right_box_page_content_inner_box_list\">\n                                <p className=\"right_box_page_content_inner_box_list_text\">\n                                    Password\n                                </p>\n                                <p className=\"right_box_page_content_inner_box_list_value_text\">\n                                    {this.state.editGeneral ? \n                                    <input\n                                        id=\"edit_password_input\"\n                                        type=\"password\"\n                                        className=\"right_box_page_content_inner_box_list_input\"\n                                        placeholder={\"********\"}></input>:\n                                    \"********\"}\n                                </p>\n                            </div>\n                            <div className=\"clearfix\"/>\n                            {this.state.editGeneral ? \n                            <div \n                                onClick={this.updateUserSettingsProfile}\n                                className=\"right_box_page_content_save_edits_button\">\n                                Save\n                            </div> :\n                            <div></div>}\n                        </div>\n                    </div>\n                );\n            case email:\n                return (\n                    <div className=\"right_box_page_inner_box\">\n                        <p className=\"right_box_page_title\">\n                            Email Settings\n                        </p>\n                        <p \n                            className=\"right_box_page_edit_button\"\n                            onClick={() => {\n                                if (this.state.editEmail) {\n                                    this.setState({\n                                        checkboxStates: this.deepCopyMap(this.state.originalCheckboxStates)\n                                    })\n                                }\n                                this.setState({\n                                    editEmail: !this.state.editEmail,\n                                })}}>\n                            {this.state.editEmail ? \"Cancel\" : \"Edit\"}\n                        </p>\n                        {this.state.editEmail ?\n                        <p className=\"right_box_page_title_unsubscribe_all_button\">Unsubscribe from All</p> : <p></p>}\n                        <div className=\"clearfix\"/>\n                        <p id=\"email_fyi_text\">\n                            You will always receive emails about important account information\n                        </p>\n                        <div className=\"right_box_page_content_inner_box\">\n                            <div className=\"right_box_page_content_inner_box_list\">\n                                <p className=\"right_box_page_content_inner_box_list_text\">\n                                    Digest Emails\n                                </p>\n                                <p className=\"right_box_page_content_inner_box_list_value_text\">\n                                    {this.state.editEmail ? \n                                    <label className=\"switch\">\n                                        <input \n                                            type=\"checkbox\"\n                                            name=\"receive_digest\"\n                                            checked={this.state.checkboxStates.get('receive_digest')}\n                                            onChange={this.handleCheckboxChange}/>\n                                        <span className=\"slider round\"></span>\n                                    </label> : (this.state.checkboxStates.get('receive_digest') ? \"Yes\" : \"No\")}\n                                </p>\n                            </div>\n                            <div className=\"right_box_page_content_inner_box_list\">\n                                <p className=\"right_box_page_content_inner_box_list_text\">\n                                    Newsletter Emails\n                                </p>\n                                <p className=\"right_box_page_content_inner_box_list_value_text\">\n                                    {this.state.editEmail ? \n                                    <label className=\"switch\">\n                                        <input \n                                            type=\"checkbox\"\n                                            name=\"receive_newsletter\"\n                                            checked={this.state.checkboxStates.get('receive_newsletter')}\n                                            onChange={this.handleCheckboxChange}/>\n                                        <span className=\"slider round\"></span>\n                                    </label>: \n                                    (this.state.checkboxStates.get('receive_newsletter') ? \"Yes\" : \"No\")}\n                                </p>\n                            </div>\n                            <div className=\"right_box_page_content_inner_box_list\">\n                                <p className=\"right_box_page_content_inner_box_list_text\">\n                                    Marketing Emails\n                                </p>\n                                <p className=\"right_box_page_content_inner_box_list_value_text\">\n                                    {this.state.editEmail ? \n                                    <label className=\"switch\">\n                                        <input \n                                            type=\"checkbox\"\n                                            name=\"receive_marketing\"\n                                            checked={this.state.checkboxStates.get('receive_marketing')}\n                                            onChange={this.handleCheckboxChange}/>\n                                        <span className=\"slider round\"></span>\n                                    </label>: \n                                    (this.state.checkboxStates.get('receive_marketing') ? \"Yes\" : \"No\")}\n                                </p>\n                            </div>\n                            <div className=\"clearfix\"/>\n                            {this.state.editEmail ? \n                            <div \n                                onClick={this.updateUserSettingsPreferences}\n                                className=\"right_box_page_content_save_edits_button\">\n                                Save\n                            </div> :\n                            <div></div>}\n                        </div>\n                    </div>\n                );\n            case notifications:\n                return (\n                    <div className=\"right_box_page_inner_box\">\n                        <p className=\"right_box_page_title\">\n                            Notifications Settings\n                        </p>\n                        <p \n                            className=\"right_box_page_edit_button\"\n                            onClick={() => {\n                                if (this.state.editNotifications) {\n                                    this.setState({\n                                        checkboxStates: this.deepCopyMap(this.state.originalCheckboxStates)\n                                    })\n                                }\n                                this.setState({\n                                    editNotifications: !this.state.editNotifications,\n                                })}}>\n                            {this.state.editNotifications ? \"Cancel\" : \"Edit\"}\n                        </p>\n                        <div className=\"right_box_page_content_inner_box\">\n                            <div className=\"right_box_page_content_inner_box_list\">\n                                <p className=\"right_box_page_content_inner_box_list_text\">\n                                    Rent Pay date\n                                </p>\n                                <p className=\"right_box_page_content_inner_box_list_value_text\">\n                                    {this.state.editNotifications ? \n                                    <label className=\"switch\">\n                                        <input\n                                        type=\"checkbox\"\n                                        name=\"rent_pay_date\"\n                                        checked={this.state.checkboxStates.get('rent_pay_date')}\n                                        onChange={this.handleCheckboxChange}></input>\n                                        <span className=\"slider round\"></span>\n                                    </label>: \n                                    (this.state.checkboxStates.get('rent_pay_date') ? \"Yes\" : \"No\")}\n                                </p>\n                            </div>\n                            <div className=\"right_box_page_content_inner_box_list\">\n                                <p className=\"right_box_page_content_inner_box_list_text\">\n                                    Mortgage\n                                </p>\n                                <p className=\"right_box_page_content_inner_box_list_value_text\">\n                                    {this.state.editNotifications ? \n                                    <label className=\"switch\">\n                                        <input \n                                            type=\"checkbox\"\n                                            name=\"mortgage_pay_date\"\n                                            checked={this.state.checkboxStates.get('mortgage_pay_date')}\n                                            onChange={this.handleCheckboxChange}/>\n                                        <span className=\"slider round\"></span>\n                                    </label>: \n                                    (this.state.checkboxStates.get('mortgage_pay_date') ? \"Yes\" : \"No\")}\n                                </p>\n                            </div>\n                            <div className=\"right_box_page_content_inner_box_list\">\n                                <p className=\"right_box_page_content_inner_box_list_text\">\n                                    Property Values\n                                </p>\n                                <p className=\"right_box_page_content_inner_box_list_value_text\">\n                                    {this.state.editNotifications ? \n                                    <label className=\"switch\">\n                                        <input \n                                            type=\"checkbox\"\n                                            name=\"property_value\"\n                                            checked={this.state.checkboxStates.get('property_value')}\n                                            onChange={this.handleCheckboxChange}/>\n                                        <span className=\"slider round\"></span>\n                                    </label>: \n                                    (this.state.checkboxStates.get('property_value') ? \"Yes\" : \"No\")}\n                                </p>\n                            </div>\n                            <div className=\"clearfix\"/>\n                            {this.state.editNotifications ? \n                            <div \n                                onClick={this.updateUserSettingsPreferences}\n                                className=\"right_box_page_content_save_edits_button\">\n                                Save\n                            </div> :\n                            <div></div>}\n                        </div>\n                    </div>\n                );\n            case plan:\n                return (\n                    <div className=\"right_box_page_inner_box\">\n                        <p className=\"right_box_page_title\">\n                            Plan Settings\n                        </p>\n                        <p \n                            className=\"right_box_page_edit_button\"\n                            onClick={() => this.setState({editPlan: !this.state.editPlan})}>\n                            {this.state.editPlan ? \"Cancel\" : \"Change\"}\n                        </p>\n                        <div className=\"right_box_page_content_inner_box\">\n                            <div \n                                className={\n                                    this.state.editPlan ? \n                                    \"edit_plan_class right_box_page_content_inner_box_list\" : \n                                    \"right_box_page_content_inner_box_list\"\n                                }>\n                                <p className=\"right_box_page_content_inner_box_list_text\">\n                                    Plan\n                                </p>\n                                <p className=\"right_box_page_content_inner_box_list_value_text\">\n                                    {this.state.user[\"plan\"] ? this.capitalizeName(this.state.user[\"plan\"]) : \"Starter\"}\n                                </p>\n                                <div className=\"clearfix\"/>\n                                {this.state.editPlan ? \n                                    <div className=\"edit_plan_class_inside_box\">\n                                        <div \n                                            onClick={() => {\n                                                this.setState({\n                                                    starterPlanActive: !this.state.starterPlanActive,\n                                                    professionalPlanActive: false,\n                                                    enterprisePlanActive: false,\n                                                })\n                                            }}\n                                            className={\n                                                this.state.user[\"plan\"] === \"starter\" ? \n                                                \"edit_plan_class_inside_box_card edit_plan_class_inside_box_card_active\" :\n                                                (this.state.starterPlanActive ? \"edit_plan_class_inside_box_card edit_plan_class_inside_box_card_selected\" : \n                                                \"edit_plan_class_inside_box_card\")}>\n                                            <IoIosSend className={\n                                                this.state.user[\"plan\"] === \"starter\" ? \n                                                \"edit_plan_class_inside_box_card_icon edit_plan_class_inside_box_card_icon_active\" :\n                                                \"edit_plan_class_inside_box_card_icon\"}></IoIosSend>\n                                            <p className=\"edit_plan_class_inside_box_card_title\">\n                                                Starter\n                                            </p>\n                                        </div>\n                                        <div \n                                            onClick={() => {\n                                                this.setState({\n                                                    starterPlanActive: false,\n                                                    professionalPlanActive: !this.state.professionalPlanActive,\n                                                    enterprisePlanActive: false,\n                                                })\n                                            }}\n                                            className={\n                                                this.state.user[\"plan\"] === \"professional\" ? \n                                                \"edit_plan_class_inside_box_card edit_plan_class_inside_box_card_active\" :\n                                                (this.state.professionalPlanActive ? \"edit_plan_class_inside_box_card edit_plan_class_inside_box_card_selected\" :\n                                                \"edit_plan_class_inside_box_card\")}>\n                                                <FaUserTie \n                                                    className={\n                                                    this.state.user[\"plan\"] === \"professional\" ? \n                                                    \"edit_plan_class_inside_box_card_icon edit_plan_class_inside_box_card_icon_active\" :\n                                                    \"edit_plan_class_inside_box_card_icon\"}></FaUserTie>\n                                                <p className=\"edit_plan_class_inside_box_card_title\">\n                                                    Professional\n                                                </p>\n                                        </div>\n                                        <div \n                                            onClick={() => {\n                                                this.setState({\n                                                    starterPlanActive: false,\n                                                    professionalPlanActive: false,\n                                                    enterprisePlanActive: !this.state.enterprisePlanActive,\n                                                })\n                                            }}\n                                            className={\n                                                this.state.user[\"plan\"] === \"enterprise\" ? \n                                                \"edit_plan_class_inside_box_card edit_plan_class_inside_box_card_active\" :\n                                                \"edit_plan_class_inside_box_card\"}>\n                                                <FaBuilding \n                                                    className={\n                                                    this.state.user[\"plan\"] === \"enterprise\" ? \n                                                    \"edit_plan_class_inside_box_card_icon edit_plan_class_inside_box_card_icon_active\" :\n                                                    \"edit_plan_class_inside_box_card_icon\"}></FaBuilding>\n                                                <p className={\n                                                    this.state.user[\"plan\"] === \"enterprise\" ?\n                                                    \"edit_plan_class_inside_box_card_title edit_plan_class_inside_box_card_title_active\" : \n                                                    \"edit_plan_class_inside_box_card_title\"}>\n                                                    Enterprise\n                                                </p>\n                                        </div>\n                                        <div className=\"clearfix\"/>\n                                        {this.state.initialChangeButtonPressed ? \n                                        this.renderChangePlanWarningText() : \n                                        <div>\n                                        </div>}\n                                        <div \n                                            onClick={() => this.setState({\n                                                initialChangeButtonPressed: true\n                                            })}\n                                            className=\"edit_plan_submit_button\">\n                                            Change\n                                        </div>\n                                    </div> :\n                                    <div></div>\n                                }\n                            </div>\n                        </div>\n                        \n                    </div>\n                );\n        }\n    }\n\n    render() {\n        return (\n            // <LoadingScreen data={{\n            //     state: {\n            //         id: this.state.userID,\n            //         firstName: this.state.firstName,\n            //         lastName: this.state.lastName,\n            //         email: this.state.email\n            //     }\n            // }}/>\n            <div>\n                <DashboardSidebar key={this.state.profilePicture} data={{\n                    state: {\n                        user: this.state.user,\n                        totalEstimateWorth: this.state.totalEstimateWorth,\n                        missingEstimate: this.state.missingEstimate,\n                        profilePicture: this.state.profilePicture,\n                        currentPage: \"settings\"\n                    }\n                }}/>\n                {this.state.isLoading ? \n                <div></div> :\n\n                <div id=\"settings_dashboard_parent_box\">\n                    <div id=\"settings_dashboard_title_box\">\n                        <p id=\"settings_dashboard_title_box_title\">\n                            Settings\n                        </p>\n                    </div>\n                    <div className=\"clearfix\"></div>\n                    <div id=\"settings_dashboard_parent_inner_box\">\n                        <div id=\"settings_dashboard_user_information_box\">\n                            \n                            {this.state.profilePicture ? \n                            <img id=\"settings_dashboard_user_information_profile_picture\" src={this.state.profilePicture} alt={\"logo\"}/> :\n                            <TiUser id=\"settings_dashboard_user_information_profile_picture_default\"></TiUser>}\n\n                            <label htmlFor=\"settings_dashboard_upload_profile_picture_button\">\n                                <MdEdit id=\"settings_dashboard_user_information_profile_picture_edit_icon\"></MdEdit>\n                            </label>\n                            <input \n                                id=\"settings_dashboard_upload_profile_picture_button\" \n                                type=\"file\" \n                                accept=\".png,.jpg,.heic\"\n                                onChange={this.handleProfilePictureChange}></input>\n\n                            <div className=\"clearfix\"/>\n                            <div id=\"settings_dasboard_user_information_inner_box\">\n                                <p className=\"settings_dashboard_user_information_inner_box_title\">\n                                    Info\n                                </p>\n                                <div className=\"settings_dashboard_user_information_bullet_box\">\n                                    <ImUser className=\"settings_dashboard_user_information_icon\"></ImUser>\n                                    <p className=\"settings_dashboard_user_information_inner_box_text\">\n                                        {this.capitalizeName(this.state.user[\"first_name\"])} {this.capitalizeName(this.state.user[\"last_name\"])} \n                                    </p>\n                                </div>\n                                <div className=\"clearfix\"/>\n                                <div className=\"settings_dashboard_user_information_bullet_box\">\n                                    <MdEmail className=\"settings_dashboard_user_information_icon\"></MdEmail>\n                                    <p className=\"settings_dashboard_user_information_inner_box_text\">\n                                        {this.state.user[\"email\"]}\n                                    </p>\n                                </div>\n                                <div className=\"clearfix\"/>\n                                <div className=\"settings_dashboard_user_information_bullet_box\">\n                                    <AiFillClockCircle className=\"settings_dashboard_user_information_icon\"></AiFillClockCircle>\n                                    <p className=\"settings_dashboard_user_information_inner_box_text\">\n                                        Joined on {this.getJoinedAt()}\n                                    </p>\n                                </div>\n                                <div className=\"clearfix\"/>\n                                <div className=\"settings_dashboard_user_information_bullet_box\">\n                                    <BsFillAwardFill className=\"settings_dashboard_user_information_icon\"></BsFillAwardFill>\n                                    <p className=\"settings_dashboard_user_information_inner_box_text\">\n                                        {this.state.user[\"plan\"] ? this.capitalizeName(this.state.user[\"plan\"]) : \"Starter\"} Plan\n                                    </p>\n                                </div>\n                            </div>\n                            {/* <form id=\"settings_dashboard_user_information_form\">\n                                <input placeholder={this.state.firstName ? this.capitalizeName(this.state.firstName) : \"First Name\"}  className=\"settings_dashboard_user_information_input\" type=\"text\" name=\"firstNameChange\" onChange={this.handleFieldChange}/>\n                                <input placeholder={this.state.lastName ? this.capitalizeName(this.state.lastName) : \"Last Name\"}  className=\"settings_dashboard_user_information_input\" type=\"text\" name=\"lastNameChange\" onChange={this.handleFieldChange}/>\n                                <input placeholder={this.state.email ? this.state.email : \"Email\"}  className=\"settings_dashboard_user_information_input\" type=\"text\" name=\"emailChange\" onChange={this.handleFieldChange}/>\n                                <input placeholder=\"New Password\"  id=\"settings_dashboard_user_information_input_password\" className=\"settings_dashboard_user_information_input\" type=\"text\" name=\"passwordChange\" onChange={this.handleFieldChange}/>\n                                <input id=\"settings_dashboard_user_information_form_submit_button\" type=\"submit\" value=\"Save\"></input>\n                            </form> */}\n                        </div>\n                        <div id=\"settings_dashboard_right_box\">\n                            <div id=\"settings_dashboard_right_box_nav_bar\">\n                                <li \n                                    onClick={() => \n                                        this.setState({\n                                            toDisplay: general,\n                                            editEmail: false,\n                                            editNotifications: false,\n                                            editPlan: false\n                                        })}\n                                    className={\n                                        this.state.toDisplay === general ? \n                                        \"settings_dashboard_right_box_nav_bar_list settings_dashboard_right_box_nav_bar_active_list\" : \n                                        \"settings_dashboard_right_box_nav_bar_list\"}>\n                                    <IoSettingsSharp className=\"settings_dashboard_right_box_nav_bar_list_icon\"></IoSettingsSharp>\n                                    <p className=\"settings_dashboard_right_box_nav_bar_list_text\">\n                                        General\n                                    </p>\n                                </li>\n                                <div className=\"clearfix\"/>\n                                <li \n                                    onClick={() => \n                                        this.setState({\n                                            toDisplay: email,\n                                            editGeneral: false,\n                                            editNotifications: false,\n                                            editPlan: false\n                                        })}\n                                    className={\n                                        this.state.toDisplay === email ? \n                                        \"settings_dashboard_right_box_nav_bar_list settings_dashboard_right_box_nav_bar_active_list\" : \n                                        \"settings_dashboard_right_box_nav_bar_list\"}>\n                                    <MdEmail className=\"settings_dashboard_right_box_nav_bar_list_icon\"></MdEmail>\n                                    <p className=\"settings_dashboard_right_box_nav_bar_list_text\">\n                                        Email\n                                    </p>\n                                </li>\n                                <div className=\"clearfix\"/>\n                                <li \n                                    onClick={() => \n                                        this.setState({\n                                            toDisplay: notifications,\n                                            editGeneral: false,\n                                            editEmail: false,\n                                            editPlan: false\n                                        })}\n                                    className={\n                                        this.state.toDisplay === notifications ? \n                                        \"settings_dashboard_right_box_nav_bar_list settings_dashboard_right_box_nav_bar_active_list\" : \n                                        \"settings_dashboard_right_box_nav_bar_list\"}>\n                                    <IoMdNotifications className=\"settings_dashboard_right_box_nav_bar_list_icon\"></IoMdNotifications>\n                                    <p className=\"settings_dashboard_right_box_nav_bar_list_text\">\n                                        Notifications\n                                    </p>\n                                </li>\n                                <div className=\"clearfix\"/>\n                                <li \n                                    onClick={() => \n                                        this.setState({\n                                            toDisplay: plan,\n                                            editGeneral: false,\n                                            editEmail: false,\n                                            editNotifications: false\n                                        })}\n                                    className={\n                                        this.state.toDisplay === plan ? \n                                        \"settings_dashboard_right_box_nav_bar_list settings_dashboard_right_box_nav_bar_active_list\" : \n                                        \"settings_dashboard_right_box_nav_bar_list\"}>\n                                    <BsFillAwardFill className=\"settings_dashboard_right_box_nav_bar_list_icon\"></BsFillAwardFill>\n                                    <p className=\"settings_dashboard_right_box_nav_bar_list_text\">\n                                        Plan\n                                    </p>\n                                </li>\n                            </div>\n                            {this.renderRightBoxPage()}\n                        </div>\n                    </div>\n                </div>}\n            </div>\n        )\n    }\n}\n\nexport default SettingsDashboard;","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/Login.js",[],"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/FilesDashboard.js",["126","127","128","129","130"],"import React from 'react';\nimport axios from 'axios';\n\nimport './CSS/FilesDashboard.css';\nimport './CSS/Style.css';\n\nimport DashboardSidebar from './DashboardSidebar.js';\nimport NotificationSidebar from './NotificationSidebar.js';\nimport FileCard from './FileCard.js';\nimport UploadFileModal from './UploadFileModal.js';\n\nimport ProgressBar from './../utility/ProgressBar.js';\n\nimport { MdFileDownload, MdEdit } from 'react-icons/md';\nimport { IoMdArrowDropdown } from 'react-icons/io';\nimport { IoTrashSharp } from 'react-icons/io5';\nimport { \n    AiFillFile, \n    AiFillFileImage, \n    AiFillFileExclamation, \n    AiFillFilePdf, \n    AiFillFileExcel, \n    AiFillFilePpt, \n    AiFillFileText, \n    AiFillFileWord, \n    AiFillFileZip } from 'react-icons/ai';\n\n/****\n * The UI is rendered using a field \"filesToDisplay\".\n * filesToDisplay is re-set every time we call renderFiles().\n * renderFiles() takes in a map of [propertyID -> []Files]\n * renderFiles() will automatically recreate the ui state and update the UI. \n * All edits to the state should be done by editing this.state.propertyToFilesMap \n * and passing it in to renderFiles(). \n */\n\nconst small = \"small\";\nconst medium = \"medium\";\n\nexport const openSignedURL = (userID, fileKey)  => {\n    var url = \"api/user/files/\" + userID + \"/\" + fileKey;\n    axios({\n        method: 'get',\n        url: url,\n        params: {\n            request: \"signed_url\"\n        }\n    }).then(response => {\n        var url = response.data;\n        if (url !== \"\") {\n            window.open(url, '_blank', 'noopener,noreferrer')\n        }\n    }).catch(error => console.log(error));\n}\n\n\n // isSmall is used for small icons\n export const mapFileTypeToIcon = (imageType, size, isActive) => {\n    var classNames;\n    if (size === small) {\n         classNames = \"files_dashboard_upload_image_type_mini_icon\";\n    } else if (size === medium) {\n        classNames = \"files_dashboard_upload_image_type_medium_icon\";\n    } else {\n        classNames = \"files_dashboard_upload_image_type\";\n    }\n\n    if (imageType === null || imageType === undefined) {\n        classNames += isActive? \" card_white\" : \" card_grey\";\n        return (\n            <div>\n                <AiFillFileExclamation \n                    className={classNames}>\n                </AiFillFileExclamation>\n            </div>\n        )\n    }\n\n    if (imageType.includes(\"image\")){\n        classNames += isActive? \" card_white\" : \" card_blue\";\n        return (\n            <div>\n                <AiFillFileImage \n                    className={classNames}>\n                </AiFillFileImage>\n            </div>\n        );\n    } else if (imageType.includes(\"pdf\")) {\n        classNames += isActive? \" card_white\" : \" card_red\";\n        return (\n            <div>\n                <AiFillFilePdf\n                    className={classNames}>\n                </AiFillFilePdf>\n            </div>\n        )\n    } else if (imageType.includes(\"video\")) {\n        classNames += isActive? \" card_white\" : \" card_blue\";\n        return (\n            <div>\n                <AiFillFile \n                    className={classNames}>\n                </AiFillFile>\n            </div>\n        )\n    } else if (imageType.includes(\"audio\")) {\n        classNames += isActive? \" card_white\" : \" card_blue\";\n        return (\n            <div>\n                <AiFillFile \n                    className={classNames}>\n                </AiFillFile>\n            </div>\n        )\n    } else if (imageType.includes(\"zip\")) {\n        classNames += isActive? \" card_white\" : \" card_grey\";\n        return (\n            <div>\n                <AiFillFileZip\n                    className={classNames}>\n                </AiFillFileZip>\n            </div>\n        )\n    } else if (imageType.includes(\"text\")) {\n        classNames += isActive? \" card_white\" : \" card_grey\";\n        return (\n            <div>\n                <AiFillFileText\n                    className={classNames}>\n                </AiFillFileText>\n            </div>\n        )\n    } else if (imageType.includes(\"presentation\")) {\n        classNames += isActive? \" card_white\" : \" card_orange\";\n        return (\n            <div>\n                <AiFillFilePpt\n                    className={classNames}>\n                </AiFillFilePpt>\n            </div>\n        )\n    } else if (imageType.includes(\"spreadsheet\")) {\n        classNames += isActive? \" card_white\" : \" card_green\";\n        return (\n            <div>\n                <AiFillFileExcel\n                    className={classNames}>\n                </AiFillFileExcel>\n            </div>\n        )\n    } else if (imageType.includes(\"doc\")) {\n        classNames += isActive? \" card_white\" : \" card_blue\";\n        return (\n            <div>\n                <AiFillFileWord\n                    className={classNames}>\n                </AiFillFileWord>\n            </div>\n        )\n    } else {\n        classNames += isActive? \" card_white\" : \" card_grey\";\n        return (\n            <div>\n                <AiFillFileExclamation\n                    className={classNames}>\n                </AiFillFileExclamation>\n            </div>\n        )\n    }\n}\n\nclass FilesDashboard extends React.Component {\n        \n    constructor(props) {\n        super(props);\n\n        this.state = {\n            user: this.props.location.state.user,\n            totalEstimateWorth: this.props.location.state.totalEstimateWorth,\n            missingEstimate: this.props.location.state.missingEstimate,\n            profilePicture: this.props.location.state.profilePicture,\n            sortToggleMap: [['A-Z', false]],\n            // files is the main point with how files are displayed.\n            files: [],\n            originalLoadedFiles: [],\n            propertyToFilesMap: new Map(),\n            properties: new Map(),\n            // activeFiles are files that the user has currently selected.\n            activeFiles: new Map(),\n            activeSearchFiles: [],\n            filesToDisplay: null,\n            displayUploadFileBox: false,\n            fileUploadProgressBar: 0,\n            displayUploadFileBox: false,\n            sortType: null,\n            categoryType: null,\n            categoryTypeArrowDown: true,\n            sortTypeArrowDown: true,\n            isFileLoading: true,\n            isPropertiesLoading: true,\n        };\n\n        this.setActiveFileAttributes = this.setActiveFileAttributes.bind(this);\n        this.downloadActiveFiles = this.downloadActiveFiles.bind(this);\n        this.downloadFile = this.downloadFile.bind(this);\n        this.deleteActiveFiles = this.deleteActiveFiles.bind(this);\n        this.deleteFile = this.deleteFile.bind(this);\n        this.handleSearchBar = this.handleSearchBar.bind(this);\n        this.trimTrailingFileName = this.trimTrailingFileName.bind(this);\n        this.convertPropertyToFilesMapToElements = this.convertPropertyToFilesMapToElements.bind(this);\n        this.closeFileUpload = this.closeFileUpload.bind(this);\n    }\n\n    componentDidMount() {\n        // Load our files list.\n        axios({\n            method: 'get',\n            url: 'api/user/files/' + this.state.user[\"id\"],\n        }).then(response => {\n            var filesList = response.data;\n            filesList.sort(function(a,b){\n                return new Date(b[\"metadata\"][\"last_edited_at\"]) - new Date(a[\"metadata\"][\"last_edited_at\"]);\n            })\n\n            var propertyToFilesMap = new Map();\n\n            for (var i = 0; i < filesList.length; i++) {\n\n                var file = filesList[i];\n                var propertyID = file[\"property_id\"];\n                \n                // property does not exist yet. Add it.\n                if (!propertyToFilesMap.has(propertyID)) {\n                    propertyToFilesMap.set(propertyID, []);\n                }\n\n                var filesArrAtProperty = propertyToFilesMap.get(propertyID);\n                filesArrAtProperty.push(file);\n                propertyToFilesMap.set(propertyID, filesArrAtProperty);\n            }  \n\n            this.renderFiles(propertyToFilesMap);\n\n            this.setState({\n                files: filesList.slice(),\n                originalLoadedFiles: filesList.slice(),\n                // sort our properties map by alphabetical order, except leave General as last.\n                propertyToFilesMap: propertyToFilesMap,\n                isFileLoading: false\n            });\n        }).catch(error => {\n            this.setState({\n                isFileLoading: false\n            })\n            console.log(error);\n        });\n\n        // Load our properties list.\n        axios({\n            method: 'get',\n            url:  'api/user/property/' + this.state.user[\"id\"],\n        }).then(response => {\n            var propertiesList = response.data;\n\n            var propertiesMap = new Map();\n            for (var i = 0; i < propertiesList.length; i++) {\n                var propertyID = propertiesList[i][\"id\"];\n                var propertyAddress = propertiesList[i][\"address\"];\n                propertiesMap.set(propertyID, propertyAddress);\n            }\n            this.setState({\n                properties: [...propertiesMap],\n                isPropertiesLoading: false\n            });\n        }).catch(error => {\n            console.log(error);\n            this.setState({\n                isPropertiesLoading: false\n            })\n        });\n    }\n\n    closeFileUpload() {\n        this.setState({\n            displayUploadFileBox: false\n        })\n    }\n    \n    downloadFile(value, key, map) {\n        var url = \"api/user/files/\" + this.state.user[\"id\"] + \"/\" + key;\n        axios({\n            method: 'get',\n            url: url,\n            params: {\n                request: \"download\"\n            },\n            responseType: 'blob'\n        }).then(response => {\n            // Downloads the file\n            // Credit: https://gist.github.com/javilobo8/097c30a233786be52070986d8cdb1743\n            const url = window.URL.createObjectURL(new Blob([response.data]));\n            const link = document.createElement('a');\n            link.href = url;\n            const contentDisposition = response.headers['content-disposition'];\n            let fileName = 'unknown';\n            if (contentDisposition) {\n                const fileNameMatch = contentDisposition.match(/filename='(.+)'/);\n                if (fileNameMatch.length === 2)\n                    fileName = fileNameMatch[1];\n            }\n            link.setAttribute('download', fileName); //or any other extension\n            document.body.appendChild(link);\n            link.click();\n        }).catch(error => console.log(error));\n    }\n\n    downloadActiveFiles() {\n        this.state.activeFiles.forEach(this.downloadFile)\n    }\n\n    async deleteFile(key) {\n        var url = \"api/user/files/\" + this.state.user[\"id\"] + \"/\" + key;\n        var success = false;\n        await axios({\n            method: 'delete',\n            url: url,\n        }).then(response => {\n            if (response.status === 200) {\n                success = true;\n                return success;\n            }\n        }).catch(error => console.log(error));\n        return success;\n    }\n\n    async deleteActiveFiles() {\n        var currFiles = this.state.files;\n        var activeFiles = this.state.activeFiles;\n        var activeFilesIterator = activeFiles.entries();\n        var currPropertyToFilesMap = new Map([...this.state.propertyToFilesMap]);\n\n        var nextElem = activeFilesIterator.next();\n        while (nextElem !== null && nextElem.value !== undefined) {\n            var key = nextElem.value[0];\n            var success = await this.deleteFile(key);\n            if (success === true) {\n                activeFiles.delete(key);\n                var propertyID = nextElem.value[1][\"property_id\"];\n                var arrAtPropertyID = currPropertyToFilesMap.get(propertyID);\n                \n                var arrAtPropertyIDLength = arrAtPropertyID.length;\n                for (var i = 0; i < arrAtPropertyIDLength; i++) {\n                    var fKey = arrAtPropertyID[i][\"property_id\"] + \"/\" + arrAtPropertyID[i][\"name\"]\n                    if (key === fKey) {\n                        arrAtPropertyID.splice(i, 1);\n                        currPropertyToFilesMap.set(propertyID, arrAtPropertyID);\n                        break;\n                    }\n                }\n\n                for (var i = 0; i < currFiles.length; i++) {\n                    // When we filter by properties, we inject <div> elements which do not have a state.\n                    // Add this check to filter them out. \n                    var file = currFiles[i];\n                    var fKey = file[\"property_id\"] + \"/\" + file[\"name\"];\n                    if (key === fKey) {\n                        currFiles.splice(i, 1);\n                        continue;\n                    }\n                }\n            }\n            nextElem = activeFilesIterator.next();\n        }\n        this.renderFiles(currPropertyToFilesMap);\n\n        this.setState({\n            files: [...currFiles],\n            activeFiles: [...activeFiles],\n            propertyToFilesMap: currPropertyToFilesMap\n        });\n    }\n     \n    trimTrailingFileName(fileName) {\n        if (fileName.length > 20) {\n            return fileName.substring(0,20) + \"...\";\n        }\n        return fileName;\n    }\n\n    handleSearchBar(e) {\n        var searchValue = e.target.value.toLowerCase().replace(/\\s/g, \"\");\n\n        this.setState({\n            activeSearchFiles: this.state.filesToDisplay.filter(file => {\n                return (file.props && file.props.data) ? file.props.data.state.file[\"name\"].toLowerCase().replace(/\\s/g, \"\").startsWith(searchValue) : file;\n            })\n        })\n    }\n\n    renderActiveSearchFiles() {\n        return this.state.activeSearchFiles.length > 0 ? this.state.activeSearchFiles : this.renderNoFiles();\n    }\n\n\n    // file Key = propertyID + '/' + fileName\n    setActiveFileAttributes(fileKey, file, toRemove) {\n        var currentActiveFiles = this.state.activeFiles;\n        if (currentActiveFiles === null || currentActiveFiles === undefined || currentActiveFiles.length === 0) {\n            currentActiveFiles = new Map();\n        }\n        if (currentActiveFiles.size >= 25 && !toRemove) {\n            return false\n        }\n        if (!toRemove) {\n            currentActiveFiles.set(fileKey, file);\n        } else {\n            // Remove from active (\"unclicked\")\n            currentActiveFiles.delete(fileKey);\n        }\n        this.setState({\n            activeFiles: currentActiveFiles\n        })\n        return true;\n    }\n\n    renderNoFiles() {\n        return (\n            <div id=\"files_dashboard_no_files_box\">\n                <p id=\"files_dashboard_no_files_box_title\">\n                    No Files\n                </p>\n            </div>\n        );\n    }\n\n    handleSortOptionsHelper(newPropertyToFilesMap, sortType, arrowDown) {\n\n        newPropertyToFilesMap.forEach((key, value, map) => {\n            \n            // key is an array of html elements containing files.\n            var files = key;\n\n            switch (sortType) {\n                case \"A-Z\":\n                    files.sort(function(a,b) {\n                        if (a[\"name\"] > b[\"name\"]) {\n                            return arrowDown ? 1 : -1;\n                        } else if (b[\"name\"] > a[\"name\"]){\n                            return arrowDown ? -1 : 1;\n                        }\n                        return 0;\n                    })\n                    break;\n                case \"Uploaded Date\":\n                    files.sort(function(a,b) {\n                        return arrowDown ? \n                        new Date(a[\"metadata\"][\"uploaded_at\"]) - new Date(b[\"metadata\"][\"uploaded_at\"]) :\n                        new Date(b[\"metadata\"][\"uploaded_at\"]) - new Date(a[\"metadata\"][\"uploaded_at\"]);\n                    })\n                    break;\n                case \"Last Edited Date\":\n                    files.sort(function(a,b) {\n                        return arrowDown ?\n                        new Date(a[\"metadata\"][\"last_edited_at\"]) - new Date(b[\"metadata\"][\"last_edited_at\"]) :\n                        new Date(b[\"metadata\"][\"last_edited_at\"]) - new Date(a[\"metadata\"][\"last_edited_at\"]);\n                    })\n                    break;\n            }\n        });\n        return newPropertyToFilesMap; \n    }\n\n    /* handleSortOptions is a state machine handler. There are three possible \n    /* states that our Sort button can be in. \n    /* State 1: Default: (Sort V) (V is the down Arrow)\n    /* State 2: After click: (SORT_TYPE V), for example (A-Z V)\n    /* State 3: After secondary click: (SORT_TYPE ^) (^ is the up Arrow)\n    /* We cycle between these states */\n    handleSortOptions(sortType) {\n\n        var sortTypeArrowDown = this.state.sortTypeArrowDown;\n        var newPropertyToFilesMap;\n\n        if (this.state.sortType === null || this.state.sortType === undefined || this.state.sortType !== sortType) {\n            newPropertyToFilesMap = this.handleSortOptionsHelper(this.state.propertyToFilesMap, sortType, true);\n            sortTypeArrowDown = true;\n        } else if (sortTypeArrowDown){\n            newPropertyToFilesMap = this.handleSortOptionsHelper(this.state.propertyToFilesMap, sortType, false);\n            sortTypeArrowDown = false;\n        } else if (!sortTypeArrowDown) {\n            // we sort by last edited date by default.\n            newPropertyToFilesMap = this.handleSortOptionsHelper(this.state.propertyToFilesMap, \"Last Edited Date\", true);\n            sortType = null;\n            sortTypeArrowDown = true;\n        }\n\n        this.renderFiles(newPropertyToFilesMap);\n\n        this.setState({\n            sortType: sortType,\n            displaySortBox: false,\n            sortTypeArrowDown: sortTypeArrowDown,\n            propertyToFilesMap: newPropertyToFilesMap,\n        })\n    }\n\n    convertPropertyToFilesMapToElements(propertyToFilesMap) {\n\n        var files = [];\n        var generalArr = [];\n        propertyToFilesMap.forEach((key, value, map) => {\n            // key is an array of html elements; value is the propertyID.\n            var tempElementsArr = [];\n            var propertyID;\n            var propertyAddress;\n            var propertyName;\n            \n            for (var i = 0; i < key.length; i++) {\n                var file = key[i];\n                propertyID = file[\"property_id\"];\n                propertyAddress = file[\"address\"];\n                propertyName = file[\"name\"]\n                tempElementsArr.push(\n                    <FileCard key={propertyID + \"/\" + propertyName} data={{\n                        state: {\n                            user: this.state.user,\n                            file: file,\n                            backgroundColor: \"white\",\n                            setActiveFileAttributes: this.setActiveFileAttributes,\n                            openSignedURL: openSignedURL, \n                            mapFileTypeToIcon: mapFileTypeToIcon\n                        }                       \n                    }}/>\n                )\n            }\n            // Add our clearfix.\n            tempElementsArr.concat(\n                <div className=\"clearfix\"/>\n            );\n\n            tempElementsArr.unshift(\n                <div key={propertyID + i}>\n                    <div className=\"files_dashboard_property_sort_title\">\n                        {propertyAddress}\n                    </div>\n                    <div className=\"clearfix\"/>\n                </div>\n            );\n\n            // place general at the front.\n            if (value === \"general\") {\n                generalArr = tempElementsArr;\n                return;\n            }\n            files = files.concat(tempElementsArr);\n        })\n\n        files = generalArr.concat(files);\n        // files.unshift(generalArr);\n        return files;\n    }\n\n    renderFiles(propertyToFilesMap) {\n        this.setState({\n            filesToDisplay: [...this.convertPropertyToFilesMapToElements(propertyToFilesMap)]\n        })\n    }\n\n    // renderSortOptions() {\n        \n    //     var options = [];\n    //     var sortTypes = ['A-Z', 'Uploaded Date', 'Last Edited At'];\n\n    //     for (var i = 0; i < sortTypes.length; i++) {\n    //         var sortType = sortTypes[i];\n    //         options.push(\n    //             <li key={\"sort\" + i} className={\n    //                 this.state.sortType === {sortType} ?\n    //                 \"files_dashboard_sort_options_list files_dashboard_sort_focus\" : \n    //                 \"files_dashboard_sort_options_list\"\n    //             }\n    //             onClick={this.handleSortOptions({sortType})}\n    //             >{sortType}</li>\n    //         );\n    //     }\n    //     return (<div>\n    //         {options}\n    //     </div>);\n    // }\n\n    render() {\n        return (\n            <div>\n                <DashboardSidebar data={{\n                    state: {\n                        user: this.state.user,\n                        totalEstimateWorth: this.state.totalEstimateWorth,\n                        missingEstimate: this.state.missingEstimate,\n                        profilePicture: this.state.profilePicture,\n                        currentPage: \"files\"\n                    }\n                }}/>\n                <div id=\"files_dashboard_parent_box\">\n                    {this.state.displayUploadFileBox ? \n                        <div className=\"files_dashboard_display_add_file_box\">\n                            <UploadFileModal\n                                data={{\n                                    state: {\n                                        properties: this.state.properties,\n                                        closeFileUpload: this.closeFileUpload\n                                    }                       \n                                }}/>\n                        </div> :\n                    <div></div>}\n                    <div id=\"files_dashboard_welcome_box\">\n                        <p id=\"files_dashboard_welcome_box_title\">\n                            Files\n                        </p>\n                        <input id=\"files_dashboard_search_bar\" placeholder=\"Search...\" onChange={this.handleSearchBar}>\n                        </input>\n                    </div>\n                    <div className=\"clearfix\"/>\n\n                    {this.state.isFileLoading || this.state.isPropertiesLoading ? <div></div> : \n                    <div>\n                        <div id=\"files_dashboard_icons_box\">\n                            <div   \n                                id=\"files_dashboard_category_parent\"\n                                className=\"files_dashboard_filter_and_sort_box\" \n                                onMouseEnter={() => this.setState({displayCategoryBox: true})} \n                                onMouseLeave={() => this.setState({displayCategoryBox: false})}>\n                                <div \n                                    id=\"files_dashboard_sort\" \n                                    className={\n                                            this.state.displayCategoryBox ? \n                                            \"square_bottom_borders display_sort_box files_dashboard_category_and_sort\" : \n                                            (\n                                                this.state.categoryType ? \n                                                \"display_sort_box files_dashboard_category_and_sort\" : \n                                                \"files_dashboard_category_and_sort\"\n                                            )}\n                                    onClick={() => {\n                                        if (this.state.sortType) {\n                                            this.handleSortOptions(this.state.sortType);\n                                            }}\n                                        }\n                                        >\n                                    <p className=\"files_dashboard_sort_text\">\n                                        {this.state.categorType ? this.state.categoryType : \"Category\"}\n                                    </p>\n                                    <IoMdArrowDropdown id=\"files_dashboard_sort_icon\" className={this.state.categoryTypeArrowDown ? \"\" : \"files_dashboard_sort_icon_up\"}></IoMdArrowDropdown>\n\n                                </div>\n                            </div>\n                            {\n                                this.state.displayCategoryBox ? \n                                <div \n                                    id=\"files_dashboard_category_options_box\" \n                                    className=\"files_dashboard_category_and_sort_options_box\"\n                                    onMouseEnter={() => this.setState({displayCategoryBox: true})} \n                                    onMouseLeave={() => this.setState({displayCategoryBox: false})}>\n                                    <li className={\n                                            this.state.categoryType === \"Mortgage\" ? \n                                            \"files_dashboard_sort_options_list files_dashboard_sort_focus\" : \n                                            \"files_dashboard_sort_options_list\"\n                                        } \n                                        onClick={() => this.handleCategoryOptions(\"Mortgage\")}>\n                                        Mortgage\n                                    </li>\n                                    <li className={\n                                            this.state.categoryType === \"Contracting\" ? \n                                            \"files_dashboard_sort_options_list files_dashboard_sort_focus\" :\n                                            \"files_dashboard_sort_options_list\"\n                                        } \n                                        onClick={() => this.handleCategoryOptions(\"Contracting\")}>\n                                        Contracting\n                                    </li>\n                                    <li className={\n                                            this.state.categoryType === \"Property\" ?\n                                            \"files_dashboard_sort_options_list files_dashboard_sort_focus\" :\n                                            \"files_dashboard_sort_options_list\"\n                                        } onClick={() => this.handleCategoryOptions(\"Property\")}>\n                                        Property\n                                    </li>\n                                    <li className={\n                                            this.state.categoryType === \"Receipts\" ?\n                                            \"files_dashboard_sort_options_list files_dashboard_sort_focus\" :\n                                            \"files_dashboard_sort_options_list\"\n                                        } onClick={() => this.handleCategoryOptions(\"Receipts\")}>\n                                        Receipts\n                                    </li>\n                                    <li className={\n                                            this.state.categoryType === \"Repairs\" ?\n                                            \"files_dashboard_sort_options_list files_dashboard_sort_focus\" :\n                                            \"files_dashboard_sort_options_list\"\n                                        } onClick={() => this.handleCategoryOptions(\"Repairs\")}>\n                                        Repairs\n                                    </li>\n                                    <li className={\n                                            this.state.categoryType === \"Taxes\" ?\n                                            \"files_dashboard_sort_options_list files_dashboard_sort_focus\" :\n                                            \"files_dashboard_sort_options_list\"\n                                        } onClick={() => this.handleCategoryOptions(\"Taxes\")}>\n                                        Taxes\n                                    </li>\n                                    <li className={\n                                            this.state.categoryType === \"Other\" ?\n                                            \"files_dashboard_sort_options_list files_dashboard_sort_focus\" :\n                                            \"files_dashboard_sort_options_list\"\n                                        } onClick={() => this.handleCategoryOptions(\"Other\")}>\n                                        Other\n                                    </li>\n                                </div> : \n                                <div></div>\n                            }\n                            <div \n                                id=\"files_dashboard_sort_parent\"\n                                className=\"files_dashboard_filter_and_sort_box\" \n                                onMouseEnter={() => this.setState({displaySortBox: true})} \n                                onMouseLeave={() => this.setState({displaySortBox: false})}>\n                                <div \n                                    className={\n                                            this.state.displaySortBox ? \n                                            \"square_bottom_borders display_sort_box files_dashboard_category_and_sort\" : \n                                            (\n                                                this.state.sortType ? \n                                                \"display_sort_box files_dashboard_category_and_sort\" : \n                                                \"files_dashboard_category_and_sort\"\n                                            )}\n                                    onClick={() => {\n                                        if (this.state.sortType) {\n                                            this.handleSortOptions(this.state.sortType);\n                                            }}\n                                        }\n                                        >\n                                    <p className=\"files_dashboard_sort_text\">\n                                        {this.state.sortType ? this.state.sortType : \"Sort\"}\n                                    </p>\n                                    <IoMdArrowDropdown id=\"files_dashboard_sort_icon\" className={this.state.sortTypeArrowDown ? \"\" : \"files_dashboard_sort_icon_up\"}></IoMdArrowDropdown>\n                                    \n                                </div>\n                            </div>\n                            {\n                                this.state.displaySortBox ? \n                                <div \n                                    id=\"files_dashboard_sort_options_box\" \n                                    className=\"files_dashboard_category_and_sort_options_box\"\n                                    onMouseEnter={() => this.setState({displaySortBox: true})} \n                                    onMouseLeave={() => this.setState({displaySortBox: false})}>\n                                    {/* {this.renderSortOptions()} */}\n                                    <li className={\n                                            this.state.sortType === \"A-Z\" ? \n                                            \"files_dashboard_sort_options_list files_dashboard_sort_focus\" : \n                                            \"files_dashboard_sort_options_list\"\n                                        } \n                                        onClick={() => this.handleSortOptions(\"A-Z\")}>\n                                        A-Z\n                                    </li>\n                                    <li className={\n                                            this.state.sortType === \"Uploaded Date\" ? \n                                            \"files_dashboard_sort_options_list files_dashboard_sort_focus\" :\n                                            \"files_dashboard_sort_options_list\"\n                                        } \n                                        onClick={() => this.handleSortOptions(\"Uploaded Date\")}>\n                                        Uploaded Date\n                                    </li>\n                                    <li className={\n                                            this.state.sortType === \"Last Edited Date\" ?\n                                            \"files_dashboard_sort_options_list files_dashboard_sort_focus\" :\n                                            \"files_dashboard_sort_options_list\"\n                                        } onClick={() => this.handleSortOptions(\"Last Edited Date\")}>\n                                        Last Edited Date\n                                    </li>\n                                </div> : \n                                <div></div>\n                            }\n                            <div \n                                className=\"files_dashboard_upload_file_text_button\" \n                                onClick={() => this.setState({\n                                    displayUploadFileBox: true\n                                    })}>Add File</div>\n                            {this.state.activeFiles.size >= 1 ?\n                                <IoTrashSharp className=\"files_dashboard_icons\" onClick={() => this.deleteActiveFiles()}></IoTrashSharp> : \n                                <div></div>}\n                            {this.state.activeFiles.size >= 1 ? \n                                <MdFileDownload className=\"files_dashboard_icons\" onClick={() => this.downloadActiveFiles()}></MdFileDownload> : \n                                <div></div>\n                            }\n                            {this.state.activeFiles.size === 1 ? \n                                <MdEdit className=\"files_dashboard_icons\"></MdEdit> : \n                                <div></div>\n                            }\n                        </div>                        \n                        <div className=\"clearfix\"/>\n                        <div id=\"files_dashboard_files_box\">\n                            {\n                                this.state.isLoading ? \n                                <div></div> : \n                                (\n                                    (this.state.activeSearchFiles.length > 0 || document.getElementById(\"files_dashboard_search_bar\").value !== \"\") ? \n                                    this.renderActiveSearchFiles() :\n                                    (this.state.files ?\n                                    this.state.filesToDisplay : \n                                    this.renderNoFiles()\n                                    )\n                                )\n                            }\n                        </div>\n                    </div>}\n                    <NotificationSidebar data={{\n                        state: {\n                            totalEstimateWorth: this.state.totalEstimateWorth,\n                            missingEstimate: this.state.missingEstimate \n                        }\n                    }}/>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default FilesDashboard;",["131","132"],"/Users/eric.lin/Documents/RealEstateApp/ui/src/App.js",["133"],"import './App.css';\nimport HomePage from './components/HomePage.js';\nimport PricingPage from './components/PricingPage.js';\nimport SignUpPage from './components/SignUpPage.js';\nimport SignUpSelectPricingPlan from './components/SignUpSelectPricingPlan.js';\nimport Login from './components/Login.js';\nimport MainDashboard from './components/MainDashboard.js';\nimport PropertiesDashboard from './components/PropertiesDashboard.js';\nimport AnalysisDashboard from './components/AnalysisDashboard.js';\nimport ExpensesDashboard from './components/ExpensesDashboard.js';\nimport FilesDashboard from './components/FilesDashboard.js';\nimport ExploreDashboard from './components/ExploreDashboard.js';\nimport SettingsDashboard from './components/SettingsDashboard.js';\nimport FeedbackForm from './components/FeedbackForm.js';\n\nimport NewPropertyForm from './components/NewPropertyForm.js';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport './components/CSS/Style.css';\n\nfunction App() {\n  return (\n\n    <Router>\n      <div>\n        <Switch>\n          {/* <Route path=\"/signup\">\n            <SignUpPage />\n          </Route> */}\n          <Route path=\"/selectpricingplan\" render={(props) => <SignUpSelectPricingPlan {...props}/>} >\n          </Route>\n          <Route path=\"/login\">\n            <Login />\n          </Route>\n          <Route path=\"/pricing\">\n            <PricingPage/>\n          </Route>\n          <Route path=\"/addproperty\" render={(props) => <NewPropertyForm {...props}/>}/>\n          <Route path=\"/dashboard\" render={(props) => <MainDashboard {...props}/>}/>\n          <Route path=\"/properties\" render={(props) => <PropertiesDashboard {...props}/>}/>\n          <Route path=\"/analysis\" render={(props) => <AnalysisDashboard {...props}/>}/>\n          <Route path=\"/expenses\" render={(props) => <ExpensesDashboard {...props}/>}/>\n          <Route path=\"/files\" render={(props) => <FilesDashboard {...props}/>}/>\n          <Route path=\"/explore\" render={(props) => <ExploreDashboard {...props}/>}/>\n          <Route path=\"/settings\" render={(props) => <SettingsDashboard {...props}/>}/>\n          <Route path=\"/feedback\" render={(props) => <FeedbackForm {...props}/>}/>\n          <Route path=\"/\">\n            <HomePage/>\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/PropertiesDashboard.js",["134","135","136","137","138","139","140","141","142","143","144"],"import React from 'react';\nimport axios from 'axios';\n\nimport './CSS/PropertiesDashboard.css';\nimport './CSS/Style.css';\n\nimport PropertyCard from './PropertyCard.js';\nimport FileCard from './FileCard.js';\nimport DashboardSidebar from './DashboardSidebar.js';\nimport NotificationSidebar from './NotificationSidebar.js';\n\nimport { getDaysUntil } from './MainDashboard.js';\n\nimport { mapFileTypeToIcon, openSignedURL } from './FilesDashboard.js';\n\nimport { Link, Redirect } from 'react-router-dom';\nimport { VictoryChart, VictoryLine, VictoryAxis, VictoryLabel } from 'victory';\nimport { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\n\nimport { GoFileDirectory } from 'react-icons/go';\nimport { SiGoogleanalytics } from 'react-icons/si';\nimport { FaMoneyCheck } from 'react-icons/fa';\nimport { MdDashboard, MdEdit, MdError  } from 'react-icons/md';\nimport { \n    IoOpenOutline, \n    IoCloseOutline, \n    IoCalendarSharp, \n    IoBedSharp , \n    IoWaterSharp, \n    IoTrailSignSharp, \n    IoBookmarkSharp,\n    IoFolderSharp,\n    IoWalletSharp,\n    IoReaderSharp,\n    IoPersonSharp,\n    IoTrashSharp} from 'react-icons/io5';\n\nconst overview = \"overview\";\nconst files = \"files\";\nconst expenses = \"expenses\";\n\nclass PropertiesDashboard extends React.Component {\n    \n    constructor(props) {\n        super(props);\n\n        this.state = {\n            user: this.props.location.state.user,\n            profilePicture: this.props.location.state.profilePicture,\n            tags: ['SFH', 'Manufactured', 'Condo/Op', 'Multi-Family', 'Apartment', 'Lot/Land', 'Townhome', 'Commercial'],\n            propertiesMap: new Map(),\n            activePropertyID: \"\",\n            activeProperty: null,\n            activePropertyView: overview,\n            activeFiles: [],\n            isLoading: true\n        };\n        this.setActiveFileAttributes = this.setActiveFileAttributes.bind(this);\n        this.numberWithCommas = this.numberWithCommas.bind(this);\n        this.removePropertyFromState = this.removePropertyFromState.bind(this);\n        this.handleTagsListClick = this.handleTagsListClick.bind(this);\n        this.renderProperties = this.renderProperties.bind(this);\n        this.setActiveProperty = this.setActiveProperty.bind(this);\n        this.renderActivePropertyView = this.renderActivePropertyView.bind(this);\n        this.renderActivePropertyFiles = this.renderActivePropertyFiles.bind(this);\n        this.renderActivePropertyExpenses = this.renderActivePropertyExpenses.bind(this);\n        this.getARR = this.getARR.bind(this);\n        this.getLTVRatio = this.getLTVRatio.bind(this);\n        this.getDTIRatio = this.getDTIRatio.bind(this);\n    }\n\n    componentDidMount() {\n        var url = '/api/user/property/' + this.state.user[\"id\"];\n        axios({\n            method: 'get',\n            url: url,\n        }).then(response => {\n            var properties = response.data.sort();\n            var totalNetWorth = 0;\n            var totalRent = 0;\n\n            var totalEstimateWorth = 0;\n            var missingEstimate = false;\n\n            var propMap = this.state.propertiesMap;\n            // initialize our map with empty arrays for every tag.\n            for (var j = 0; j < this.state.tags.length; j++) {\n                propMap[this.state.tags[j]] = [];\n            }\n            for (var i = 0; i < properties.length; i++) {\n                var property = properties[i];\n                totalNetWorth += property[\"price_bought\"];\n                totalRent += property[\"price_rented\"];\n                propMap[property[\"property_type\"]].push(property);\n\n                if (property[\"estimate\"] && property[\"estimate\"] !== 0.00) { \n                    totalEstimateWorth += property[\"estimate\"];\n                } else {\n                    totalEstimateWorth += property[\"price_bought\"];\n                    missingEstimate = true;\n                }\n            }\n\n            var propertiesMap = new Map();\n            for (var i = 0; i < properties.length; i++) {\n                let property = properties[i];\n                let propertyType = property[\"property_type\"];\n\n                if (!propertiesMap.has(propertyType)) {\n                    propertiesMap.set(propertyType, []);\n                }\n                var propertiesTypeArr = propertiesMap.get(propertyType);\n                propertiesTypeArr.push(property);\n                propertiesMap.set(propertyType, propertiesTypeArr);\n            }\n\n            this.setState({\n                propertiesMap: [...propertiesMap],\n                totalNetWorth: this.numberWithCommas(totalNetWorth),\n                totalRent: this.numberWithCommas(totalRent),\n                totalProperties: properties.length,\n                totalEstimateWorth: this.numberWithCommas(totalEstimateWorth),\n                missingEstimate: missingEstimate,\n                isLoading: false\n            });\n        }).catch(error => console.log(error));\n\n    }\n\n    numberWithCommas(x) {\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n\n    removePropertyFromState(id, propertyType) {\n\n        var elementsMap;\n\n        // var tags = ['SFH', 'Manufactured', 'Condo/Ops', 'Multi-Family', 'Apartment', 'Lot/Land', 'Townhome', 'Commercial'];\n\n        switch (propertyType) {\n            case 'SFH':\n                elementsMap = this.state.sfhProperties;\n                break; \n            case 'Manufactured':\n                elementsMap = this.state.manufacturedProperties;\n                break;\n            case 'Condo/Ops':\n                elementsMap = this.state.condoOpsProperties;\n                break;\n            case 'Multi-family':\n                elementsMap = this.state.multiFamilyProperties;\n                break;\n            case 'Apartment':\n                elementsMap = this.state.apartmentProperties;\n                break;\n            case 'Lot/Land':\n                elementsMap = this.state.lotLandProperties;\n                break;\n            case 'Townhome':\n                elementsMap = this.state.townhomeProperties;\n                break;\n            case 'Commercial':\n                elementsMap = this.state.commercialProperties;\n                break;\n            default:\n                elementsMap = null;\n        }\n        if (elementsMap !== null ) {\n            for (var i = 0; i < elementsMap.length; i++) {\n                if (id === elementsMap[i].props.children.props.data.state.property_details[\"id\"]){\n                    delete elementsMap[i];\n                    break;\n                }\n            }\n        }\n        switch (propertyType) {\n            case 'SFH':\n                this.setState({\n                    sfhProperties: [...elementsMap]\n                });\n                return; \n            case 'Manufactured':\n                this.setState({\n                    manufacturedProperties: [...elementsMap]\n                });\n                return;\n            case 'Condo/Ops':\n                this.setState({\n                    condoOpsProperties: [...elementsMap]\n                });\n                return;\n            case 'Multi-family':\n                this.setState({\n                    multiFamilyProperties: [...elementsMap]\n                });\n                return;\n            case 'Apartment':\n                this.setState({\n                    apartmentProperties: [...elementsMap]\n                });\n                return;\n            case 'Lot/Land':\n                this.setState({\n                    lotLandProperties: [...elementsMap]\n                });\n                return;\n            case 'Townhome':\n                this.setState({\n                    townhomeProperties: [...elementsMap]\n                });\n                return;\n            case 'Commercial':\n                this.setState({\n                    commercialProperties: [...elementsMap]\n                });\n                return;\n            default:\n                return;\n        }\n    }\n\n    handleTagsListClick(e){\n        // Not toggled, set toggle.\n        var toggledMap = this.state.tagsToToggledMap;\n        if (!toggledMap[e.target.value]){\n            e.target.style.color = \"white\";\n            e.target.style.backgroundColor = \"#296CF6\";\n            toggledMap[e.target.value] = true;\n        } else {\n            e.target.style.color = \"#296CF6\";\n            e.target.style.backgroundColor = \"#eaf5fb\";\n            toggledMap[e.target.value] = false;\n        }\n        this.setState({\n            tagsToToggledMap: toggledMap\n        })\n        return;\n    }\n\n    setActiveFileAttributes(fileKey, file, toRemove) {\n        var currentActiveFiles = this.state.activeFiles;\n        if (currentActiveFiles === null || currentActiveFiles === undefined || currentActiveFiles.length === 0) {\n            currentActiveFiles = new Map();\n        }\n        if (currentActiveFiles.size >= 25 && !toRemove) {\n            return false\n        }\n        if (!toRemove) {\n            currentActiveFiles.set(fileKey, file);\n        } else {\n            // Remove from active (\"unclicked\")\n            currentActiveFiles.delete(fileKey);\n        }\n        this.setState({\n            activeFiles: currentActiveFiles\n        })\n        return true;\n    }\n\n    setActiveProperty(propertyID) {\n        axios({\n            method: 'get',\n            url: 'api/property/' + propertyID,\n        }).then(response => {\n            this.setState({\n                activePropertyID: propertyID,\n                activeProperty: response.data,\n                activePropertyView: overview,\n                isLoadingActiveProperty: false\n            })\n        }).catch(error => {\n            console.log(error);\n        });\n    }\n\n    getARR() {\n\n    }\n\n    getLTVRatio() {\n        var activeProperty = this.state.activeProperty;\n        if (!activeProperty[\"price_bought\"]  || !activeProperty[\"down_payment\"] || !activeProperty[\"price_bought\"]) {\n            return 0.0;\n        }\n        var apv = activeProperty[\"estimate\"] ? activeProperty[\"estimate\"] : activeProperty[\"price_bought\"];\n\n        var loan = activeProperty[\"price_bought\"] - activeProperty[\"down_payment\"];\n        return Number((loan / apv * 100.0).toFixed(2));\n    }\n\n    getDTIRatio() {\n        var activeProperty = this.state.activeProperty;\n        if (!activeProperty[\"price_mortgage\"]  || \n            !activeProperty[\"price_property_manager\"] || \n            !activeProperty[\"currently_rented\"] || \n            !activeProperty[\"price_rented\"]) {\n            return 0.0;\n        }\n        \n        var debt = activeProperty[\"price_mortgage\"];\n        debt += activeProperty[\"price_property_manager\"] ? activeProperty[\"price_property_manager\"] : 0.0;\n\n        var income = activeProperty[\"price_rented\"];\n\n        var dti = debt / income * 100.0\n        return Number(dti.toFixed(2));\n    }\n\n    renderActivePropertyFiles() {\n        var elements = [];\n        var files = this.state.activePropertyFiles;\n        for (var i = 0; i < files.length; i++) {\n            let file = files[i];\n            elements.push(\n                <FileCard key={this.state.activePropertyID + \"-\" + file[\"name\"]} data={{\n                    state: {\n                        user: this.state.user,\n                        file: file,\n                        backgroundColor: \"grey\",\n                        setActiveFileAttributes: this.setActiveFileAttributes,\n                        openSignedURL: openSignedURL, \n                        mapFileTypeToIcon: mapFileTypeToIcon\n                    }                       \n                }}/>\n            );\n        }\n        return elements;\n    }\n\n    renderActivePropertyExpenses() {\n        var elements = [];\n        var expenses = this.state.activePropertyExpenses;\n        if (expenses.length === 0) {\n            return (\n                <div className=\"active_property_expenses_box\">\n                    <div className=\"expenses_dashboard_body_inner_box_no_expenses_inner_box\">\n                        <MdError className=\"expenses_dashboard_body_inner_box_no_expenses_inner_box_icon\"></MdError>\n                        <p className=\"expenses_dashboard_body_inner_box_no_expenses_inner_box_text\">\n                            No Expenses to show\n                        </p>\n                    </div>\n                </div>\n            );\n        } else {\n            // TODO: render expenses card.\n        }\n    }\n\n    renderActivePropertyView() {\n        switch(this.state.activePropertyView) {\n            case overview:\n                return (\n                    <div>\n                        <p className=\"active_property_view_title\">\n                            Overview\n                        </p>\n                        <div className=\"clearfix\"/>\n                        <div className=\"active_property_view_box\">\n                            <div className=\"active_property_view_box_growth_graph\">\n                                <p className=\"active_property_view_box_growth_graph_title\">\n                                    Property Estimated Value\n                                </p>\n                                <VictoryChart\n                                    width={\"700\"}\n                                    height={\"250\"}\n                                    padding={{\n                                        left: 10,\n                                        right: 50,\n                                        top: 0,\n                                        bottom: 10\n                                    }}>\n                                    <VictoryLine \n                                        interpolation=\"natural\"\n                                        style={{\n                                            data: {\n                                                stroke: \"#296CF6\",\n                                                strokeWidth: \"3\",\n                                            }\n                                        }}\n                                        minDomain={{ \n                                            y: 0\n                                        }}\n                                        x={(d) => d.x}\n                                        width={\"800\"}\n                                        padding={{\n                                            left: 40,\n                                            right: 40,\n                                            top: 40,\n                                            bottom: 10\n                                        }}\n                                        data={[\n                                            {x: \"Jan\", y: 6}, \n                                            {x: \"Feb\", y: 5}, \n                                            {x: \"Mar\", y: 6}, \n                                            {x: \"Apr\", y: 8}, \n                                            {x: \"May\", y: 11}, \n                                            {x: \"Jun\", y: 9}, \n                                            {x: \"Jul\", y: 10}, \n                                            {x: \"Aug\", y: 13}, \n                                            {x: \"Sep\", y: 17}, \n                                            {x: \"Oct\", y: 20}, \n                                            {x: \"Nov\", y: 18}, \n                                            {x: \"Dec\", y: 28}]}>\n                                    </VictoryLine>\n                                </VictoryChart>\n                                <div className=\"clearfix\"/>\n                            </div>\n                            <div className=\"active_property_view_box_parent_right_box\">\n                                <div className=\"active_property_view_box_right_box\">\n                                    <p className=\"active_property_view_box_right_box_title\">\n                                        Quick Look\n                                    </p>\n                                    <div className=\"clearfix\"/>\n                                    <div className=\"active_property_view_box_right_box_inner_box\">\n                                        <div className=\"active_property_view_box_right_box_inner_box_bullet_point\">\n                                        </div>\n                                        <p className=\"active_property_view_box_right_box_inner_box_bullet_point_text\">\n                                            {this.state.activeProperty[\"rent_payment_date\"] ? \"Rent is paid in \" + getDaysUntil(this.state.activeProperty[\"rent_payment_date\"])  + \" days\" : \"Not currently rented\"}\n                                        </p>\n                                        <div className=\"clearfix\"/>\n                                        <div className=\"active_property_view_box_right_box_inner_box_bullet_point\">\n                                        </div>\n                                        <p className=\"active_property_view_box_right_box_inner_box_bullet_point_text\">\n                                            {this.state.activeProperty[\"mortgage_payment_date\"] ? \"Mortgage is due in \" + getDaysUntil(this.state.activeProperty[\"mortgage_payment_date\"])  + \" days\" : \"No current mortgage\"}\n                                        </p>\n                                    </div>\n                                </div>  \n                                <div className=\"active_property_view_box_right_box_bottom_box\">\n                                    <div className=\"active_property_view_box_right_box_bottom_box_element\">\n                                        <p className=\"active_property_view_box_right_box_bottom_box_title\">\n                                            ARR\n                                        </p>\n                                        <p className=\"active_property_view_box_right_box_bottom_box_text\">\n                                            \n                                        </p>\n                                    </div>\n                                    <div className=\"clearfix\"/>\n                                    <div className=\"active_property_view_box_right_box_bottom_box_element\">\n                                        <p className=\"active_property_view_box_right_box_bottom_box_title\">\n                                            Expenses this mo.\n                                        </p>\n                                        <p className=\"active_property_view_box_right_box_bottom_box_text\">\n                                            \n                                        </p>\n                                    </div>\n                                    <div className=\"clearfix\"/>\n                                    <div className=\"active_property_view_box_right_box_bottom_box_element\">\n                                        <p className=\"active_property_view_box_right_box_bottom_box_title\">\n                                            Property Taxes\n                                        </p>\n                                        <p className=\"active_property_view_box_right_box_bottom_box_text\">\n                                            ${this.getLTVRatio()}/yr\n                                        </p>\n                                    </div>\n                                    <div className=\"clearfix\"/>\n                                    <div className=\"active_property_view_box_right_box_bottom_box_element\">\n                                        <p className=\"active_property_view_box_right_box_bottom_box_title\">\n                                            LTV Ratio\n                                        </p>\n                                        <p className=\"active_property_view_box_right_box_bottom_box_text\">\n                                            {this.getLTVRatio()}%\n                                        </p>\n                                    </div>\n                                    <div className=\"clearfix\"/>\n                                    <div className=\"active_property_view_box_right_box_bottom_box_element\">\n                                        <p className=\"active_property_view_box_right_box_bottom_box_title\">\n                                            DTI Ratio\n                                        </p>\n                                        <p className=\"active_property_view_box_right_box_bottom_box_text\">\n                                            {this.getDTIRatio()}%\n                                        </p>\n                                    </div>\n                                </div>\n\n                                {/* <div className=\"active_property_view_box_right_box_circle\">\n                                        <CircularProgressbar \n                                            value={this.getLTVRatio()}\n                                            background\n                                            backgroundPadding={5}\n                                            styles={buildStyles({\n                                            backgroundColor: \"transparent\",\n                                            textColor: \"#296CF6\",\n                                            pathColor: \"#296CF6\",\n                                            trailColor: \"#fff\",\n                                            })}/>\n                                        <p className=\"active_property_view_box_right_box_circle_subtitle\">\n                                            {this.getLTVRatio()}%\n                                            <br></br>\n                                            LTV Ratio\n                                        </p>\n                                    </div>\n                                    <div className=\"active_property_view_box_right_box_circle\">\n                                        <CircularProgressbar \n                                            value={this.getDTIRatio()}\n                                            background\n                                            backgroundPadding={5}\n                                            styles={buildStyles({\n                                            backgroundColor: \"transparent\",\n                                            textColor: \"#296CF6\",\n                                            pathColor: \"#296CF6\",\n                                            trailColor: \"#fff\",\n                                            })}/>\n                                        <p className=\"active_property_view_box_right_box_circle_subtitle\">\n                                            {this.getDTIRatio()}%\n                                            <br></br>\n                                            DTI Ratio\n                                        </p>\n                                    </div> */}\n                            </div>\n                            <div className=\"clearfix\"/>\n                            <div className=\"active_property_view_box_right_box_circle_box\">\n                                    \n                                </div>                      \n                        </div>\n                    </div>\n                );\n            case files:\n                return (\n                    <div>\n                        <p className=\"active_property_view_title\">\n                            Files\n                        </p>\n                        <div className=\"clearfix\"/>\n                        {this.renderActivePropertyFiles()}\n                    </div>\n                );\n            case expenses:\n                return (\n                    <div>\n                        <p className=\"active_property_view_title\">\n                            Expenses\n                        </p>\n                        <div className=\"clearfix\"/>\n                        {this.renderActivePropertyExpenses()}\n                    </div>\n                );\n        }\n    }\n\n    renderProperties() {\n        var elements = [];\n        var propertiesMap = this.state.propertiesMap;\n        var isFirstChild = true;\n        propertiesMap.forEach((value, key, map) => {\n            let propertyArr = value[1];\n            for (var i = 0; i < propertyArr.length; i++) {\n                let property = propertyArr[i];\n                elements.push(\n                    <PropertyCard key={property[\"name\"]}\n                        removePropertyFromState = {\n                            this.removePropertyFromState\n                        }\n                        setActiveProperty = {\n                            this.setActiveProperty\n                        }\n                        data={{\n                        state: {\n                            user: this.state.user,\n                            isFirstChild: isFirstChild,\n                            property_details: property\n                        }                       \n                    }}/>\n                );\n                isFirstChild = false;\n            }\n        });\n        return elements;\n    }\n    \n    renderActiveProperty() {\n        if (this.state.activePropertyID !== \"\" && this.state.activeProperty) {\n            return (\n                <div key={this.state.activePropertyID} className=\"properties_dashboard_active_property_box\">\n                    <div className=\"properties_dashboard_active_property_box_top_box\">\n                        <div className=\"properties_dashboard_active_property_box_top_box_left_box\">\n                            <p className=\"properties_dashboard_active_property_box_top_box_title\">\n                                ${this.numberWithCommas(this.state.activeProperty[\"estimate\"])}\n                            </p>\n                            <p className=\"properties_dashboard_active_property_box_top_box_subtitle\">\n                                {this.state.activeProperty[\"address\"]}\n                            </p>\n                            <p className=\"properties_dashboard_active_property_box_top_box_subtitle\">\n                                {this.state.activeProperty[\"state\"]}, {this.state.activeProperty[\"zip_code\"]}\n                            </p>\n                        </div>\n                        <div className=\"properties_dashboard_active_property_box_info_box\">\n                            <div className=\"properties_dashboard_active_property_box_top_box_left_box_second_box\">\n                                <div className=\"properties_dashboard_active_property_box_top_box_element\">\n                                    <IoBedSharp className=\"property_card_box_info_box_icon\"></IoBedSharp>\n                                    <p className=\"property_card_box_info_box_text\">\n                                        {this.state.activeProperty[\"num_beds\"]} {this.state.activeProperty[\"num_beds\"] > 1 ? \"beds\" : \"bed\"}\n                                    </p>\n                                </div>\n                                <div className=\"clearfix\"/>\n                                <div className=\"properties_dashboard_active_property_box_top_box_second_element\">\n                                    <IoWaterSharp className=\"property_card_box_info_box_icon\"></IoWaterSharp>\n                                    <p className=\"property_card_box_info_box_text\">\n                                        {this.state.activeProperty[\"num_baths\"]} {this.state.activeProperty[\"num_baths\"] > 1 ? \"baths\" : \"bath\"}\n                                    </p>\n                                </div>\n                            </div>\n                            <div className=\"properties_dashboard_active_property_box_top_box_left_box_second_box\">\n                                <div className=\"properties_dashboard_active_property_box_top_box_element\">\n                                    <IoTrailSignSharp className=\"property_card_box_info_box_icon\"></IoTrailSignSharp>\n                                    <p className=\"property_card_box_info_box_text\">\n                                        {this.state.activeProperty[\"num_units\"]} {this.state.activeProperty[\"num_units\"] > 1 ? \"units\" : \"unit\"}\n                                    </p>\n                                </div>\n                                <div className=\"clearfix\"/>\n                                <div className=\"properties_dashboard_active_property_box_top_box_second_element\">\n                                    <IoBookmarkSharp className=\"property_card_box_info_box_icon\"></IoBookmarkSharp>\n                                    <p className=\"property_card_box_info_box_text\">\n                                        {this.numberWithCommas(this.state.activeProperty[\"square_footage\"])} sq ft\n                                    </p>\n                                </div>\n                            </div>\n                            <div className=\"properties_dashboard_active_property_box_top_box_left_box_second_box\">\n                                <div className=\"properties_dashboard_active_property_box_top_box_element\">\n                                    <IoWalletSharp title=\"rent per month\" alt=\"rent per month\" className=\"property_card_box_info_box_icon\"></IoWalletSharp>\n                                    <p className=\"property_card_box_info_box_text\">\n                                        ${this.numberWithCommas(this.state.activeProperty[\"price_rented\"])}/mo\n                                    </p>\n                                </div>\n                                <div className=\"clearfix\"/>\n                                <div className=\"properties_dashboard_active_property_box_top_box_second_element\">\n                                    <IoReaderSharp className=\"property_card_box_info_box_icon\"></IoReaderSharp>\n                                    <p className=\"property_card_box_info_box_text\">\n                                        ${this.numberWithCommas(this.state.activeProperty[\"price_mortgage\"])}/mo\n                                    </p>\n                                </div>\n                            </div>\n                            <div className=\"properties_dashboard_active_property_box_top_box_left_box_second_box properties_dashboard_active_property_box_top_box_left_box_second_box_last_child\">\n                                <div className=\"properties_dashboard_active_property_box_top_box_element\">\n                                    <IoPersonSharp className=\"property_card_box_info_box_icon\"></IoPersonSharp>\n                                    <p className=\"property_card_box_info_box_text\">\n                                        Management ${\n                                        this.state.activeProperty[\"price_property_manager\"] && this.state.activeProperty[\"price_rented\"] ?\n                                        this.state.activeProperty[\"price_property_manager\"] * this.state.activeProperty[\"price_rented\"] / 100.00 :\n                                        \"-\"}/mo\n                                    </p>\n                                </div>\n                                <div className=\"clearfix\"/>\n                                <div className=\"properties_dashboard_active_property_box_top_box_second_element\">\n                                    <IoCalendarSharp className=\"property_card_box_info_box_icon\"></IoCalendarSharp>\n                                    <p className=\"property_card_box_info_box_text\">\n                                        Purchased {this.state.activeProperty[\"bought_date\"]}\n                                    </p>\n                                </div>\n                            </div>\n                            <div>\n                                <IoCloseOutline \n                                    onMouseDown={() => {\n                                        this.setState({\n                                            activePropertyID: \"\",\n                                            activeProperty: null,\n                                        })\n                                    }}\n                                    className=\"properties_dashboard_active_property_box_right_box_title_box_icon\"></IoCloseOutline>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"properties_dashboard_active_property_box_top_divider\">\n                    </div>\n                    <div className=\"properties_dashboard_active_property_box_bottom_box\">\n                        <div className=\"properties_dashboard_active_property_box_right_box_inner_box_navbar_box\">\n                            <SiGoogleanalytics \n                                onMouseDown={() => {\n                                    this.setState({\n                                        activePropertyView: overview\n                                    })\n                                }}\n                                className={\n                                    this.state.activePropertyView === overview ? \n                                    \"properties_dashboard_active_property_box_right_box_inner_box_navbar_box_icon properties_dashboard_active_property_box_right_box_inner_box_navbar_box_icon_active\" :\n                                    \"properties_dashboard_active_property_box_right_box_inner_box_navbar_box_icon\"}\n                                ></SiGoogleanalytics>\n                            <GoFileDirectory \n                                onMouseDown={() => {\n                                    axios({\n                                        url: 'api/user/files/' + this.state.user[\"id\"] + '/' + this.state.activePropertyID,\n                                        method: 'get'\n                                    }).then(response => {\n                                        this.setState({\n                                            activePropertyFiles: response.data,\n                                            activePropertyView: files\n                                        })\n                                    }).catch(error => {\n\n                                    })\n                                }}\n                                className={\n                                    this.state.activePropertyView === files ? \n                                    \"properties_dashboard_active_property_box_right_box_inner_box_navbar_box_icon properties_dashboard_active_property_box_right_box_inner_box_navbar_box_icon_active\" :\n                                    \"properties_dashboard_active_property_box_right_box_inner_box_navbar_box_icon\"}\n                                ></GoFileDirectory>\n                            <FaMoneyCheck \n                                onMouseDown={() => {\n                                    axios({\n                                        url: '/api/user/expenses/' + this.state.user[\"id\"] + '/' + this.state.activePropertyID,\n                                        method: 'get'\n                                    }).then(response => {\n                                        this.setState({\n                                            activePropertyExpenses: response.data,\n                                            activePropertyView: expenses\n                                        })\n                                    })\n                                    \n                                }}\n                                className={\n                                    this.state.activePropertyView === expenses ? \n                                    \"properties_dashboard_active_property_box_right_box_inner_box_navbar_box_icon properties_dashboard_active_property_box_right_box_inner_box_navbar_box_icon_active\" :\n                                    \"properties_dashboard_active_property_box_right_box_inner_box_navbar_box_icon\"}\n                                ></FaMoneyCheck>\n                        </div>\n                        <div className=\"properties_dashboard_active_property_box_right_box_inner_box_view_box\">\n                            {this.renderActivePropertyView()}\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n        return (\n            <div></div>\n        )\n    }\n\n    render() {\n        return (\n            <div>\n                <div>\n                    <DashboardSidebar data={{\n                        state: {\n                            user: this.state.user,\n                            totalEstimateWorth: this.state.totalEstimateWorth,\n                            missingEstimate: this.state.missingEstimate,\n                            profilePicture: this.state.profilePicture,\n                            currentPage: \"properties\",\n                        }\n                    }}/>\n                    {this.state.isLoading ? <div></div> : \n                    <div>\n                        <div className=\"properties_dashboard_property_type_box\">\n                            <div className=\"properties_dashboard_inner_box\">\n                                <div id=\"properties_dashboard_title_box\">\n                                    <p className=\"properties_dashboard_title_box_title\">\n                                        Properties\n                                    </p>\n                                    <input className=\"properties_dashboard_search_bar\" placeholder=\"Search...\">\n                                    </input>\n                                </div>\n                                <div className=\"clearfix\"/>\n                                <div className=\"properties_dashboard_buttons_box\">\n                                    <Link to={{\n                                        pathname: \"/addproperty\",\n                                        state: {\n                                            user: this.state.user,\n                                            totalEstimateWorth: this.state.totalEstimateWorth,\n                                            missingEstimate: this.state.missingEstimate,\n                                            profilePicture: this.state.profilePicture\n                                        }\n                                    }}>\n                                        <div className=\"properties_dashboard_add_property_button\">\n                                            New Property\n                                        </div>\n                                    </Link>\n                                    {this.state.activeProperty ? \n                                    <div>\n                                        <IoTrashSharp className=\"properties_dashboard_buttons_box_icon\"></IoTrashSharp>\n                                        <MdEdit className=\"properties_dashboard_buttons_box_icon\"></MdEdit>\n                                    </div> : \n                                    <div></div>}\n                                </div> \n                                <div className=\"clearfix\"/>\n                                {this.renderActiveProperty()}\n                                <div className=\"properties_dashboard_property_inner_box\">\n                                    {this.renderProperties()}\n                                </div>\n                            </div>\n                        </div>\n                        <NotificationSidebar data={{\n                            state: {\n                                totalEstimateWorth: this.state.totalEstimateWorth,\n                                missingEstimate: this.state.missingEstimate \n                            }\n                        }}/>\n                    </div>}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default PropertiesDashboard;",["145","146"],"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/ExpenseCard.js",["147","148","149"],"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/UploadFileModal.js",["150","151","152","153"],"/Users/eric.lin/Documents/RealEstateApp/ui/src/utility/ProgressBar.js",["154"],"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/CreateExpenseModal.js",["155","156"],"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/DropdownSelect.js",["157"],"import React from 'react';\nimport axios from 'axios';\n\nimport './CSS/DropdownSelect.css';\nimport './CSS/Style.css';\n\nimport { IoTrashSharp } from 'react-icons/io5';\n\nconst All = \"All\";\nconst None = \"None\";\n\nclass DropdownSelect extends React.Component {\n    \n    constructor(props) {\n        super(props);\n\n        this.state = {\n            currSelectedListElements: [],\n            inputMap: this.props.data.state.inputMap,\n            inputList: this.props.data.state.inputList,\n            includeNone: this.props.data.state.includeNone,\n            includeAll: this.props.data.state.includeAll,\n            placeholderText: this.props.data.state.placeholderText,\n            setParentList: this.props.data.state.setParentList,\n            closePotentialList: this.props.data.state.closePotentialList,\n        };\n        this.handleFieldChange = this.handleFieldChange.bind(this);\n        this.displayPotentialElements = this.displayPotentialElements.bind(this);\n        this.removeSelectedElement = this.removeSelectedElement.bind(this);\n        this.renderElements = this.renderElements.bind(this);\n    }\n\n    componentDidMount() {\n    }\n\n    handleFieldChange(e) {\n        this.setState({ \n            [e.target.name]: e.target.value\n         })\n    }\n\n    displayPotentialElements(e) {\n\n        var selectedPropertyInput = document.getElementById(\"associated_properties_input\");\n\n        var elements = [];\n        var value = e.target.value;\n        var currSelectedListElements = this.state.currSelectedListElements;\n\n        var allIndex = currSelectedListElements.indexOf(All);\n        if (allIndex < 0){\n            elements.push(\n                <div \n                    onClick={() => {\n                        var currSelectedListElements = this.state.currSelectedListElements;\n                        currSelectedListElements.push(All);\n                        // Remove None from our list if we add a non-None element.\n                        let index = currSelectedListElements.indexOf(None);\n                        if (index >= 0) {\n                            currSelectedListElements.splice(index, 1);\n                        }\n                        // reset the search bar to empty.\n                        selectedPropertyInput.value = \"\";\n                        this.state.setParentList(currSelectedListElements);\n                        this.setState({\n                            currSelectedListElements: [...currSelectedListElements],\n                            filteredListElements: null,\n                        })\n                    }} \n                    className=\"associated_properties_dropdown_elements\">\n                    {All}\n                </div>\n            );\n        }\n        \n        var noneIndex = currSelectedListElements.indexOf(None);\n        if (noneIndex < 0){\n            elements.push(\n                <div \n                    onClick={() => {\n                        var currSelectedListElements = this.state.currSelectedListElements;\n                        currSelectedListElements = [None];\n                        // reset the search bar to empty.\n                        selectedPropertyInput.value = \"\";\n                        this.state.setParentList(currSelectedListElements);\n                        this.setState({\n                            currSelectedListElements: [...currSelectedListElements],\n                            filteredListElements: null,\n                        })\n                    }} \n                    className=\"associated_properties_dropdown_elements\">\n                    {None}\n                </div>\n            );\n        }\n\n        var inputList = this.state.inputList;\n        var filteredInputList = inputList.filter(address => address.startsWith(value));\n        for (var i = 0; i < filteredInputList.length; i++) {\n            let filteredInput = filteredInputList[i];\n            if (filteredInput === None || filteredInput === All) {\n                continue;\n            }\n            var index = currSelectedListElements.indexOf(filteredInput);\n            // Only show properties that are not currently selected.\n            if (index < 0){\n                elements.push(\n                    <div \n                        onClick={() => {\n                            var currSelectedListElements = this.state.currSelectedListElements;\n                            currSelectedListElements.push(filteredInput);\n                            // Remove None from our list if we add a non-None element.\n                            let index = currSelectedListElements.indexOf(None);\n                            if (index >= 0) {\n                                currSelectedListElements.splice(index, 1);\n                                console.log(currSelectedListElements);\n                            }\n                            // reset the search bar to empty.\n                            selectedPropertyInput.value = \"\";\n                            this.state.setParentList(currSelectedListElements);\n                            this.setState({\n                                currSelectedListElements: [...currSelectedListElements],\n                                filteredListElements: null,\n                            })\n                        }} \n                        className=\"associated_properties_dropdown_elements\">\n                        {filteredInput}\n                    </div>\n                );\n            }\n        }\n        this.setState({\n            filteredListElements: elements,\n        })\n    }\n\n    removeSelectedElement(addressToRemove) {\n        var currSelectedListElements = this.state.currSelectedListElements;\n        var index = currSelectedListElements.indexOf(addressToRemove);\n        currSelectedListElements.splice(index, 1);\n        this.state.setParentList(currSelectedListElements);\n        this.setState({\n            currSelectedListElements: currSelectedListElements,\n        })\n    }\n\n    renderElements() {\n\n        var elements = [];\n\n        var currSelectedListElements = this.state.currSelectedListElements;\n        for (var i = 0; i < currSelectedListElements.length; i++) {\n            \n            let currSelectedElement = currSelectedListElements[i];\n            elements.push(\n                <div className=\"current_selected_associated_properties\">\n                    <p className=\"current_selected_associated_properties_text\">\n                        {currSelectedElement}\n                    </p>\n                    <IoTrashSharp \n                        onClick={() => this.removeSelectedElement(currSelectedElement)}\n                        className=\"current_selected_associated_properties_icon\"></IoTrashSharp>\n                </div>\n            );\n        }\n\n        var wrappedElements = [];\n\n        if (elements.length > 0) {\n            wrappedElements.push(\n                <div className=\"associated_properties_selected_parent_box\">\n                    {elements}\n                </div>\n            );\n        }\n        \n        wrappedElements.push(\n            <div>\n                <input \n                    id=\"associated_properties_input\"\n                    onClick={(e) => {\n                        this.displayPotentialElements(e);\n                        e.stopPropagation();\n                    }}\n                    onChange={this.displayPotentialElements}\n                    placeholder={this.state.placeholderText} \n                    className=\"create_expense_modal_associated_properties_input\"></input>\n                <div className=\"clearfix\"/>\n                {this.state.filteredListElements && this.state.filteredListElements.length > 0 ?\n                <div className=\"create_expense_modal_associated_properties_filtered_properties_box\">\n                    {this.state.filteredListElements}\n                </div>:\n                <div></div>}\n            </div>\n        );\n        return wrappedElements;\n    }\n\n    render() {\n        return (\n            <div>\n                {this.renderElements()}\n            </div>\n        )\n    }\n}\n\nexport default DropdownSelect;","/Users/eric.lin/Documents/RealEstateApp/ui/src/reportWebVitals.js",[],["158","159"],"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/FeedbackForm.js",["160"],"import React from 'react';\nimport axios from 'axios';\nimport { Redirect } from \"react-router-dom\";\n\nimport './CSS/FeedbackForm.css';\n\nimport DashboardSidebar from './DashboardSidebar.js';\n\nimport { BsFillHouseFill } from 'react-icons/bs';\nimport { RiFileWarningFill, RiVipCrown2Fill } from 'react-icons/ri';\nimport { AiTwotoneSecurityScan } from 'react-icons/ai';\nimport { MdAccountCircle } from 'react-icons/md';\n\nconst general = \"general\";\nconst featureRequest = \"feature_request\";\nconst bugReport = \"bug_report\";\nconst securityIssue = \"security_issue\";\nconst accountIssue = \"account_issue\";\n\nclass FeedbackForm extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            user: this.props.location.state.user,\n            totalEstimateWorth: this.props.location.state.totalEstimateWorth,\n            missingEstimate: this.props.location.state.missingEstimate,\n            profilePicture: this.props.location.state.profilePicture,\n            toDisplay: general,\n        };\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleFieldChange = this.handleFieldChange.bind(this);\n        this.renderForms = this.renderForms.bind(this);\n    }\n\n    handleFieldChange(e) {\n        this.setState({ [e.target.name]: e.target.value })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n\n        var axiosAddPropertyURL = '/api/user/property/' + this.state.userID;\n        axios({\n            method: 'post',\n            url: axiosAddPropertyURL,\n            timeout: 5000,  // 5 seconds timeout\n            data: {\n                address: this.state.address,\n                city: this.state.city,\n                state: this.state.state,\n                zip_code: this.state.zip_code,\n                bought_date: this.state.bought_date,\n                price_bought: parseFloat(this.state.price_bought),\n                price_rented: parseFloat(this.state.price_rented),\n                price_mortgage: parseFloat(this.state.price_mortgage),\n                price_down_payment: parseFloat(this.state.price_down_payment),\n                price_property_manager: parseFloat(this.state.price_property_manager),\n                mortgage_company: this.state.mortgage_company,\n                mortgage_interest_rate: parseFloat(this.state.mortgage_interest_rate),\n                property_type: this.state.property_type\n            }\n        }).then(response => {\n            console.log(response);\n            this.setState({\n                redirect: \"/dashboard\"\n            })\n        }).catch(error => console.error('timeout exceeded'));\n    }\n\n    renderForms() {\n        switch(this.state.toDisplay) {\n            case general:\n                return (\n                    <div className=\"feedback_form_actual_form_box\">\n                        <p className=\"feedback_form_actual_form_title\">\n                            General Feedback\n                        </p>\n                        <div className=\"clearfix\"/>\n                        <p className=\"feedback_form_actual_form_subtitle\">\n                            You are submitting this form as {this.state.user[\"first_name\"]} {this.state.user[\"last_name\"]}, {this.state.user[\"email\"]}\n                        </p>\n                        <input type=\"text\" placeholder=\"Title\" className=\"feedback_form_actual_form_title_input\"></input>\n                        <div className=\"clearfix\"/>\n                        <textarea \n                            type=\"textarea\" \n                            placeholder=\"Please describe your general feedback.\" \n                            className=\"feedback_form_actual_form_title_textarea\"></textarea>\n                        <div id=\"feedback_form_actual_form_checkbox_box\">\n                            <div className=\"feedback_form_actual_form_submit_button\">\n                                Submit\n                            </div>\n                        </div>\n                    </div>\n                )\n            case featureRequest:\n                return (\n                    <div className=\"feedback_form_actual_form_box\">\n                        <p className=\"feedback_form_actual_form_title\">\n                            Feature Request\n                        </p>\n                        <div className=\"clearfix\"/>\n                        <p className=\"feedback_form_actual_form_subtitle\">\n                            You are submitting this form as {this.state.user[\"first_name\"]} {this.state.user[\"last_name\"]}, {this.state.user[\"email\"]}\n                        </p>\n                        <input type=\"text\" placeholder=\"Title\" className=\"feedback_form_actual_form_title_input\"></input>\n                        <div className=\"clearfix\"/>\n                        <textarea \n                            type=\"textarea\" \n                            placeholder=\"Please describe your feature request. The more details you can provide, the more we can understand how this feature will help you and your investments.\" \n                            className=\"feedback_form_actual_form_title_textarea\"></textarea>\n                        <div id=\"feedback_form_actual_form_checkbox_box\">\n                            <div\n                                className={\n                                    this.state.featureRequestCheckbox ? \n                                    \"feedback_form_actual_form_checkbox\" : \n                                    \"feedback_form_actual_form_checkbox\"}\n                                onClick={() => this.setState({\n                                    featureRequestCheckbox: !this.state.featureRequestCheckbox\n                                })}>\n                                <div\n                                    className={\n                                        this.state.featureRequestCheckbox ? \n                                        \"feedback_form_actual_form_checkbox_inner_box feedback_form_actual_form_checkbox_inner_box_active\" : \n                                        \"feedback_form_actual_form_checkbox_inner_box\"\n                                    }>\n                                </div>\n                            </div>\n                            <p className=\"feedback_form_actual_form_checkbox_text\">\n                                I consent to being contacted regarding any follow up work required for this feature request.\n                            </p>\n                            <div className=\"feedback_form_actual_form_submit_button\">\n                                Submit\n                            </div>\n                        </div>\n                        <div className=\"clearfix\"/>\n                    </div>\n                )\n            case bugReport:\n                return (\n                    <div className=\"feedback_form_actual_form_box\">\n                        <p className=\"feedback_form_actual_form_title\">\n                            Bug Report\n                        </p>\n                        <div className=\"clearfix\"/>\n                        <p className=\"feedback_form_actual_form_subtitle\">\n                            You are submitting this form as {this.state.user[\"first_name\"]} {this.state.user[\"last_name\"]}, {this.state.user[\"email\"]}\n                        </p>\n                        <input type=\"text\" placeholder=\"Title\" className=\"feedback_form_actual_form_title_input\"></input>\n                        <div className=\"clearfix\"/>\n                        <textarea \n                            type=\"textarea\" \n                            placeholder=\"Please describe your bug report. The more details you can provide, the more we can quickly identify and fix this bug. Please be as descriptive as possible on how to re-create this bug.\" \n                            className=\"feedback_form_actual_form_title_textarea\"></textarea>\n                        <div className=\"clearfix\"/>\n                        <div id=\"feedback_form_actual_form_select_box\">\n                            <select className=\"feedback_form_select_input\">\n                                <option value=\"\" disabled selected>Severity</option>\n                                <option>Business Critical</option>\n                                <option>Severely impacting majority of operations</option>\n                                <option>Operation efficiency impacted</option>\n                                <option>Minor annoyance</option>\n                            </select>\n                            <div className=\"feedback_form_actual_form_submit_button\">\n                                Submit\n                            </div>\n                        </div>\n                    </div>\n                )\n            case securityIssue:\n                return (\n                    <div className=\"feedback_form_actual_form_box\">\n                        <p className=\"feedback_form_actual_form_title\">\n                            Security Issue\n                        </p>\n                        <div className=\"clearfix\"/>\n                        <p className=\"feedback_form_actual_form_subtitle\">\n                            You are submitting this form as {this.state.user[\"first_name\"]} {this.state.user[\"last_name\"]}, {this.state.user[\"email\"]}\n                        </p>\n                        <input type=\"text\" placeholder=\"Title\" className=\"feedback_form_actual_form_title_input\"></input>\n                        <div className=\"clearfix\"/>\n                        <textarea \n                            type=\"textarea\" \n                            placeholder=\"Please describe the security issue. The more details you can provide, the more we can quickly identify and fix this vulnerability.\" \n                            className=\"feedback_form_actual_form_title_textarea\"></textarea>\n                        <div className=\"clearfix\"/>\n                        <div id=\"feedback_form_actual_form_select_box\">\n                            <select className=\"feedback_form_select_input\">\n                                <option value=\"\" disabled selected>Severity</option>\n                                <option>Critical</option>\n                                <option>High</option>\n                                <option>Medium</option>\n                                <option>Low</option>\n                            </select>\n                            <div className=\"feedback_form_actual_form_submit_button\">\n                                Submit\n                            </div>\n                        </div>\n                    </div>\n                )\n            case accountIssue:\n                return (\n                    <div className=\"feedback_form_actual_form_box\">\n                        <p className=\"feedback_form_actual_form_title\">\n                            Account Issue\n                        </p>\n                        <div className=\"clearfix\"/>\n                        <p className=\"feedback_form_actual_form_subtitle\">\n                            You are submitting this form as {this.state.user[\"first_name\"]} {this.state.user[\"last_name\"]}, {this.state.user[\"email\"]}\n                        </p>\n                        <input type=\"text\" placeholder=\"Title\" className=\"feedback_form_actual_form_title_input\"></input>\n                        <div className=\"clearfix\"/>\n                        <textarea \n                            type=\"textarea\" \n                            placeholder=\"Please describe your account's issue.\" \n                            className=\"feedback_form_actual_form_title_textarea\"></textarea>\n                        <div className=\"clearfix\"/>\n                        <div id=\"feedback_form_actual_form_select_box\">\n                            <select className=\"feedback_form_select_input\">\n                                <option value=\"\" disabled selected>I have an issue with...</option>\n                                <option>Billing</option>\n                                <option>Cancellation</option>\n                            </select>\n                            <div className=\"feedback_form_actual_form_submit_button\">\n                                Submit\n                            </div>\n                        </div>\n                    </div>\n                )\n        }\n    }\n\n    render() {\n        if (this.state.redirect) {\n            return <Redirect to={{\n                pathname: this.state.redirect,\n                state: {\n                    user: this.state.user,\n                }\n            }} />\n        }\n        return (\n            <div>\n                <DashboardSidebar data={{\n                    state: {\n                        user: this.state.user,\n                        totalEstimateWorth: this.state.totalEstimateWorth,\n                        missingEstimate: this.state.missingEstimate,\n                        profilePicture: this.state.profilePicture,\n                        currentPage: \"feedback\"\n                    }\n                }}/>\n                <div id=\"feedback_form_box\">\n                    <div id=\"feedback_form_inner_box\">\n                        <p className=\"feedback_form_inner_box_title\">\n                            Feedback\n                        </p>\n                        <p className=\"feedback_form_inner_box_subtitle\">\n                            Your feedback matters! Please use this form to report any issues you have encountered while using this website and/or any features you would love to see as we work to constantly improve our product. Thank you for your continued support!\n                        </p>\n                        <div id=\"feedback_form_inner_lower_box\">\n                            <div id=\"feedback_form_inner_lower_box_nav_bar\">\n                                <li \n                                    onClick={() => this.setState({\n                                        toDisplay: general,\n                                    })}\n                                    className={\n                                        this.state.toDisplay === general ? \n                                        \"feedback_form_inner_lower_box_nav_bar_list feedback_form_inner_lower_box_nav_bar_list_active\" : \n                                        \"feedback_form_inner_lower_box_nav_bar_list\"}>\n                                    <BsFillHouseFill className=\"feedback_form_inner_lower_box_nav_bar_list_icon\"></BsFillHouseFill>\n                                    <p className=\"feedback_form_inner_lower_box_nav_bar_list_title\">\n                                        General\n                                    </p>\n                                </li>\n                                <li \n                                    onClick={() => this.setState({\n                                        toDisplay: featureRequest,\n                                    })}\n                                    className={\n                                        this.state.toDisplay === featureRequest ? \n                                        \"feedback_form_inner_lower_box_nav_bar_list feedback_form_inner_lower_box_nav_bar_list_active\" : \n                                        \"feedback_form_inner_lower_box_nav_bar_list\"}>\n                                    <RiVipCrown2Fill className=\"feedback_form_inner_lower_box_nav_bar_list_icon\"></RiVipCrown2Fill>\n                                    <p className=\"feedback_form_inner_lower_box_nav_bar_list_title\">\n                                        Feature Request\n                                    </p>\n                                </li>\n                                <li \n                                    onClick={() => this.setState({\n                                        toDisplay: bugReport,\n                                    })}\n                                    className={\n                                        this.state.toDisplay === bugReport ? \n                                        \"feedback_form_inner_lower_box_nav_bar_list feedback_form_inner_lower_box_nav_bar_list_active\" : \n                                        \"feedback_form_inner_lower_box_nav_bar_list\"}>\n                                    <RiFileWarningFill className=\"feedback_form_inner_lower_box_nav_bar_list_icon\"></RiFileWarningFill>\n                                    <p className=\"feedback_form_inner_lower_box_nav_bar_list_title\">\n                                        Bug Report\n                                    </p>\n                                </li>\n                                <li \n                                    onClick={() => this.setState({\n                                        toDisplay: securityIssue,\n                                    })}\n                                    className={\n                                        this.state.toDisplay === securityIssue ? \n                                        \"feedback_form_inner_lower_box_nav_bar_list feedback_form_inner_lower_box_nav_bar_list_active\" : \n                                        \"feedback_form_inner_lower_box_nav_bar_list\"}>\n                                    <AiTwotoneSecurityScan className=\"feedback_form_inner_lower_box_nav_bar_list_icon\"></AiTwotoneSecurityScan>\n                                    <p className=\"feedback_form_inner_lower_box_nav_bar_list_title\">\n                                        Security Issue\n                                    </p>\n                                </li>\n                                <li \n                                    onClick={() => this.setState({\n                                        toDisplay: accountIssue,\n                                    })}\n                                    className={\n                                        this.state.toDisplay === accountIssue ? \n                                        \"feedback_form_inner_lower_box_nav_bar_list feedback_form_inner_lower_box_nav_bar_list_active\" : \n                                        \"feedback_form_inner_lower_box_nav_bar_list\"}>\n                                    <MdAccountCircle className=\"feedback_form_inner_lower_box_nav_bar_list_icon\"></MdAccountCircle>\n                                    <p className=\"feedback_form_inner_lower_box_nav_bar_list_title\">\n                                        Account Issue\n                                    </p>\n                                </li>\n                            </div>\n                            <div id=\"feedback_form_inner_lower_box_right_box\">\n                                {this.renderForms()}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default FeedbackForm;","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/AnalysisDashboard.js",["161"],"import React from 'react';\nimport axios from 'axios';\n\nimport './CSS/AnalysisDashboard.css';\nimport './CSS/Style.css';\n\nimport DashboardSidebar from './DashboardSidebar.js';\nimport NotificationSidebar from './NotificationSidebar.js';\n\nimport { BsFillHouseFill } from 'react-icons/bs';\nimport { FaCaretDown, FaMapMarkerAlt } from 'react-icons/fa';\nimport { RiBuildingFill } from 'react-icons/ri';\nimport { IoMdAddCircle } from 'react-icons/io';\nimport { IoBedSharp } from 'react-icons/io5';\n\nconst general = \"general\";\nconst advanced = \"advanced\";\n\nclass AnalysisDashboard extends React.Component {\n    \n    constructor(props) {\n        super(props);\n\n        this.state = {\n            user: this.props.location.state.user,\n            profilePicture: this.props.location.state.profilePicture,\n            totalEstimateWorth: this.props.location.state.totalEstimateWorth,\n            missingEstimate: this.props.location.state.missingEstimate,\n            propertySelectorElements: [],\n            propertyTypeSelectedElements: new Map([\n                [\"All\", true],\n                [\"Single Family Homes\", true],\n                [\"Manufactured\", true],\n                [\"Condo/Ops\", true],\n                [\"Multi-Family\", true],\n                [\"Apartments\", true],\n                [\"Lots/Land\", true],\n                [\"Townhomes\", true],\n                [\"Commercial\", true],\n            ]),\n            propertyAddressMap: new Map([[\"All\", true]]),\n            propertiesSummary: null,\n            displayPropertySelector: false,\n            viewToDisplay: general,\n            isPropertiesLoading: true\n        };\n        this.numberWithCommas = this.numberWithCommas.bind(this);\n        this.renderPropertiesInSelector = this.renderPropertiesInSelector.bind(this);\n    }\n\n    componentDidMount() {\n\n        var propertyAddressMap = this.state.propertyAddressMap;\n\n        // Load our properties list.\n        axios({\n            method: 'get',\n            url:  'api/user/property/' + this.state.user[\"id\"],\n        }).then(response => {\n            var propertiesList = response.data;\n\n            var propertiesMap = new Map();\n            for (var i = 0; i < propertiesList.length; i++) {\n                var propertyID = propertiesList[i][\"id\"];\n                var propertyAddress = propertiesList[i][\"address\"];\n                propertiesMap.set(propertyID, propertyAddress);\n                propertyAddressMap.set(propertyAddress, true);\n            }\n\n            this.setState({\n                properties: [...propertiesMap],\n                propertyAddressMap: propertyAddressMap,\n            });\n        }).catch(error => {\n            console.log(error);\n            this.setState({\n                isPropertiesLoading: false\n            })\n        });\n\n        axios({\n            method: 'get',\n            url: 'api/user/analysis/' + this.state.user[\"id\"]\n        }).then(response => {\n            console.log(response.data);\n            this.setState({\n                propertiesSummary: response.data,\n                isPropertiesLoading: false\n            })\n        }).catch(error => {\n            console.log(error);\n            this.setState({\n                isPropertiesLoading: false\n            })\n        })\n    }\n\n    numberWithCommas(x) {\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n\n    renderPropertyTypesInSelector() {\n\n        var propertyTypes = [\n            'Single Family Homes', \n            'Manufactured', \n            'Condo/Ops', \n            'Multi-Family', \n            'Apartments',\n            'Lots/Land',\n            'Townhomes',\n            'Commercial']\n\n        var elements = [];\n        elements.push(\n            <li key={\"property_type_all\"}\n                className=\"analysis_dashboard_property_selector_property_list\">\n                <div  \n                    onMouseDown={() => {\n                        var propertyTypeMap = this.state.propertyTypeSelectedElements;\n                        var allSelected = propertyTypeMap.get(\"All\");\n                        propertyTypeMap.set(\"All\", !allSelected)\n                        if (!allSelected) {\n                            propertyTypeMap.forEach((key, value, map) => {\n                                propertyTypeMap.set(value, true);\n                            })\n                        } else {\n                            propertyTypeMap.forEach((key, value, map) => {\n                                propertyTypeMap.set(value, false);\n                            })\n                        }\n                        this.setState({\n                            propertyTypeSelectedElements: propertyTypeMap,\n                        })\n                    }}\n                    className={\n                        this.state.propertyTypeSelectedElements.get(\"All\") ?\n                        \"analysis_dashboard_property_selector_property_list_checkbox analysis_dashboard_property_selector_property_list_checkbox_active\" :\n                        \"analysis_dashboard_property_selector_property_list_checkbox\"}>\n\n                </div>\n                <p className=\"analysis_dashboard_property_selector_property_list_text\">\n                    All\n                </p>\n            </li>\n        )\n\n        for (var i = 0; i < propertyTypes.length; i++) {\n            let propertyType = propertyTypes[i];\n            elements.push(\n                <li key={propertyType}\n                    className=\"analysis_dashboard_property_selector_property_list\">\n                    <div \n                        onMouseDown={() => {\n                            var propertyTypeMap = this.state.propertyTypeSelectedElements;\n                            propertyTypeMap.set(propertyType, !propertyTypeMap.get(propertyType))\n                            this.setState({\n                                propertyTypeSelectedElements: propertyTypeMap,\n                            })\n                        }}\n                        className={\n                            this.state.propertyTypeSelectedElements.get(propertyType) ?\n                            \"analysis_dashboard_property_selector_property_list_checkbox analysis_dashboard_property_selector_property_list_checkbox_active\" :\n                            \"analysis_dashboard_property_selector_property_list_checkbox\"}>\n\n                    </div>\n                    <p className=\"analysis_dashboard_property_selector_property_list_text\">\n                        {propertyType}\n                    </p>\n                </li>\n            )\n        }\n        return elements;\n    }\n\n    renderPropertiesInSelector(properties) {\n        \n        var elements = [];\n        elements.push(\n            <div key={\"property_address_all\"}>\n                <div  \n                    onMouseDown={() => {\n                        var propertyAddressMap = this.state.propertyAddressMap;\n                        var allSelected = propertyAddressMap.get(\"All\");\n                        propertyAddressMap.set(\"All\", !allSelected)\n                        if (!allSelected) {\n                            propertyAddressMap.forEach((key, value, map) => {\n                                propertyAddressMap.set(value, true);\n                            })\n                        } else {\n                            propertyAddressMap.forEach((key, value, map) => {\n                                propertyAddressMap.set(value, false);\n                            })\n                        }\n                        this.setState({\n                            propertyAddressMap: propertyAddressMap,\n                        })\n                    }}\n                    className={\n                        this.state.propertyAddressMap.get(\"All\") ?\n                        \"analysis_dashboard_property_selector_property_list_checkbox analysis_dashboard_property_selector_property_list_checkbox_active\" :\n                        \"analysis_dashboard_property_selector_property_list_checkbox\"}>\n\n                </div>\n                <p className=\"analysis_dashboard_property_selector_property_list_text\">\n                    All\n                </p>\n                <div className=\"clearfix\"/>\n            </div>  \n        );\n\n        properties.forEach((value, keyValue, map) => {\n            let address = value[1];\n            elements.push(\n                <div key={address}>\n                    <div\n                        onMouseDown={() => {\n                            var propertyAddressMapElems = this.state.propertyAddressMap;\n                            propertyAddressMapElems.set(address, !propertyAddressMapElems.get(address));\n                            this.setState({\n                                propertyAddressMap: propertyAddressMapElems,\n                            })\n                        }}\n                        className={\n                            this.state.propertyAddressMap.get(address) ?\n                            \"analysis_dashboard_property_selector_property_list_checkbox analysis_dashboard_property_selector_property_list_checkbox_active\" :\n                            \"analysis_dashboard_property_selector_property_list_checkbox\"}>\n\n                    </div>\n                    <p className=\"analysis_dashboard_property_selector_property_list_text\">\n                        {address}\n                    </p>\n                    <div className=\"clearfix\"/>\n                </div>  \n            )\n        });\n        \n        var firstHalf = elements.slice(0, elements.length/2 + 1);\n        var secondHalf = elements.slice(elements.length/2 + 1, elements.length);\n\n        // Split the properties and display them side by side.\n        return (\n            <div>\n                <div className=\"property_selector_left_box\">\n                    {firstHalf}\n                </div>\n                <div className=\"property_selector_right_box\">\n                    {secondHalf}\n                </div>\n            </div>\n        );\n    }\n\n    renderViewBox() {\n        switch(this.state.viewToDisplay) {\n        case general:\n            return (\n                <div>\n                    <div className=\"analysis_dashboard_inner_box_top_cards_box\">\n                        <div className=\"analysis_dashboard_inner_box_top_cards_box_element\">\n                            <BsFillHouseFill className=\"analysis_dashboard_inner_box_top_cards_box_element_icon\"/>\n                            <IoMdAddCircle className=\"analysis_dashboard_inner_box_top_cards_box_element_add_icon\"/>\n                            <div className=\"analysis_dashboard_inner_box_top_cards_box_element_text_box\"> \n                                <p className=\"analysis_dashboard_inner_box_top_cards_box_element_text\">\n                                    {this.state.propertiesSummary[\"total_properties\"]} total\n                                </p>\n                                <div className=\"clearfix\"/>\n                                <p className=\"analysis_dashboard_inner_box_top_cards_box_element_subtitle\">\n                                    properties\n                                </p>\n                            </div>\n                        </div>\n                        <div className=\"analysis_dashboard_inner_box_top_cards_box_element\">\n                            <RiBuildingFill className=\"analysis_dashboard_inner_box_top_cards_box_element_icon\"/>\n                            <IoMdAddCircle className=\"analysis_dashboard_inner_box_top_cards_box_element_add_icon\"/>\n                            <div className=\"analysis_dashboard_inner_box_top_cards_box_element_text_box\"> \n                                <p className=\"analysis_dashboard_inner_box_top_cards_box_element_text\">\n                                    {this.state.propertiesSummary[\"total_properties\"]} total\n                                </p>\n                                <div className=\"clearfix\"/>\n                                <p className=\"analysis_dashboard_inner_box_top_cards_box_element_subtitle\">\n                                    units\n                                </p>\n                            </div>\n                        </div>\n                        <div className=\"analysis_dashboard_inner_box_top_cards_box_element\">\n                            <FaMapMarkerAlt className=\"analysis_dashboard_inner_box_top_cards_box_element_icon\"/>\n                            <IoMdAddCircle className=\"analysis_dashboard_inner_box_top_cards_box_element_add_icon\"/>\n                            <div className=\"analysis_dashboard_inner_box_top_cards_box_element_text_box\"> \n                                <p className=\"analysis_dashboard_inner_box_top_cards_box_element_text\">\n                                    {this.numberWithCommas(this.state.propertiesSummary[\"total_square_footage\"])} total\n                                </p>\n                                <div className=\"clearfix\"/>\n                                <p className=\"analysis_dashboard_inner_box_top_cards_box_element_subtitle\">\n                                    square feet\n                                </p>\n                            </div>\n                        </div>\n                        <div className=\"analysis_dashboard_inner_box_top_cards_box_element\">\n                            <IoBedSharp className=\"analysis_dashboard_inner_box_top_cards_box_element_icon\"/>\n                            <IoMdAddCircle className=\"analysis_dashboard_inner_box_top_cards_box_element_add_icon\"/>\n                            <div className=\"analysis_dashboard_inner_box_top_cards_box_element_text_box\"> \n                                <p className=\"analysis_dashboard_inner_box_top_cards_box_element_text\">\n                                    {this.numberWithCommas(this.state.propertiesSummary[\"total_bedrooms\"])} total beds\n                                </p>\n                                <div className=\"clearfix\"/>\n                                <p className=\"analysis_dashboard_inner_box_top_cards_box_element_subtitle\">\n                                {(this.state.propertiesSummary[\"total_bathrooms\"])} total baths\n                                </p>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"analysis_dashboard_inner_box_middle_cards_box\">\n                        <div className=\"analysis_dashboard_inner_box_middle_cards_left\">\n                        </div>\n                        <div className=\"analysis_dashboard_inner_box_middle_cards_right\">\n                            <div className=\"analysis_dashboard_inner_box_middle_cards_right_element_box\">\n                                <p className=\"analysis_dashboard_inner_box_middle_cards_right_element_box_header_title\">\n                                    Rental Income\n                                </p>\n                                <IoMdAddCircle className=\"analysis_dashboard_inner_box_middle_box_element_add_icon\"/>\n                                <div className=\"clearfix\"/>\n                                <p className=\"analysis_dashboard_inner_box_middle_cards_right_element_box_title\">\n                                    ${this.numberWithCommas(this.state.propertiesSummary[\"total_rent\"])}\n                                </p>\n                                <p className=\"analysis_dashboard_inner_box_middle_cards_right_element_box_subtitle\">\n                                    total rent / month\n                                </p>\n                            </div>\n                            <div className=\"analysis_dashboard_inner_box_middle_cards_right_element_box\">\n                                <p className=\"analysis_dashboard_inner_box_middle_cards_right_element_box_header_title\">\n                                    Expenses\n                                </p>\n                                <IoMdAddCircle className=\"analysis_dashboard_inner_box_middle_box_element_add_icon\"/>\n                                <div className=\"clearfix\"/>\n                                <p className=\"analysis_dashboard_inner_box_middle_cards_right_element_box_title\">\n                                    ${this.numberWithCommas(this.state.propertiesSummary[\"total_property_manager_fee\"])}\n                                </p>\n                                <p className=\"analysis_dashboard_inner_box_middle_cards_right_element_box_subtitle\">\n                                    in expenses this month\n                                </p>\n                            </div>\n                            <div className=\"analysis_dashboard_inner_box_middle_cards_right_element_box\">\n                                <p className=\"analysis_dashboard_inner_box_middle_cards_right_element_box_header_title\">\n                                    Loan Payback\n                                </p>\n                                <IoMdAddCircle className=\"analysis_dashboard_inner_box_middle_box_element_add_icon\"/>\n                                <div className=\"clearfix\"/>\n                                <p className=\"analysis_dashboard_inner_box_middle_cards_right_element_box_title\">\n                                    ${this.numberWithCommas(this.state.propertiesSummary[\"total_mortgage_payment\"])}\n                                </p>\n                                <p className=\"analysis_dashboard_inner_box_middle_cards_right_element_box_subtitle\">\n                                    due this month\n                                </p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            );\n        case advanced:\n            return (\n                <div>\n\n                    <div className=\"analysis_dashboard_advanced_inner_box_top_cards_box\">\n                        <div className=\"analysis_dashboard_advanced_inner_box_top_cards_box_element\">\n                            <IoMdAddCircle className=\"analysis_dashboard_advanced_inner_box_top_cards_box_element_add_icon\"/>\n                            <div className=\"analysis_dashboard_inner_box_top_cards_box_element_text_box\"> \n                                <p className=\"analysis_dashboard_advanced_inner_box_top_cards_box_element_text\">\n                                    ${this.numberWithCommas(this.state.propertiesSummary[\"total_estimate_worth\"])}\n                                </p>\n                                <div className=\"clearfix\"/>\n                                <p className=\"analysis_dashboard_advanced_inner_box_top_cards_box_element_subtitle\">\n                                    total estimated value\n                                </p>\n                            </div>\n                        </div>\n                        <div className=\"analysis_dashboard_advanced_inner_box_top_cards_box_element\">\n                            <IoMdAddCircle className=\"analysis_dashboard_advanced_inner_box_top_cards_box_element_add_icon\"/>\n                            <div className=\"analysis_dashboard_inner_box_top_cards_box_element_text_box\"> \n                                <p className=\"analysis_dashboard_advanced_inner_box_top_cards_box_element_text\">\n                                    {Number(this.state.propertiesSummary[\"average_ltv\"].toFixed(2))} %\n                                </p>\n                                <div className=\"clearfix\"/>\n                                <p className=\"analysis_dashboard_advanced_inner_box_top_cards_box_element_subtitle\">\n                                    average LTV ratio\n                                </p>\n                            </div>\n                        </div>\n                        <div className=\"analysis_dashboard_advanced_inner_box_top_cards_box_element\">\n                            <IoMdAddCircle className=\"analysis_dashboard_advanced_inner_box_top_cards_box_element_add_icon\"/>\n                            <div className=\"analysis_dashboard_inner_box_top_cards_box_element_text_box\"> \n                                <p className=\"analysis_dashboard_advanced_inner_box_top_cards_box_element_text\">\n                                    {Number(this.state.propertiesSummary[\"average_dti\"].toFixed(2))} %\n                                </p>\n                                <div className=\"clearfix\"/>\n                                <p className=\"analysis_dashboard_advanced_inner_box_top_cards_box_element_subtitle\">\n                                    average DTI ratio\n                                </p>\n                            </div>\n                        </div>\n                        <div className=\"analysis_dashboard_advanced_inner_box_top_cards_box_element\">\n                            <IoMdAddCircle className=\"analysis_dashboard_advanced_inner_box_top_cards_box_element_add_icon\"/>\n                            <div className=\"analysis_dashboard_inner_box_top_cards_box_element_text_box\"> \n                                <p className=\"analysis_dashboard_advanced_inner_box_top_cards_box_element_text\">\n                                    {this.numberWithCommas(this.state.propertiesSummary[\"total_bedrooms\"])} total beds\n                                </p>\n                                <div className=\"clearfix\"/>\n                                <p className=\"analysis_dashboard_advanced_inner_box_top_cards_box_element_subtitle\">\n                                {(this.state.propertiesSummary[\"total_bathrooms\"])} total baths\n                                </p>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"clearfix\"/>\n                    <div className=\"analysis_dashboard_advanced_inner_box_middle_box\">\n                        <div className=\"analysis_dashboard_advanced_inner_box_middle_box_left_box\">\n                        </div>\n                        <div className=\"analysis_dashboard_advanced_inner_box_middle_box_right_box\">\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <DashboardSidebar data={{\n                    state: {\n                        user: this.state.user,\n                        totalEstimateWorth: this.state.totalEstimateWorth,\n                        missingEstimate: this.state.missingEstimate,\n                        profilePicture: this.state.profilePicture,\n                        currentPage: \"analysis\"\n                    }\n                }}/>\n                <div id=\"analysis_dashboard_parent_box\">\n                    <div id=\"analysis_dashboard_parent_inner_box\">\n                        <div className=\"analysis_dashboard_parent_inner_box_title\">\n                            <p className=\"analysis_dashboard_parent_inner_box_title_text\">\n                                Analysis\n                            </p>\n                        </div>\n                        {this.state.isPropertiesLoading ? <div></div> : \n                        <div>\n                            <div className=\"clearfix\"/>\n                            <div \n                                onMouseDown={() => this.setState({\n                                    displayPropertySelector: !this.state.displayPropertySelector,\n                                })}\n                                className={this.state.displayPropertySelector ? \n                                    \"analysis_dashboard_inner_box_property_selector_box analysis_dashboard_inner_box_property_selector_box_active\":\n                                    \"analysis_dashboard_inner_box_property_selector_box\"}>\n                                <p className=\"analysis_dashboard_inner_box_property_selector_title\">\n                                    Property Selector\n                                </p>\n                                <FaCaretDown className={\n                                    this.state.displayPropertySelector ? \n                                    \"analysis_dashboard_inner_box_property_selector_icon analysis_dashboard_inner_box_property_selector_icon_active\" :\n                                    \"analysis_dashboard_inner_box_property_selector_icon\"}></FaCaretDown>\n                            </div>\n                            <div className=\"analysis_dashboard_view_selection_box\">\n                                <div\n                                    onClick={() => this.setState({\n                                        viewToDisplay: general\n                                    })}\n                                    className={\n                                        this.state.viewToDisplay === general ? \n                                        \"analysis_dashboard_view_selection_box_element analysis_dashboard_view_selection_box_element_active\" :\n                                        \"analysis_dashboard_view_selection_box_element\"}>\n                                    General\n                                </div>\n                                <div\n                                    onClick={() => this.setState({\n                                        viewToDisplay: advanced\n                                    })} \n                                    className={\n                                        this.state.viewToDisplay === advanced ? \n                                        \"analysis_dashboard_view_selection_box_element analysis_dashboard_view_selection_box_element_active\" :\n                                        \"analysis_dashboard_view_selection_box_element\"}>\n                                    Advanced\n                                </div>\n                            </div>\n                            <div className=\"clearfix\"/>\n                            {this.state.displayPropertySelector ? \n                                <div className=\"analysis_dashboard_property_selector_display_box\">\n                                    <div className=\"analysis_dashboard_property_selector_display_left_box\">\n                                        <p className=\"analysis_dashboard_property_selector_display_left_box_title\">\n                                            Filter by Property Types\n                                        </p>\n                                        <div className=\"clearfix\"/>\n                                        {this.renderPropertyTypesInSelector()}\n                                    </div>\n                                    <div className=\"analysis_dashboard_property_selector_display_right_box\">\n                                        <p className=\"analysis_dashboard_property_selector_display_left_box_title\">\n                                            Filter by Individual Property\n                                        </p>\n                                        <div className=\"property_selector_apply_button\">\n                                            Apply\n                                        </div>\n                                        <div className=\"clearfix\"/>\n                                        {this.renderPropertiesInSelector(this.state.properties)}\n                                    </div>\n                                </div> :\n                                <div></div>\n                            }\n                            <div className=\"clearfix\"/>\n                            <div className=\"analysis_dashboard_inner_box\">\n                                {this.renderViewBox()}\n                                <div className=\"clearfix\"/>\n                                <div className=\"analysis_dashboard_inner_box_ratios_box\">\n                                </div>\n                            </div>\n                        </div>}\n                    </div>\n                </div>\n                <NotificationSidebar data={{\n                    state: {\n                        totalEstimateWorth: this.state.totalEstimateWorth,\n                        missingEstimate: this.state.missingEstimate \n                    }\n                }}/>\n            </div>\n        )\n    }\n}\n\nexport default AnalysisDashboard;",["162","163"],"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/MainDashboard.js",["164","165","166","167","168","169","170","171","172","173"],"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/ExpensesDashboard.js",[],"/Users/eric.lin/Documents/RealEstateApp/ui/src/index.js",[],["174","175"],"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/ExploreDashboard.js",[],"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/Loader.js",["176"],"import React from 'react';\n\nimport './CSS/Loader.css';\n\nclass Loader extends React.Component {\n    \n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount() {\n    }\n\n    render() {\n        return (\n            <div class=\"loader\">Loading...</div>\n        )\n    }\n}\n\nexport default Loader;",["177","178"],"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/PricingPage.js",["179"],"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/FileCard.js",[],"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/ExpandedExpenseCard.js",["180","181","182","183","184","185"],"import React from 'react';\nimport axios from 'axios';\n\nimport './CSS/ExpandedExpenseCard.css';\nimport './CSS/Style.css';\n\nimport { capitalizeName, numberWithCommas } from './MainDashboard.js';\nimport { convertDate } from './ExpensesDashboard.js';\n\nimport { \n    IoCalendarClearSharp, \n    IoCloseOutline, \n    IoArrowRedoSharp, \n    IoCalendarClear, \n    IoCardSharp, \n    IoDocumentTextSharp, \n    IoAttachSharp,\n    IoFlag } from 'react-icons/io5';\nimport { SiGooglecalendar } from 'react-icons/si';\nimport { FaMoneyCheck } from 'react-icons/fa';\n\nlet URLBuilder = require('url-join');\n\nclass ExpandedExpenseCard extends React.Component {\n    \n    constructor(props) {\n        super(props);\n\n        this.state = {\n            expense: this.props.data.state.expense,\n            setActiveExpandedExpenseCard: this.props.data.state.setActiveExpandedExpenseCard,\n        };\n    }\n\n    componentDidMount() {\n\n        let userID = this.state.user[\"id\"];\n        let getPropertiesListURL = URLBuilder('api/user/property/', userID);\n\n        const getPropertiesRequest = axios.get(getPropertiesListURL);\n        const getExpensesRequest = axios.get(getExpensesListURL);\n\n        axios.all(\n            [getPropertiesRequest, getExpensesRequest]\n        ).then(axios.spread((...responses) => {\n            const propertiesRequestReponse = responses[0];\n            const expensesRequestResponse = responses[1];\n\n            /* Handle our properties response */\n            let propertiesList = propertiesRequestReponse.data;\n            let propertiesMap = new Map();\n            for (let i = 0; i < propertiesList.length; i++) {\n                let property = propertiesList[i];\n                let propertyID = property[\"id\"];\n                let propertyAddress = property[\"address\"];\n                propertiesMap.set(propertyID, propertyAddress);\n            }\n            /* Set 'None' and 'All' to handle cases where expenses are not mapped to any/are mapped to all properties */\n            propertiesMap.set(\"None\", \"None\");\n            propertiesMap.set(\"All\", \"All\");\n\n            /* Handle our expenses response */\n            let expensesMap = new Map();\n            // response.data is an array of expenses. Order them by property IDs -> expenses.\n            let expenses = expensesRequestResponse.data.sort(\n                this.getSortFunction(this.state.currFieldToggledDirectionIsUp, this.state.currFieldToggled)\n            );\n            for (let i = 0; i < expenses.length; i++) {\n                let expense = expenses[i];\n                expensesMap.set(expense[\"id\"], expense);\n            }\n\n            this.setState({\n                propertiesMap: propertiesMap,\n                expenses: expenses,\n                expensesMap: expensesMap,\n                isLoading: false\n            });\n        })).catch(errors => {\n            console.log(errors);\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"expanded_expense_card_box\" key={\"active_expanded_expense_card\"}>\n                <div className=\"expanded_expense_card_title_box\">\n                    <p className=\"expanded_expense_card_title_text\">\n                        {capitalizeName(this.state.expense[\"title\"])}\n                    </p>\n                    <IoCloseOutline \n                        onClick={() => this.state.setActiveExpandedExpenseCard(null)}\n                        className=\"expanded_expense_card_title_box_close_icon\"></IoCloseOutline>\n                </div>\n                <div className=\"expanded_expense_card_body_box\">\n                    <div className=\"expanded_expense_card_inner_body_box\">\n                        <div className=\"expanded_expense_card_body_left_box_element_box\">\n                            <IoCalendarClear className=\"expanded_expense_card_body_left_box_element_box_icon\"></IoCalendarClear>\n                            <p className=\"expanded_expense_card_body_left_box_element_box_text\">\n                                Date\n                            </p>\n                            <p className=\"expanded_expense_card_body_left_box_element_box_actual_text\">\n                                {convertDate(this.state.expense[\"date\"])}\n                            </p>\n                        </div>\n                        <div className=\"expanded_expense_card_body_left_box_element_box\">\n                            <IoCardSharp className=\"expanded_expense_card_body_left_box_element_box_icon\"></IoCardSharp>\n                            <p className=\"expanded_expense_card_body_left_box_element_box_text\">\n                                Amount\n                            </p>\n                            <p className=\"expanded_expense_card_body_left_box_element_box_actual_text\">\n                                ${numberWithCommas(this.state.expense[\"amount\"])}\n                            </p>\n                        </div>\n                        <div className=\"expanded_expense_card_body_left_box_element_box\">\n                            <IoFlag className=\"expanded_expense_card_body_left_box_element_box_icon\"></IoFlag>\n                            <p className=\"expanded_expense_card_body_left_box_element_box_text\">\n                                Frequency\n                            </p>\n                            <p className=\"expanded_expense_card_body_left_box_element_box_actual_text\">\n                                {capitalizeName(this.state.expense[\"frequency\"])}\n                            </p>\n                        </div>\n                        <div className=\"expanded_expense_card_body_left_box_element_box\">\n                            <IoDocumentTextSharp className=\"expanded_expense_card_body_left_box_element_box_icon\"></IoDocumentTextSharp>\n                            <p className=\"expanded_expense_card_body_left_box_element_box_text\">\n                                File\n                            </p>\n                            <p className=\"expanded_expense_card_body_left_box_element_box_actual_text\">\n                                {this.state.expense[\"file_id\"]}\n                            </p>\n                        </div>\n                    </div>\n                    <div className=\"expanded_expense_card_body_right_box\">\n\n                    </div>\n                    {/* <p className=\"expanded_expense_card_name_text expanded_expense_card_description_text\">\n                        {this.state.expense[\"description\"]}\n                    </p> */}\n\n                    {/* <div className=\"expanded_expense_card_bullet_point_box\">\n                        <IoCalendarClearSharp className=\"expanded_expense_card_bullet_point_box_icon\"></IoCalendarClearSharp>\n                        <p className=\"expanded_expense_card_bullet_point_box_text\">\n                            {convertDate(this.state.expense[\"date\"])}\n                        </p>\n                    </div>\n                    <div className=\"expanded_expense_card_bullet_point_box\">\n                        <IoArrowRedoSharp className=\"expanded_expense_card_bullet_point_box_icon\"></IoArrowRedoSharp>\n                        <p className=\"expanded_expense_card_bullet_point_box_text\">\n                            {capitalizeName(this.state.expense[\"frequency\"])}\n                        </p>\n                    </div>\n                    <div className=\"expanded_expense_card_bullet_point_box\">\n                        <FaMoneyCheck className=\"expanded_expense_card_bullet_point_box_icon\"></FaMoneyCheck>\n                        <p className=\"expanded_expense_card_bullet_point_box_text\">\n                            ${numberWithCommas(this.state.expense[\"amount\"])}\n                        </p>\n                    </div> */}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ExpandedExpenseCard;",{"ruleId":"186","severity":1,"message":"187","line":7,"column":8,"nodeType":"188","messageId":"189","endLine":7,"endColumn":24},{"ruleId":"186","severity":1,"message":"190","line":8,"column":8,"nodeType":"188","messageId":"189","endLine":8,"endColumn":27},{"ruleId":"186","severity":1,"message":"191","line":19,"column":10,"nodeType":"188","messageId":"189","endLine":19,"endColumn":22},{"ruleId":"186","severity":1,"message":"192","line":20,"column":22,"nodeType":"188","messageId":"189","endLine":20,"endColumn":39},{"ruleId":"186","severity":1,"message":"193","line":20,"column":41,"nodeType":"188","messageId":"189","endLine":20,"endColumn":58},{"ruleId":"186","severity":1,"message":"194","line":20,"column":60,"nodeType":"188","messageId":"189","endLine":20,"endColumn":74},{"ruleId":"186","severity":1,"message":"195","line":20,"column":76,"nodeType":"188","messageId":"189","endLine":20,"endColumn":103},{"ruleId":"186","severity":1,"message":"196","line":20,"column":10,"nodeType":"188","messageId":"189","endLine":20,"endColumn":16},{"ruleId":"197","severity":1,"message":"198","line":70,"column":21,"nodeType":"199","endLine":70,"endColumn":100},{"ruleId":"186","severity":1,"message":"200","line":13,"column":10,"nodeType":"188","messageId":"189","endLine":13,"endColumn":21},{"ruleId":"186","severity":1,"message":"201","line":15,"column":10,"nodeType":"188","messageId":"189","endLine":15,"endColumn":22},{"ruleId":"202","severity":1,"message":"203","line":317,"column":9,"nodeType":"204","messageId":"205","endLine":694,"endColumn":10},{"ruleId":"186","severity":1,"message":"206","line":12,"column":8,"nodeType":"188","messageId":"189","endLine":12,"endColumn":19},{"ruleId":"207","severity":1,"message":"208","line":194,"column":13,"nodeType":"209","messageId":"210","endLine":194,"endColumn":33},{"ruleId":"211","severity":1,"message":"212","line":361,"column":26,"nodeType":"188","messageId":"213","endLine":361,"endColumn":27},{"ruleId":"211","severity":1,"message":"214","line":365,"column":25,"nodeType":"188","messageId":"213","endLine":365,"endColumn":29},{"ruleId":"202","severity":1,"message":"203","line":443,"column":13,"nodeType":"204","messageId":"205","endLine":468,"endColumn":14},{"ruleId":"215","replacedBy":"216"},{"ruleId":"217","replacedBy":"218"},{"ruleId":"186","severity":1,"message":"219","line":4,"column":8,"nodeType":"188","messageId":"189","endLine":4,"endColumn":18},{"ruleId":"186","severity":1,"message":"220","line":16,"column":16,"nodeType":"188","messageId":"189","endLine":16,"endColumn":24},{"ruleId":"186","severity":1,"message":"221","line":17,"column":37,"nodeType":"188","messageId":"189","endLine":17,"endColumn":48},{"ruleId":"186","severity":1,"message":"222","line":17,"column":50,"nodeType":"188","messageId":"189","endLine":17,"endColumn":62},{"ruleId":"186","severity":1,"message":"223","line":18,"column":10,"nodeType":"188","messageId":"189","endLine":18,"endColumn":29},{"ruleId":"186","severity":1,"message":"224","line":18,"column":31,"nodeType":"188","messageId":"189","endLine":18,"endColumn":42},{"ruleId":"186","severity":1,"message":"225","line":23,"column":10,"nodeType":"188","messageId":"189","endLine":23,"endColumn":21},{"ruleId":"186","severity":1,"message":"226","line":25,"column":5,"nodeType":"188","messageId":"189","endLine":25,"endColumn":18},{"ruleId":"186","severity":1,"message":"227","line":32,"column":5,"nodeType":"188","messageId":"189","endLine":32,"endColumn":18},{"ruleId":"211","severity":1,"message":"212","line":105,"column":22,"nodeType":"188","messageId":"213","endLine":105,"endColumn":23},{"ruleId":"186","severity":1,"message":"228","line":331,"column":13,"nodeType":"188","messageId":"189","endLine":331,"endColumn":21},{"ruleId":"202","severity":1,"message":"203","line":350,"column":9,"nodeType":"204","messageId":"205","endLine":537,"endColumn":10},{"ruleId":"215","replacedBy":"229"},{"ruleId":"217","replacedBy":"230"},{"ruleId":"186","severity":1,"message":"231","line":10,"column":24,"nodeType":"188","messageId":"189","endLine":10,"endColumn":48},{"ruleId":"186","severity":1,"message":"232","line":10,"column":50,"nodeType":"188","messageId":"189","endLine":10,"endColumn":63},{"ruleId":"186","severity":1,"message":"233","line":11,"column":10,"nodeType":"188","messageId":"189","endLine":11,"endColumn":21},{"ruleId":"186","severity":1,"message":"234","line":9,"column":10,"nodeType":"188","messageId":"189","endLine":9,"endColumn":22},{"ruleId":"186","severity":1,"message":"235","line":9,"column":40,"nodeType":"188","messageId":"189","endLine":9,"endColumn":52},{"ruleId":"186","severity":1,"message":"206","line":12,"column":8,"nodeType":"188","messageId":"189","endLine":12,"endColumn":19},{"ruleId":"186","severity":1,"message":"236","line":71,"column":13,"nodeType":"188","messageId":"189","endLine":71,"endColumn":21},{"ruleId":"186","severity":1,"message":"237","line":5,"column":13,"nodeType":"188","messageId":"189","endLine":5,"endColumn":20},{"ruleId":"186","severity":1,"message":"238","line":2,"column":8,"nodeType":"188","messageId":"189","endLine":2,"endColumn":13},{"ruleId":"186","severity":1,"message":"239","line":26,"column":5,"nodeType":"188","messageId":"189","endLine":26,"endColumn":15},{"ruleId":"186","severity":1,"message":"238","line":2,"column":8,"nodeType":"188","messageId":"189","endLine":2,"endColumn":13},{"ruleId":"215","replacedBy":"240"},{"ruleId":"217","replacedBy":"241"},{"ruleId":"202","severity":1,"message":"203","line":73,"column":9,"nodeType":"204","messageId":"205","endLine":231,"endColumn":10},{"ruleId":"202","severity":1,"message":"203","line":255,"column":9,"nodeType":"204","messageId":"205","endLine":423,"endColumn":10},{"ruleId":"215","replacedBy":"242"},{"ruleId":"217","replacedBy":"243"},{"ruleId":"186","severity":1,"message":"223","line":8,"column":10,"nodeType":"188","messageId":"189","endLine":8,"endColumn":29},{"ruleId":"186","severity":1,"message":"224","line":8,"column":31,"nodeType":"188","messageId":"189","endLine":8,"endColumn":42},{"ruleId":"186","severity":1,"message":"244","line":11,"column":8,"nodeType":"188","messageId":"189","endLine":11,"endColumn":20},{"ruleId":"186","severity":1,"message":"245","line":24,"column":10,"nodeType":"188","messageId":"189","endLine":24,"endColumn":19},{"ruleId":"186","severity":1,"message":"246","line":24,"column":21,"nodeType":"188","messageId":"189","endLine":24,"endColumn":29},{"ruleId":"186","severity":1,"message":"247","line":28,"column":10,"nodeType":"188","messageId":"189","endLine":28,"endColumn":18},{"ruleId":"186","severity":1,"message":"248","line":28,"column":20,"nodeType":"188","messageId":"189","endLine":28,"endColumn":25},{"ruleId":"186","severity":1,"message":"249","line":28,"column":27,"nodeType":"188","messageId":"189","endLine":28,"endColumn":30},{"ruleId":"186","severity":1,"message":"250","line":206,"column":26,"nodeType":"188","messageId":"189","endLine":206,"endColumn":31},{"ruleId":"211","severity":1,"message":"251","line":209,"column":17,"nodeType":"188","messageId":"213","endLine":209,"endColumn":26},{"ruleId":"215","replacedBy":"252"},{"ruleId":"217","replacedBy":"253"},{"ruleId":"254","severity":1,"message":"255","line":7,"column":5,"nodeType":"256","messageId":"257","endLine":9,"endColumn":6},{"ruleId":"215","replacedBy":"258"},{"ruleId":"217","replacedBy":"259"},{"ruleId":"254","severity":1,"message":"255","line":12,"column":5,"nodeType":"256","messageId":"257","endLine":14,"endColumn":6},{"ruleId":"186","severity":1,"message":"260","line":11,"column":5,"nodeType":"188","messageId":"189","endLine":11,"endColumn":25},{"ruleId":"186","severity":1,"message":"261","line":13,"column":5,"nodeType":"188","messageId":"189","endLine":13,"endColumn":21},{"ruleId":"186","severity":1,"message":"232","line":17,"column":5,"nodeType":"188","messageId":"189","endLine":17,"endColumn":18},{"ruleId":"186","severity":1,"message":"262","line":19,"column":10,"nodeType":"188","messageId":"189","endLine":19,"endColumn":26},{"ruleId":"186","severity":1,"message":"191","line":20,"column":10,"nodeType":"188","messageId":"189","endLine":20,"endColumn":22},{"ruleId":"263","severity":2,"message":"264","line":41,"column":46,"nodeType":"188","messageId":"265","endLine":41,"endColumn":64},"no-unused-vars","'DashboardSidebar' is defined but never used.","Identifier","unusedVar","'NotificationSidebar' is defined but never used.","'FaMoneyCheck' is defined but never used.","'CardNumberElement' is defined but never used.","'CardExpiryElement' is defined but never used.","'CardCvcElement' is defined but never used.","'PaymentRequestButtonElement' is defined but never used.","'ImUser' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'RiUser3Fill' is defined but never used.","'IoMdSettings' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'ProgressBar' is defined but never used.","no-dupe-keys","Duplicate key 'displayUploadFileBox'.","ObjectExpression","unexpected","no-redeclare","'i' is already defined.","redeclared","'fKey' is already defined.","no-native-reassign",["266"],"no-negated-in-lhs",["267"],"'SignUpPage' is defined but never used.","'Redirect' is defined but never used.","'VictoryAxis' is defined but never used.","'VictoryLabel' is defined but never used.","'CircularProgressbar' is defined but never used.","'buildStyles' is defined but never used.","'MdDashboard' is defined but never used.","'IoOpenOutline' is defined but never used.","'IoFolderSharp' is defined but never used.","'elements' is assigned a value but never used.",["266"],["267"],"'IoReturnDownForwardSharp' is defined but never used.","'IoAttachSharp' is defined but never used.","'FaCaretDown' is defined but never used.","'IoCloseSharp' is defined but never used.","'IoTrashSharp' is defined but never used.","'fileName' is assigned a value but never used.","'bgcolor' is assigned a value but never used.","'axios' is defined but never used.","'URLBuilder' is assigned a value but never used.",["266"],["267"],["266"],["267"],"'PropertyCard' is defined but never used.","'LineChart' is defined but never used.","'PieChart' is defined but never used.","'BarChart' is defined but never used.","'XAxis' is defined but never used.","'Bar' is defined but never used.","'value' is assigned a value but never used.","'daysUntil' is already defined.",["266"],["267"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor",["266"],["267"],"'IoCalendarClearSharp' is defined but never used.","'IoArrowRedoSharp' is defined but never used.","'SiGooglecalendar' is defined but never used.","no-undef","'getExpensesListURL' is not defined.","undef","no-global-assign","no-unsafe-negation"]