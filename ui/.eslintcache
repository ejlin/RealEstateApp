[{"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/FileCard.js":"1","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/PropertyCard.js":"2","/Users/eric.lin/Documents/RealEstateApp/ui/src/App.js":"3","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/PricingPage.js":"4","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/NavigationBar.js":"5","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/HomePage.js":"6","/Users/eric.lin/Documents/RealEstateApp/ui/src/reportWebVitals.js":"7","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/DashboardSidebar.js":"8","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/SignUpPage.js":"9","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/NotificationSidebar.js":"10","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/SignUp.js":"11","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/Login.js":"12","/Users/eric.lin/Documents/RealEstateApp/ui/src/index.js":"13","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/NewPropertyForm.js":"14","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/FilesDashboard.js":"15","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/MainDashboard.js":"16","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/PropertiesDashboard.js":"17","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/SettingsDashboard.js":"18","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/LoadingScreen.js":"19","/Users/eric.lin/Documents/RealEstateApp/ui/src/utility/ProgressBar.js":"20","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/ExploreDashboard.js":"21","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/AnalysisDashboard.js":"22","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/FeedbackForm.js":"23","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/ExpensesDashboard.js":"24"},{"size":3156,"mtime":1609710514825,"results":"25","hashOfConfig":"26"},{"size":21405,"mtime":1609716606756,"results":"27","hashOfConfig":"26"},{"size":2145,"mtime":1609447114713,"results":"28","hashOfConfig":"26"},{"size":11734,"mtime":1609453311035,"results":"29","hashOfConfig":"26"},{"size":1678,"mtime":1608487392389,"results":"30","hashOfConfig":"26"},{"size":2867,"mtime":1608531433500,"results":"31","hashOfConfig":"26"},{"size":362,"mtime":1606110926381,"results":"32","hashOfConfig":"26"},{"size":13679,"mtime":1609385521496,"results":"33","hashOfConfig":"26"},{"size":597,"mtime":1608496280794,"results":"34","hashOfConfig":"26"},{"size":2399,"mtime":1609316821391,"results":"35","hashOfConfig":"26"},{"size":3140,"mtime":1609017415047,"results":"36","hashOfConfig":"26"},{"size":2443,"mtime":1609031513408,"results":"37","hashOfConfig":"26"},{"size":500,"mtime":1606110926380,"results":"38","hashOfConfig":"26"},{"size":36575,"mtime":1609446879853,"results":"39","hashOfConfig":"26"},{"size":43536,"mtime":1609719517267,"results":"40","hashOfConfig":"26"},{"size":38345,"mtime":1609737488220,"results":"41","hashOfConfig":"26"},{"size":38247,"mtime":1609741516386,"results":"42","hashOfConfig":"26"},{"size":46526,"mtime":1609223132732,"results":"43","hashOfConfig":"26"},{"size":929,"mtime":1607721990088,"results":"44","hashOfConfig":"26"},{"size":706,"mtime":1608772503798,"results":"45","hashOfConfig":"26"},{"size":1296,"mtime":1609295212979,"results":"46","hashOfConfig":"26"},{"size":27452,"mtime":1609561968335,"results":"47","hashOfConfig":"26"},{"size":18778,"mtime":1609707927620,"results":"48","hashOfConfig":"26"},{"size":6783,"mtime":1609710813534,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ga57tu",{"filePath":"52","messages":"53","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"101"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/FileCard.js",[],"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/PropertyCard.js",["110","111","112","113","114","115","116","117","118","119","120","121"],"/Users/eric.lin/Documents/RealEstateApp/ui/src/App.js",[],["122","123"],"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/PricingPage.js",["124"],"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/NavigationBar.js",["125","126","127"],"import React from 'react';\n\nimport { AiFillHome } from 'react-icons/ai';\n\nimport './CSS/NavigationBar.css';\n\nimport logo from './Images/LogoStretch.png';\n\nimport { Link } from \"react-router-dom\";\n\nclass NavigationBar extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount() {\n        window.addEventListener(\"scroll\", this.handleScroll);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"scroll\", this.handleScroll);\n    }\n\n    handleScroll = () => {\n        if (window.scrollY > 20) {\n          document.querySelector(\"#navigation_bar_parent\").className = \"animate scroll\";\n        } else {\n          document.querySelector(\"#navigation_bar_parent\").className = \"animate\";\n        }\n    };\n\n      \n    render() {\n        return (\n            <div id=\"navigation_bar_parent\">\n                <div id=\"navigation_bar_subparent\">\n                    <Link to=\"/\">\n                        <li id=\"navigation_bar_subparent_first_child\">\n                            <img src={logo} id=\"navigation_bar_logo\"></img>\n                        </li>\n                    </Link>\n                    <li className=\"navigation_bar_subparent_list\">\n                        FAQ\n                    </li>\n                    <li className=\"navigation_bar_subparent_list\">\n                        Company\n                    </li>\n                    <Link to=\"/pricing\">\n                        <li className=\"navigation_bar_subparent_list\">\n                            Pricing\n                        </li>\n                    </Link>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default NavigationBar;",["128","129"],"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/HomePage.js",["130"],"/Users/eric.lin/Documents/RealEstateApp/ui/src/reportWebVitals.js",[],"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/DashboardSidebar.js",["131"],"import React from 'react';\n\nimport axios from 'axios';\n\nimport './CSS/DashboardSidebar.css';\nimport './CSS/Style.css';\n\nimport { Link, Redirect } from 'react-router-dom';\n\nimport { BsFillHouseFill } from 'react-icons/bs';\nimport { GoFileDirectory } from 'react-icons/go';\nimport { SiGoogleanalytics } from 'react-icons/si';\nimport { IoSettingsSharp } from 'react-icons/io5';\nimport { MdFeedback, MdDashboard } from 'react-icons/md';\nimport { FiChevronDown } from 'react-icons/fi';\nimport { FaMoneyCheck } from 'react-icons/fa';\n\nclass DashboardSidebar extends React.Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            user: this.props.data.state.user,\n            totalEstimateWorth: this.props.data.state.totalEstimateWorth,\n            missingEstimate: this.props.data.state.missingEstimate,\n            currentPage: this.props.data.state.currentPage,\n            profilePicture: this.props.data.state.profilePicture\n        };\n    }\n\n    componentDidMount() {\n        if (this.state.profilePicture === \"\" || this.state.profilePicture === undefined || this.state.profilePicture === null) {\n            axios({\n                method: 'get',\n                url: '/api/user/settings/profile/picture/' + this.state.user[\"id\"],\n            }).then(response => {\n                var src = response.data;\n                this.setState({\n                    profilePicture: src\n                })\n            }).catch(error => console.log(error))\n        }\n    }\n\n    render() {\n        if (this.state.redirect) {\n            return <Redirect to={{\n                pathname: this.state.redirect\n            }} />\n        }\n        return (\n            <div>\n                <div>\n                    <div id=\"dashboard_sidebar_parent\">\n                        <img id=\"dashboard_sidebar_profile_pic\" src={this.state.profilePicture}>\n                        </img>\n                        <div className=\"clearfix\"/>\n                        <div id=\"dashboard_sidebar_profile_pic_text_box\">\n                            <p className=\"dashboard_sidebar_profile_pic_title\">\n                                {this.state.user[\"first_name\"]} {this.state.user[\"last_name\"]}\n                                <FiChevronDown\n                                    onMouseDown={() => this.setState({\n                                        displayAccountTooltip: !this.state.displayAccountTooltip\n                                    })}\n                                    className=\"dashboard_sidebar_profile_pic_icon\"></FiChevronDown>\n                            </p>\n                            {this.state.displayAccountTooltip ? \n                            <div id=\"dashboard_sidebar_profile_tooltip\">\n                                <li \n                                    onClick={() => this.setState({\n                                        redirect: \"/\"\n                                    })}\n                                    className=\"dashboard_sidebar_profile_tooltip_list\">\n                                    Sign Out\n                                </li>\n                            </div> :\n                            <div></div>}\n                        </div>\n                        <Link id=\"dashboard_new_property_button\" to={{\n                            pathname: \"/addproperty\",\n                            state: {\n                                user: this.state.user,\n                                totalEstimateWorth: this.state.totalEstimateWorth,\n                                missingEstimate: this.state.missingEstimate,\n                                profilePicture: this.state.profilePicture\n                            }\n                        }}>\n                            <div id=\"BsFillPlusSquareFill\">New Property</div>\n                            {/* New Property */}\n                        </Link> \n                        <div className=\"clearfix\"/>\n                        <div className=\"dashboard_sidebar_link\">\n                            <Link className=\"dashboard_sidebar_inner_link\" to={{\n                                pathname: \"/dashboard\",\n                                state: {\n                                    user: this.state.user,\n                                    totalEstimateWorth: this.state.totalEstimateWorth,\n                                    missingEstimate: this.state.missingEstimate,\n                                    profilePicture: this.state.profilePicture\n                                }\n                            }}>\n                                <MdDashboard className={this.state.currentPage === \"overview\" ? \"dashboard_sidebar_link_icon_on dashboard_sidebar_link_icon\" : \"dashboard_sidebar_link_icon\"} />\n                                <p className={this.state.currentPage === \"overview\" ? \"dashboard_sidebar_link_icon_on dashboard_sidebar_link_text\" : \"dashboard_sidebar_link_text\"}>\n                                    Overview\n                                </p>\n                            </Link>\n                        </div>\n                        <div className=\"clearfix\"/>\n                        <div className=\"dashboard_sidebar_link\">\n                            <Link className=\"dashboard_sidebar_inner_link\" to={{\n                                pathname: \"/properties\",\n                                state: {\n                                    user: this.state.user,\n                                    totalEstimateWorth: this.state.totalEstimateWorth,\n                                    missingEstimate: this.state.missingEstimate,\n                                    profilePicture: this.state.profilePicture\n                                }\n                            }}>\n                                <BsFillHouseFill className={this.state.currentPage === \"properties\" ? \"dashboard_sidebar_link_icon_on dashboard_sidebar_link_icon\" : \"dashboard_sidebar_link_icon\"} />\n                                <p className={this.state.currentPage === \"properties\" ? \"dashboard_sidebar_link_icon_on dashboard_sidebar_link_text\" : \"dashboard_sidebar_link_text\"}>\n                                    Properties\n                                </p>\n                            </Link>\n                        </div>\n                        <div className=\"clearfix\"/>\n                        <div className=\"dashboard_sidebar_link\">\n                            <Link className=\"dashboard_sidebar_inner_link\" to={{\n                                pathname: \"/analysis\",\n                                state: {\n                                    user: this.state.user,\n                                    totalEstimateWorth: this.state.totalEstimateWorth,\n                                    missingEstimate: this.state.missingEstimate,\n                                    profilePicture: this.state.profilePicture\n                                }\n                            }}>\n                                <SiGoogleanalytics className={this.state.currentPage === \"analysis\" ? \"dashboard_sidebar_link_icon_on dashboard_sidebar_link_icon\" : \"dashboard_sidebar_link_icon\"} />\n                                <p className={this.state.currentPage === \"analysis\" ? \"dashboard_sidebar_link_icon_on dashboard_sidebar_link_text\" : \"dashboard_sidebar_link_text\"}>\n                                    Analysis\n                                </p>\n                            </Link>\n                        </div>\n                        <div className=\"dashboard_sidebar_link\">\n                            <Link className=\"dashboard_sidebar_inner_link\" to={{\n                                pathname: \"/expenses\",\n                                state: {\n                                    user: this.state.user,\n                                    totalEstimateWorth: this.state.totalEstimateWorth,\n                                    missingEstimate: this.state.missingEstimate,\n                                    profilePicture: this.state.profilePicture\n                                }\n                            }}>\n                                <FaMoneyCheck className={this.state.currentPage === \"expenses\" ? \"dashboard_sidebar_link_icon_on dashboard_sidebar_link_icon\" : \"dashboard_sidebar_link_icon\"} />\n                                <p className={this.state.currentPage === \"expenses\" ? \"dashboard_sidebar_link_icon_on dashboard_sidebar_link_text\" : \"dashboard_sidebar_link_text\"}>\n                                    Expenses\n                                </p>\n                            </Link>\n                        </div>\n                        <div className=\"clearfix\"/>\n                        <div className=\"dashboard_sidebar_link\">\n                            <Link className=\"dashboard_sidebar_inner_link\" to={{\n                                pathname: \"/files\",\n                                state: {\n                                    user: this.state.user,\n                                    totalEstimateWorth: this.state.totalEstimateWorth,\n                                    missingEstimate: this.state.missingEstimate,\n                                    profilePicture: this.state.profilePicture\n                                }\n                            }}>\n                                <GoFileDirectory className={this.state.currentPage === \"files\" ? \"dashboard_sidebar_link_icon_on dashboard_sidebar_link_icon\" : \"dashboard_sidebar_link_icon\"} />\n                                <p className={this.state.currentPage === \"files\" ? \"dashboard_sidebar_link_icon_on dashboard_sidebar_link_text\" : \"dashboard_sidebar_link_text\"}>\n                                    Files\n                                </p>\n                            </Link>\n                        </div>\n                        {/* <div className=\"clearfix\"/>\n                        <div className=\"dashboard_sidebar_link\">\n                            <Link className=\"dashboard_sidebar_inner_link\" to={{\n                                pathname: \"/explore\",\n                                state: {\n                                    id: this.state.id,\n                                    firstName: this.state.firstName,\n                                    lastName: this.state.lastName,\n                                    email: this.state.email,\n                                    totalEstimateWorth: this.state.totalEstimateWorth,\n                                    missingEstimate: this.state.missingEstimate,\n                                }\n                            }}>\n                                <MdExplore className=\"dashboard_sidebar_link_icon\" />\n                                <p className=\"dashboard_sidebar_link_text\">\n                                    Explore\n                                </p>\n                            </Link>\n                        </div> */}\n                        <div className=\"clearfix\"/>\n                        <div className=\"dashboard_sidebar_link\">\n                            <Link className=\"dashboard_sidebar_inner_link\" to={{\n                                pathname: \"/settings\",\n                                state: {\n                                    user: this.state.user,\n                                    totalEstimateWorth: this.state.totalEstimateWorth,\n                                    missingEstimate: this.state.missingEstimate,\n                                    profilePicture: this.state.profilePicture\n                                }\n                            }}>\n                                <IoSettingsSharp className={this.state.currentPage === \"settings\" ? \"dashboard_sidebar_link_icon_on dashboard_sidebar_link_icon\" : \"dashboard_sidebar_link_icon\"} />\n                                <p className={this.state.currentPage === \"settings\" ? \"dashboard_sidebar_link_icon_on dashboard_sidebar_link_text\" : \"dashboard_sidebar_link_text\"}>\n                                    Settings\n                                </p>\n                            </Link>\n                        </div>\n                        <div className=\"clearfix\"/>\n                        <div className=\"dashboard_sidebar_link\" id=\"dashboard_last\">\n                            <Link className=\"dashboard_sidebar_inner_link\" to={{\n                                pathname: \"/feedback\",\n                                state: {\n                                    user: this.state.user,\n                                    totalEstimateWorth: this.state.totalEstimateWorth,\n                                    missingEstimate: this.state.missingEstimate,\n                                    profilePicture: this.state.profilePicture\n                                }\n                            }}>\n                                <MdFeedback className={this.state.currentPage === \"feedback\" ? \"dashboard_sidebar_link_icon_on dashboard_sidebar_link_icon\" : \"dashboard_sidebar_link_icon\"} />\n                                <p className={this.state.currentPage === \"feedback\" ? \"dashboard_sidebar_link_icon_on dashboard_sidebar_link_text\" : \"dashboard_sidebar_link_text\"}>\n                                    Feedback\n                                </p>\n                            </Link>\n                        </div>\n                        <div className=\"clearfix\"/>\n                        <div id=\"dashboard_sidebar_version\">\n                            <p id=\"dashboard_sidebar_version_text\">\n                                Beta\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default DashboardSidebar;","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/SignUpPage.js",["132","133","134"],"import React from 'react';\n\nimport Login from './Login.js';\nimport NavigationBar from './NavigationBar.js';\n\nimport './CSS/SignUpPage.css';\n\nimport { Link } from \"react-router-dom\";\n\nclass SignUpPage extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div>\n                <NavigationBar/>\n                <div id=\"sign_up_page_parent\">\n                    <div id=\"sign_up_page_box\">\n                        \n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default SignUpPage;","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/NotificationSidebar.js",["135"],"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/SignUp.js",[],["136","137"],"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/Login.js",[],"/Users/eric.lin/Documents/RealEstateApp/ui/src/index.js",[],["138","139"],"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/NewPropertyForm.js",[],"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/FilesDashboard.js",["140","141","142","143","144","145"],"import React from 'react';\nimport axios from 'axios';\n\nimport './CSS/FilesDashboard.css';\nimport './CSS/Style.css';\n\nimport DashboardSidebar from './DashboardSidebar.js';\nimport NotificationSidebar from './NotificationSidebar.js';\nimport FileCard from './FileCard.js';\n\nimport ProgressBar from './../utility/ProgressBar.js';\n\nimport { MdFileDownload, MdFileUpload, MdEdit } from 'react-icons/md';\nimport { IoMdTrash, IoMdArrowDropdown } from 'react-icons/io';\nimport { IoCloseSharp, IoTrashSharp } from 'react-icons/io5';\nimport { AiFillFile, AiFillFileImage, AiFillFileExclamation, AiFillFilePdf, AiFillFileExcel, AiFillFilePpt, AiFillFileText, AiFillFileWord, AiFillFileZip } from 'react-icons/ai';\n\n/****\n * The UI is rendered using a field \"filesToDisplay\".\n * filesToDisplay is re-set every time we call renderFiles().\n * renderFiles() takes in a map of [propertyID -> []Files]\n * renderFiles() will automatically recreate the ui state and update the UI. \n * All edits to the state should be done by editing this.state.propertyToFilesMap \n * and passing it in to renderFiles(). \n */\n\nexport const openSignedURL = (userID, fileKey)  => {\n    var url = \"api/user/files/\" + userID + \"/\" + fileKey;\n    axios({\n        method: 'get',\n        url: url,\n        params: {\n            request: \"signed_url\"\n        }\n    }).then(response => {\n        var url = response.data;\n        if (url !== \"\") {\n            window.open(url, '_blank', 'noopener,noreferrer')\n        }\n    }).catch(error => console.log(error));\n}\n\n\n // isSmall is used for small icons\n export const mapFileTypeToIcon = (imageType, isSmall, isActive) => {\n    \n    var classNames = isSmall ? \"files_dashboard_upload_image_type_mini_icon\" : \"files_dashboard_upload_image_type\";\n\n    if (imageType === null || imageType === undefined) {\n        classNames += isActive? \" card_white\" : \" card_grey\";\n        return (\n            <div>\n                <AiFillFileExclamation \n                    className={classNames}>\n                </AiFillFileExclamation>\n            </div>\n        )\n    }\n\n    if (imageType.includes(\"image\")){\n        classNames += isActive? \" card_white\" : \" card_blue\";\n        return (\n            <div>\n                <AiFillFileImage \n                    className={classNames}>\n                </AiFillFileImage>\n            </div>\n        );\n    } else if (imageType.includes(\"pdf\")) {\n        classNames += isActive? \" card_white\" : \" card_red\";\n        return (\n            <div>\n                <AiFillFilePdf\n                    className={classNames}>\n                </AiFillFilePdf>\n            </div>\n        )\n    } else if (imageType.includes(\"video\")) {\n        classNames += isActive? \" card_white\" : \" card_blue\";\n        return (\n            <div>\n                <AiFillFile \n                    className={classNames}>\n                </AiFillFile>\n            </div>\n        )\n    } else if (imageType.includes(\"audio\")) {\n        classNames += isActive? \" card_white\" : \" card_blue\";\n        return (\n            <div>\n                <AiFillFile \n                    className={classNames}>\n                </AiFillFile>\n            </div>\n        )\n    } else if (imageType.includes(\"zip\")) {\n        classNames += isActive? \" card_white\" : \" card_grey\";\n        return (\n            <div>\n                <AiFillFileZip\n                    className={classNames}>\n                </AiFillFileZip>\n            </div>\n        )\n    } else if (imageType.includes(\"text\")) {\n        classNames += isActive? \" card_white\" : \" card_grey\";\n        return (\n            <div>\n                <AiFillFileText\n                    className={classNames}>\n                </AiFillFileText>\n            </div>\n        )\n    } else if (imageType.includes(\"presentation\")) {\n        classNames += isActive? \" card_white\" : \" card_orange\";\n        return (\n            <div>\n                <AiFillFilePpt\n                    className={classNames}>\n                </AiFillFilePpt>\n            </div>\n        )\n    } else if (imageType.includes(\"spreadsheet\")) {\n        classNames += isActive? \" card_white\" : \" card_green\";\n        return (\n            <div>\n                <AiFillFileExcel\n                    className={classNames}>\n                </AiFillFileExcel>\n            </div>\n        )\n    } else if (imageType.includes(\"doc\")) {\n        classNames += isActive? \" card_white\" : \" card_blue\";\n        return (\n            <div>\n                <AiFillFileWord\n                    className={classNames}>\n                </AiFillFileWord>\n            </div>\n        )\n    } else {\n        classNames += isActive? \" card_white\" : \" card_grey\";\n        return (\n            <div>\n                <AiFillFileExclamation\n                    className={classNames}>\n                </AiFillFileExclamation>\n            </div>\n        )\n    }\n}\n\nclass FilesDashboard extends React.Component {\n        \n    constructor(props) {\n        super(props);\n\n        this.state = {\n            user: this.props.location.state.user,\n            totalEstimateWorth: this.props.location.state.totalEstimateWorth,\n            missingEstimate: this.props.location.state.missingEstimate,\n            profilePicture: this.props.location.state.profilePicture,\n            sortToggleMap: [['A-Z', false]],\n            // files is the main point with how files are displayed.\n            files: [],\n            originalLoadedFiles: [],\n            propertyToFilesMap: new Map(),\n            properties: new Map(),\n            // activeFiles are files that the user has currently selected.\n            activeFiles: new Map(),\n            activeSearchFiles: [],\n            filesToDisplay: null,\n            displayUploadFileBox: false,\n            fileUploadProgressBar: 0,\n            displayUploadFileBox: false,\n            sortType: null,\n            categoryType: null,\n            categoryTypeArrowDown: true,\n            sortTypeArrowDown: true,\n            isFileLoading: true,\n            isPropertiesLoading: true,\n        };\n\n        this.setActiveFileAttributes = this.setActiveFileAttributes.bind(this);\n        this.downloadActiveFiles = this.downloadActiveFiles.bind(this);\n        this.downloadFile = this.downloadFile.bind(this);\n        this.deleteActiveFiles = this.deleteActiveFiles.bind(this);\n        this.deleteFile = this.deleteFile.bind(this);\n        this.handleSearchBar = this.handleSearchBar.bind(this);\n        this.handleFileUploadChange = this.handleFileUploadChange.bind(this);\n        this.handleFileUpload = this.handleFileUpload.bind(this);\n        this.trimTrailingFileName = this.trimTrailingFileName.bind(this);\n        this.renderFileUploadPropertiesSelection = this.renderFileUploadPropertiesSelection.bind(this);\n        this.convertPropertyToFilesMapToElements = this.convertPropertyToFilesMapToElements.bind(this);\n    }\n\n    componentDidMount() {\n        // Load our files list.\n        axios({\n            method: 'get',\n            url: 'api/user/files/' + this.state.user[\"id\"],\n        }).then(response => {\n            var filesList = response.data;\n            filesList.sort(function(a,b){\n                return new Date(b[\"metadata\"][\"last_edited_at\"]) - new Date(a[\"metadata\"][\"last_edited_at\"]);\n            })\n\n            var propertyToFilesMap = new Map();\n\n            for (var i = 0; i < filesList.length; i++) {\n\n                var file = filesList[i];\n                var propertyID = file[\"property_id\"];\n                \n                // property does not exist yet. Add it.\n                if (!propertyToFilesMap.has(propertyID)) {\n                    propertyToFilesMap.set(propertyID, []);\n                }\n\n                var filesArrAtProperty = propertyToFilesMap.get(propertyID);\n                filesArrAtProperty.push(file);\n                propertyToFilesMap.set(propertyID, filesArrAtProperty);\n            }  \n\n            this.renderFiles(propertyToFilesMap);\n\n            this.setState({\n                files: filesList.slice(),\n                originalLoadedFiles: filesList.slice(),\n                // sort our properties map by alphabetical order, except leave General as last.\n                propertyToFilesMap: propertyToFilesMap,\n                isFileLoading: false\n            });\n        }).catch(error => {\n            this.setState({\n                isFileLoading: false\n            })\n            console.log(error);\n        });\n\n        // Load our properties list.\n        axios({\n            method: 'get',\n            url:  'api/user/property/' + this.state.user[\"id\"],\n        }).then(response => {\n            var propertiesList = response.data;\n\n            var propertiesMap = new Map();\n            for (var i = 0; i < propertiesList.length; i++) {\n                var propertyID = propertiesList[i][\"id\"];\n                var propertyAddress = propertiesList[i][\"address\"];\n                propertiesMap.set(propertyID, propertyAddress);\n            }\n            this.setState({\n                properties: [...propertiesMap],\n                isPropertiesLoading: false\n            });\n        }).catch(error => {\n            console.log(error);\n            this.setState({\n                isPropertiesLoading: false\n            })\n        });\n    }\n    \n    downloadFile(value, key, map) {\n        var url = \"api/user/files/\" + this.state.user[\"id\"] + \"/\" + key;\n        axios({\n            method: 'get',\n            url: url,\n            params: {\n                request: \"download\"\n            },\n            responseType: 'blob'\n        }).then(response => {\n            // Downloads the file\n            // Credit: https://gist.github.com/javilobo8/097c30a233786be52070986d8cdb1743\n            const url = window.URL.createObjectURL(new Blob([response.data]));\n            const link = document.createElement('a');\n            link.href = url;\n            const contentDisposition = response.headers['content-disposition'];\n            let fileName = 'unknown';\n            if (contentDisposition) {\n                const fileNameMatch = contentDisposition.match(/filename='(.+)'/);\n                if (fileNameMatch.length === 2)\n                    fileName = fileNameMatch[1];\n            }\n            link.setAttribute('download', fileName); //or any other extension\n            document.body.appendChild(link);\n            link.click();\n        }).catch(error => console.log(error));\n    }\n\n    downloadActiveFiles() {\n        this.state.activeFiles.forEach(this.downloadFile)\n    }\n\n    async deleteFile(key) {\n        var url = \"api/user/files/\" + this.state.user[\"id\"] + \"/\" + key;\n        var success = false;\n        await axios({\n            method: 'delete',\n            url: url,\n        }).then(response => {\n            if (response.status === 200) {\n                success = true;\n                return success;\n            }\n        }).catch(error => console.log(error));\n        return success;\n    }\n\n    async deleteActiveFiles() {\n        var currFiles = this.state.files;\n        var activeFiles = this.state.activeFiles;\n        var activeFilesIterator = activeFiles.entries();\n        var currPropertyToFilesMap = new Map([...this.state.propertyToFilesMap]);\n\n        var nextElem = activeFilesIterator.next();\n        while (nextElem !== null && nextElem.value !== undefined) {\n            var key = nextElem.value[0];\n            var success = await this.deleteFile(key);\n            if (success === true) {\n                activeFiles.delete(key);\n                var propertyID = nextElem.value[1][\"property_id\"];\n                var arrAtPropertyID = currPropertyToFilesMap.get(propertyID);\n                \n                var arrAtPropertyIDLength = arrAtPropertyID.length;\n                for (var i = 0; i < arrAtPropertyIDLength; i++) {\n                    var fKey = arrAtPropertyID[i][\"property_id\"] + \"/\" + arrAtPropertyID[i][\"name\"]\n                    if (key === fKey) {\n                        arrAtPropertyID.splice(i, 1);\n                        currPropertyToFilesMap.set(propertyID, arrAtPropertyID);\n                        break;\n                    }\n                }\n\n                for (var i = 0; i < currFiles.length; i++) {\n                    // When we filter by properties, we inject <div> elements which do not have a state.\n                    // Add this check to filter them out. \n                    var file = currFiles[i];\n                    var fKey = file[\"property_id\"] + \"/\" + file[\"name\"];\n                    if (key === fKey) {\n                        currFiles.splice(i, 1);\n                        continue;\n                    }\n                }\n            }\n            nextElem = activeFilesIterator.next();\n        }\n        this.renderFiles(currPropertyToFilesMap);\n\n        this.setState({\n            files: [...currFiles],\n            activeFiles: [...activeFiles],\n            propertyToFilesMap: currPropertyToFilesMap\n        });\n    }\n\n    handleFileUploadChange(event) {\n        var file = event.target.files[0];\n        if (file !== null && file !== undefined) {\n            this.setState({\n                fileToUpload: file\n            })\n        }\n    }\n     \n    handleFileUpload() {\n        var file = this.state.fileToUpload;\n        if (file === null || file === undefined) {\n            return;\n        }\n\n        var nameInput = document.getElementById(\"files_dashboard_upload_file_name_input\");\n        var nameInputValue = nameInput.value;\n\n        var fileName = file[\"name\"];\n        if (nameInputValue !== \"\") {\n            fileName = nameInputValue;\n        }\n\n        var propertySelect = document.getElementById(\"files_dashboard_upload_file_property_select\");\n        var propertySelectValue = propertySelect.value;\n        var propertySelectAddress = propertySelect.options[propertySelect.selectedIndex].text;\n\n        var fileCategorySelect = document.getElementById(\"files_dashboard_upload_file_category_select\");\n        var fileCategorySelectValue = fileCategorySelect.value;\n\n        var yearInput = document.getElementById(\"files_dashboard_upload_file_year_input\");\n\n        // Year sanitization is handled server side. If empty, server will fill in with current year. \n        var yearInputValue = yearInput.value;\n\n        // var signedURL;\n        // axios({\n        //     method: 'get',\n        //     url: 'api/user/files/upload/' + this.state.user[\"id\"] + '/' + propertySelectValue + '?file_name=' + fileName,\n        // }).then(response => {\n        //     signedURL = response.data;\n        //     axios({\n        //         method: 'put',\n        //         url: signedURL,\n        //         data: file\n        //     }).then(signedURLResponse => {\n        //         console.log(signedURLResponse);\n        //     }).catch(signedURLError => {\n        //         console.log(signedURLError);\n        //     });\n        // }).catch(error => {\n        // });\n\n        var formData = new FormData();\n        formData.append('file', file);\n        formData.append('property_id', propertySelectValue);\n        formData.append('file_category', fileCategorySelectValue);\n        formData.append('file_type', file[\"type\"]);\n        formData.append('address', propertySelectAddress);\n        formData.append('year', yearInputValue);\n\n\n        // If user wants to override the default name.\n        if (nameInputValue !== \"\") {\n            formData.append('file_name', nameInputValue);\n        }\n\n        axios({\n            method: 'post',\n            url: 'api/user/files/upload/' + this.state.user[\"id\"],\n            config: {\n                headers: {\n                    'Content-Type': 'multipart/form-data'\n                },\n            },\n            onUploadProgress: (progressEvent) => {\n                // Use Math.min because we currently upload to the server, then upload to GCS. The GCS step can take a while,\n                // but this only tracks progress from client -> server. Stop it at 90, then finish the last 10 once we \n                // successfully write to GCS.\n                var progressCompleted = Math.min(Math.round((progressEvent.loaded * 100) / progressEvent.total), 98);\n                this.setState({\n                    fileUploadProgressBar: progressCompleted\n                })\n            },\n            data: formData\n        }).then(response => {\n            var currFiles = this.state.propertyToFilesMap;\n            if (!currFiles.has(propertySelectValue)) {\n                currFiles.set(propertySelectValue, []);\n            }\n\n            var propertyArr = currFiles.get(propertySelectValue);\n            propertyArr.unshift(response.data);\n\n            currFiles.set(propertySelectValue, propertyArr);\n\n            var files = this.state.files;\n            files.push(response.data);\n\n            this.renderFiles(currFiles);\n\n            this.setState({\n                files: [...files],\n                displayUploadFileBox: false,\n                fileToUpload: null,\n                fileUploadProgressBar: 0,\n                propertyToFilesMap: currFiles\n            })\n        }).catch(error => console.log(error));\n    }\n\n    trimTrailingFileName(fileName) {\n        if (fileName.length > 20) {\n            return fileName.substring(0,20) + \"...\";\n        }\n        return fileName;\n    }\n\n    renderFileUploadPropertiesSelection() {\n        return (\n            this.state.properties.map((property, i) => \n            <option name={property[1]} key={property[1] + i} value={property[0]}>{property[1]}</option>\n        ))\n    }\n\n    handleSearchBar(e) {\n        var searchValue = e.target.value.toLowerCase().replace(/\\s/g, \"\");\n\n        this.setState({\n            activeSearchFiles: this.state.filesToDisplay.filter(file => {\n                return (file.props && file.props.data) ? file.props.data.state.file[\"name\"].toLowerCase().replace(/\\s/g, \"\").startsWith(searchValue) : file;\n            })\n        })\n    }\n\n    renderActiveSearchFiles() {\n        return this.state.activeSearchFiles.length > 0 ? this.state.activeSearchFiles : this.renderNoFiles();\n    }\n\n\n    // file Key = propertyID + '/' + fileName\n    setActiveFileAttributes(fileKey, file, toRemove) {\n        var currentActiveFiles = this.state.activeFiles;\n        if (currentActiveFiles === null || currentActiveFiles === undefined || currentActiveFiles.length === 0) {\n            currentActiveFiles = new Map();\n        }\n        if (currentActiveFiles.size >= 25 && !toRemove) {\n            return false\n        }\n        if (!toRemove) {\n            currentActiveFiles.set(fileKey, file);\n        } else {\n            // Remove from active (\"unclicked\")\n            currentActiveFiles.delete(fileKey);\n        }\n        this.setState({\n            activeFiles: currentActiveFiles\n        })\n        return true;\n    }\n\n    renderNoFiles() {\n        return (\n            <div id=\"files_dashboard_no_files_box\">\n                <p id=\"files_dashboard_no_files_box_title\">\n                    No Files\n                </p>\n            </div>\n        );\n    }\n\n    enforceYearInput(e) {\n        e.target.value = e.target.value > 4 ? e.target.value.slice(0, 4) : e.target.value;\n    }\n\n    handleSortOptionsHelper(newPropertyToFilesMap, sortType, arrowDown) {\n\n        newPropertyToFilesMap.forEach((key, value, map) => {\n            \n            // key is an array of html elements containing files.\n            var files = key;\n\n            switch (sortType) {\n                case \"A-Z\":\n                    files.sort(function(a,b) {\n                        if (a[\"name\"] > b[\"name\"]) {\n                            return arrowDown ? 1 : -1;\n                        } else if (b[\"name\"] > a[\"name\"]){\n                            return arrowDown ? -1 : 1;\n                        }\n                        return 0;\n                    })\n                    break;\n                case \"Uploaded Date\":\n                    files.sort(function(a,b) {\n                        return arrowDown ? \n                        new Date(a[\"metadata\"][\"uploaded_at\"]) - new Date(b[\"metadata\"][\"uploaded_at\"]) :\n                        new Date(b[\"metadata\"][\"uploaded_at\"]) - new Date(a[\"metadata\"][\"uploaded_at\"]);\n                    })\n                    break;\n                case \"Last Edited Date\":\n                    files.sort(function(a,b) {\n                        return arrowDown ?\n                        new Date(a[\"metadata\"][\"last_edited_at\"]) - new Date(b[\"metadata\"][\"last_edited_at\"]) :\n                        new Date(b[\"metadata\"][\"last_edited_at\"]) - new Date(a[\"metadata\"][\"last_edited_at\"]);\n                    })\n                    break;\n            }\n        });\n        return newPropertyToFilesMap; \n    }\n\n    /* handleSortOptions is a state machine handler. There are three possible \n    /* states that our Sort button can be in. \n    /* State 1: Default: (Sort V) (V is the down Arrow)\n    /* State 2: After click: (SORT_TYPE V), for example (A-Z V)\n    /* State 3: After secondary click: (SORT_TYPE ^) (^ is the up Arrow)\n    /* We cycle between these states */\n    handleSortOptions(sortType) {\n\n        var sortTypeArrowDown = this.state.sortTypeArrowDown;\n        var newPropertyToFilesMap;\n\n        if (this.state.sortType === null || this.state.sortType === undefined || this.state.sortType !== sortType) {\n            newPropertyToFilesMap = this.handleSortOptionsHelper(this.state.propertyToFilesMap, sortType, true);\n            sortTypeArrowDown = true;\n        } else if (sortTypeArrowDown){\n            newPropertyToFilesMap = this.handleSortOptionsHelper(this.state.propertyToFilesMap, sortType, false);\n            sortTypeArrowDown = false;\n        } else if (!sortTypeArrowDown) {\n            // we sort by last edited date by default.\n            newPropertyToFilesMap = this.handleSortOptionsHelper(this.state.propertyToFilesMap, \"Last Edited Date\", true);\n            sortType = null;\n            sortTypeArrowDown = true;\n        }\n\n        this.renderFiles(newPropertyToFilesMap);\n\n        this.setState({\n            sortType: sortType,\n            displaySortBox: false,\n            sortTypeArrowDown: sortTypeArrowDown,\n            propertyToFilesMap: newPropertyToFilesMap,\n        })\n    }\n\n    convertPropertyToFilesMapToElements(propertyToFilesMap) {\n\n        var files = [];\n        var generalArr = [];\n        propertyToFilesMap.forEach((key, value, map) => {\n            // key is an array of html elements; value is the propertyID.\n            var tempElementsArr = [];\n            var propertyID;\n            var propertyAddress;\n            var propertyName;\n            \n            for (var i = 0; i < key.length; i++) {\n                var file = key[i];\n                propertyID = file[\"property_id\"];\n                propertyAddress = file[\"address\"];\n                propertyName = file[\"name\"]\n                tempElementsArr.push(\n                    <FileCard key={propertyID + \"/\" + propertyName} data={{\n                        state: {\n                            user: this.state.user,\n                            file: file,\n                            backgroundColor: \"white\",\n                            setActiveFileAttributes: this.setActiveFileAttributes,\n                            openSignedURL: openSignedURL, \n                            mapFileTypeToIcon: mapFileTypeToIcon\n                        }                       \n                    }}/>\n                )\n            }\n            // Add our clearfix.\n            tempElementsArr.concat(\n                <div className=\"clearfix\"/>\n            );\n\n            tempElementsArr.unshift(\n                <div key={propertyID + i}>\n                    <div className=\"files_dashboard_property_sort_title\">\n                        {propertyAddress}\n                    </div>\n                    <div className=\"clearfix\"/>\n                </div>\n            );\n\n            // place general at the front.\n            if (value === \"general\") {\n                generalArr = tempElementsArr;\n                return;\n            }\n            files = files.concat(tempElementsArr);\n        })\n\n        files = generalArr.concat(files);\n        // files.unshift(generalArr);\n        return files;\n    }\n\n    renderFiles(propertyToFilesMap) {\n        this.setState({\n            filesToDisplay: [...this.convertPropertyToFilesMapToElements(propertyToFilesMap)]\n        })\n    }\n\n    // renderSortOptions() {\n        \n    //     var options = [];\n    //     var sortTypes = ['A-Z', 'Uploaded Date', 'Last Edited At'];\n\n    //     for (var i = 0; i < sortTypes.length; i++) {\n    //         var sortType = sortTypes[i];\n    //         options.push(\n    //             <li key={\"sort\" + i} className={\n    //                 this.state.sortType === {sortType} ?\n    //                 \"files_dashboard_sort_options_list files_dashboard_sort_focus\" : \n    //                 \"files_dashboard_sort_options_list\"\n    //             }\n    //             onClick={this.handleSortOptions({sortType})}\n    //             >{sortType}</li>\n    //         );\n    //     }\n    //     return (<div>\n    //         {options}\n    //     </div>);\n    // }\n\n    renderUploadBox() {\n        return (\n            <div id=\"files_dashboard_upload_file_box\">\n                <div id=\"files_dashboard_upload_file_left_box\">\n                    <label htmlFor=\"files_dashboard_upload_file_button\" id=\"files_dashboard_upload_file_button_label\">\n                        {this.state.fileToUpload ? \n                            <div alt={this.state.fileToUpload[\"name\"] ? this.state.fileToUpload[\"name\"] : \"Unknown File\"}>\n                                <div>\n                                    {this.mapFileTypeToIcon(this.state.fileToUpload[\"type\"], false)}\n                                </div>\n                                <p id=\"files_dashboard_uploaded_file_name\">\n                                    {this.state.fileToUpload[\"name\"] ? this.trimTrailingFileName(this.state.fileToUpload[\"name\"]) : \"Unable to Upload File\"}\n                                </p>\n                            </div> : \n                            <div>\n                                <MdFileUpload id=\"files_dashboard_upload_file_icon\"></MdFileUpload>\n                                <p id=\"files_dashboard_upload_file_title\">\n                                    Choose File\n                                </p>\n                            </div>}\n                    </label>\n                    <input id=\"files_dashboard_upload_file_button\" type=\"file\" onChange={this.handleFileUploadChange}></input>\n                </div>\n                <div id=\"files_dashboard_upload_file_right_box\">\n                    <div>\n                        <p id=\"files_dashboard_upload_file_label\">Upload a File</p>\n                        <IoCloseSharp \n                            id=\"files_dashboard_upload_file_close_icon\" \n                            onClick={() => \n                                this.setState({\n                                    displayUploadFileBox: false,\n                                    fileToUpload: null\n                                })}>\n                        </IoCloseSharp>\n                        <div id=\"files_dashboard_upload_file_final_button\" onClick={this.handleFileUpload}>\n                            Upload\n                        </div>\n                    </div>\n                    <input \n                        id=\"files_dashboard_upload_file_name_input\"\n                        placeholder={this.state.fileToUpload && this.state.fileToUpload[\"name\"] ? this.state.fileToUpload[\"name\"] : \"File Name\"} \n                        className={this.state.fileToUpload && this.state.fileToUpload[\"name\"] ? \"upload_file_input dark_placeholder\" : \"upload_file_input\"}>\n                    </input>\n                    <br></br>\n                    <select id=\"files_dashboard_upload_file_property_select\" className=\"upload_file_select\">\n                        <option value=\"\" disabled selected>Property</option>\n                        <option name=\"general\" value=\"general\">General</option>\n                        {this.renderFileUploadPropertiesSelection()}\n                    </select>\n                    <br></br>\n                    <select id=\"files_dashboard_upload_file_category_select\" className=\"upload_file_select_half_left\">\n                        <option value=\"\" disabled selected>File Type</option>\n                        <option name=\"mortgage\" value=\"mortgage\">Mortgage</option>\n                        <option name=\"contracting\" value=\"contracting\">Contracting</option>\n                        <option name=\"property\" value=\"property\">Property</option>\n                        <option name=\"receipts\" value=\"receipts\">Receipts</option>\n                        <option name=\"repairs\" value=\"repairs\">Repairs</option>\n                        <option name=\"taxes\" value=\"taxes\">Taxes</option>\n                        <option name=\"other\" value=\"other\">Other</option>\n                    </select>\n                    <input \n                        id=\"files_dashboard_upload_file_year_input\" \n                        className=\"upload_file_input_half_right\" \n                        type=\"number\" \n                        maxlength=\"4\"\n                        onChange={this.enforceYearInput}\n                        placeholder=\"Year\">\n                    </input>\n                    <div className=\"clearfix\"/>\n                </div>\n                <div className=\"clearfix\"></div>\n                <ProgressBar id=\"upload_file_progress_bar\" bgColor=\"#296CF6\" completed={this.state.fileUploadProgressBar}></ProgressBar>\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <div>\n                <DashboardSidebar data={{\n                    state: {\n                        user: this.state.user,\n                        totalEstimateWorth: this.state.totalEstimateWorth,\n                        missingEstimate: this.state.missingEstimate,\n                        profilePicture: this.state.profilePicture,\n                        currentPage: \"files\"\n                    }\n                }}/>\n                <div id=\"files_dashboard_parent_box\">\n                    <div id=\"files_dashboard_welcome_box\">\n                        <p id=\"files_dashboard_welcome_box_title\">\n                            Files\n                        </p>\n                        <input id=\"files_dashboard_search_bar\" placeholder=\"Search...\" onChange={this.handleSearchBar}>\n                        </input>\n                    </div>\n                    <div className=\"clearfix\"/>\n\n                    {this.state.isFileLoading || this.state.isPropertiesLoading ? <div></div> : \n                    <div>\n                        <div id=\"files_dashboard_icons_box\">\n                            <div   \n                                id=\"files_dashboard_category_parent\"\n                                className=\"files_dashboard_filter_and_sort_box\" \n                                onMouseEnter={() => this.setState({displayCategoryBox: true})} \n                                onMouseLeave={() => this.setState({displayCategoryBox: false})}>\n                                <div \n                                    id=\"files_dashboard_sort\" \n                                    className={\n                                            this.state.displayCategoryBox ? \n                                            \"square_bottom_borders display_sort_box files_dashboard_category_and_sort\" : \n                                            (\n                                                this.state.categoryType ? \n                                                \"display_sort_box files_dashboard_category_and_sort\" : \n                                                \"files_dashboard_category_and_sort\"\n                                            )}\n                                    onClick={() => {\n                                        if (this.state.sortType) {\n                                            this.handleSortOptions(this.state.sortType);\n                                            }}\n                                        }\n                                        >\n                                    <p className=\"files_dashboard_sort_text\">\n                                        {this.state.categorType ? this.state.categoryType : \"Category\"}\n                                    </p>\n                                    <IoMdArrowDropdown id=\"files_dashboard_sort_icon\" className={this.state.categoryTypeArrowDown ? \"\" : \"files_dashboard_sort_icon_up\"}></IoMdArrowDropdown>\n\n                                </div>\n                            </div>\n                            {\n                                this.state.displayCategoryBox ? \n                                <div \n                                    id=\"files_dashboard_category_options_box\" \n                                    className=\"files_dashboard_category_and_sort_options_box\"\n                                    onMouseEnter={() => this.setState({displayCategoryBox: true})} \n                                    onMouseLeave={() => this.setState({displayCategoryBox: false})}>\n                                    <li className={\n                                            this.state.categoryType === \"Mortgage\" ? \n                                            \"files_dashboard_sort_options_list files_dashboard_sort_focus\" : \n                                            \"files_dashboard_sort_options_list\"\n                                        } \n                                        onClick={() => this.handleCategoryOptions(\"Mortgage\")}>\n                                        Mortgage\n                                    </li>\n                                    <li className={\n                                            this.state.categoryType === \"Contracting\" ? \n                                            \"files_dashboard_sort_options_list files_dashboard_sort_focus\" :\n                                            \"files_dashboard_sort_options_list\"\n                                        } \n                                        onClick={() => this.handleCategoryOptions(\"Contracting\")}>\n                                        Contracting\n                                    </li>\n                                    <li className={\n                                            this.state.categoryType === \"Property\" ?\n                                            \"files_dashboard_sort_options_list files_dashboard_sort_focus\" :\n                                            \"files_dashboard_sort_options_list\"\n                                        } onClick={() => this.handleCategoryOptions(\"Property\")}>\n                                        Property\n                                    </li>\n                                    <li className={\n                                            this.state.categoryType === \"Receipts\" ?\n                                            \"files_dashboard_sort_options_list files_dashboard_sort_focus\" :\n                                            \"files_dashboard_sort_options_list\"\n                                        } onClick={() => this.handleCategoryOptions(\"Receipts\")}>\n                                        Receipts\n                                    </li>\n                                    <li className={\n                                            this.state.categoryType === \"Repairs\" ?\n                                            \"files_dashboard_sort_options_list files_dashboard_sort_focus\" :\n                                            \"files_dashboard_sort_options_list\"\n                                        } onClick={() => this.handleCategoryOptions(\"Repairs\")}>\n                                        Repairs\n                                    </li>\n                                    <li className={\n                                            this.state.categoryType === \"Taxes\" ?\n                                            \"files_dashboard_sort_options_list files_dashboard_sort_focus\" :\n                                            \"files_dashboard_sort_options_list\"\n                                        } onClick={() => this.handleCategoryOptions(\"Taxes\")}>\n                                        Taxes\n                                    </li>\n                                    <li className={\n                                            this.state.categoryType === \"Other\" ?\n                                            \"files_dashboard_sort_options_list files_dashboard_sort_focus\" :\n                                            \"files_dashboard_sort_options_list\"\n                                        } onClick={() => this.handleCategoryOptions(\"Other\")}>\n                                        Other\n                                    </li>\n                                </div> : \n                                <div></div>\n                            }\n                            <div \n                                id=\"files_dashboard_sort_parent\"\n                                className=\"files_dashboard_filter_and_sort_box\" \n                                onMouseEnter={() => this.setState({displaySortBox: true})} \n                                onMouseLeave={() => this.setState({displaySortBox: false})}>\n                                <div \n                                    className={\n                                            this.state.displaySortBox ? \n                                            \"square_bottom_borders display_sort_box files_dashboard_category_and_sort\" : \n                                            (\n                                                this.state.sortType ? \n                                                \"display_sort_box files_dashboard_category_and_sort\" : \n                                                \"files_dashboard_category_and_sort\"\n                                            )}\n                                    onClick={() => {\n                                        if (this.state.sortType) {\n                                            this.handleSortOptions(this.state.sortType);\n                                            }}\n                                        }\n                                        >\n                                    <p className=\"files_dashboard_sort_text\">\n                                        {this.state.sortType ? this.state.sortType : \"Sort\"}\n                                    </p>\n                                    <IoMdArrowDropdown id=\"files_dashboard_sort_icon\" className={this.state.sortTypeArrowDown ? \"\" : \"files_dashboard_sort_icon_up\"}></IoMdArrowDropdown>\n                                    \n                                </div>\n                            </div>\n                            {\n                                this.state.displaySortBox ? \n                                <div \n                                    id=\"files_dashboard_sort_options_box\" \n                                    className=\"files_dashboard_category_and_sort_options_box\"\n                                    onMouseEnter={() => this.setState({displaySortBox: true})} \n                                    onMouseLeave={() => this.setState({displaySortBox: false})}>\n                                    {/* {this.renderSortOptions()} */}\n                                    <li className={\n                                            this.state.sortType === \"A-Z\" ? \n                                            \"files_dashboard_sort_options_list files_dashboard_sort_focus\" : \n                                            \"files_dashboard_sort_options_list\"\n                                        } \n                                        onClick={() => this.handleSortOptions(\"A-Z\")}>\n                                        A-Z\n                                    </li>\n                                    <li className={\n                                            this.state.sortType === \"Uploaded Date\" ? \n                                            \"files_dashboard_sort_options_list files_dashboard_sort_focus\" :\n                                            \"files_dashboard_sort_options_list\"\n                                        } \n                                        onClick={() => this.handleSortOptions(\"Uploaded Date\")}>\n                                        Uploaded Date\n                                    </li>\n                                    <li className={\n                                            this.state.sortType === \"Last Edited Date\" ?\n                                            \"files_dashboard_sort_options_list files_dashboard_sort_focus\" :\n                                            \"files_dashboard_sort_options_list\"\n                                        } onClick={() => this.handleSortOptions(\"Last Edited Date\")}>\n                                        Last Edited Date\n                                    </li>\n                                </div> : \n                                <div></div>\n                            }\n                            <div className=\"files_dashboard_upload_file_text_button\" onClick={() => this.setState({displayUploadFileBox: true})}>Add File</div>\n                            {this.state.activeFiles.size >= 1 ?\n                                <IoTrashSharp className=\"files_dashboard_icons\" onClick={() => this.deleteActiveFiles()}></IoTrashSharp> : \n                                <div></div>}\n                            {this.state.activeFiles.size >= 1 ? \n                                <MdFileDownload className=\"files_dashboard_icons\" onClick={() => this.downloadActiveFiles()}></MdFileDownload> : \n                                <div></div>\n                            }\n                            {this.state.activeFiles.size === 1 ? \n                                <MdEdit className=\"files_dashboard_icons\"></MdEdit> : \n                                <div></div>\n                            }\n                        </div>\n                        <div className=\"clearfix\"/>\n                        {this.state.displayUploadFileBox ? \n                        this.renderUploadBox()\n                         : <div></div>}\n                        <div className=\"clearfix\"/>\n                        <div id=\"files_dashboard_files_box\">\n                            {\n                                this.state.isLoading ? \n                                <div></div> : \n                                (\n                                    (this.state.activeSearchFiles.length > 0 || document.getElementById(\"files_dashboard_search_bar\").value !== \"\") ? \n                                    this.renderActiveSearchFiles() :\n                                    (this.state.files ?\n                                    this.state.filesToDisplay : \n                                    this.renderNoFiles()\n                                    )\n                                )\n                            }\n                        </div>\n                    </div>}\n                    <NotificationSidebar data={{\n                        state: {\n                            totalEstimateWorth: this.state.totalEstimateWorth,\n                            missingEstimate: this.state.missingEstimate \n                        }\n                    }}/>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default FilesDashboard;","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/MainDashboard.js",["146","147","148","149","150","151","152","153","154","155"],"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/PropertiesDashboard.js",["156","157","158","159","160","161","162","163","164","165"],"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/SettingsDashboard.js",["166"],"import React from 'react';\nimport axios from 'axios';\n\nimport './CSS/SettingsDashboard.css';\nimport './CSS/Style.css';\n\nimport DashboardSidebar from './DashboardSidebar.js';\n\nimport { MdEdit, MdEmail } from 'react-icons/md';\nimport { ImUser } from 'react-icons/im';\nimport { AiFillClockCircle } from 'react-icons/ai';\nimport { BsFillAwardFill } from 'react-icons/bs';\nimport { RiUser3Fill } from 'react-icons/ri';\nimport { IoMdSettings, IoMdNotifications, IoIosSend } from 'react-icons/io';\nimport { FaUserTie, FaBuilding } from 'react-icons/fa';\n\nconst general = \"general\";\nconst email = \"email\";\nconst notifications = \"notifications\";\nconst plan = \"plan\";\n\nclass SettingsDashboard extends React.Component {\n    \n    /***\n     * At a top level, a user's settings are split into\n     * 2 types: user information and user preferences.\n     * User information is stored (and changes to should affect\n     * the Users table.\n     * User preferences is stored in a field within the users table\n     * called settings that is a json field (unstructured).\n     */\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            user: this.props.location.state.user,\n            totalEstimateWorth: this.props.location.state.totalEstimateWorth,\n            missingEstimate: this.props.location.state.missingEstimate,\n            profilePicture: this.props.location.state.profilePicture,\n            toDisplay: general,\n            editGeneral: false,\n            checkboxStates: new Map(\n                [{'receive_digest': true}, \n                {'receive_marketing': true},\n                {'receive_newsletter': true},\n                {'receive_rent_pay_date': true},\n                {'receive_mortgage_pay_date': true},\n                {'receive_property_value': true}]),\n            originalCheckboxStates: new Map(),\n            starterPlanActive: false,\n            professionalPlanActive: false,\n            enterprisePlanActive: false,\n            isLoading: true\n        };\n\n        this.handleFieldChange = this.handleFieldChange.bind(this);\n        this.handleProfilePictureChange = this.handleProfilePictureChange.bind(this);\n        this.capitalizeName = this.capitalizeName.bind(this);\n        this.getJoinedAt = this.getJoinedAt.bind(this);\n        this.handleCheckboxChange = this.handleCheckboxChange.bind(this);\n        this.convertCheckboxMapToObject = this.convertCheckboxMapToObject.bind(this);\n        this.deepCopyMap = this.deepCopyMap.bind(this);\n        this.updateUserSettingsProfile = this.updateUserSettingsProfile.bind(this);\n        this.updateUserSettingsPreferences = this.updateUserSettingsPreferences.bind(this);\n        this.mapsAreEqual = this.mapsAreEqual.bind(this);\n    }\n\n    componentDidMount() {\n        var url = '/api/user/settings/preferences/' + this.state.user[\"id\"];\n        axios({\n            method: 'get',\n            url: url,\n        }).then(response => {\n            var data = response.data;\n\n            // data is a map in the format.\n            // map[string]map[string]interface{}\n            // Example: \n            // data: {\n            //      \"emails\": {\n            //          \"receive_digest\": true,\n            //          \"receive_marketing\": true,\n            //      },\n            //      \"notifications\": {\n            //          \"property_value\": true\n            //      }\n            // }\n\n            var checkboxMap = new Map();\n            checkboxMap.set('receive_digest', data[\"emails\"][\"receive_digest\"]);\n            checkboxMap.set('receive_marketing', data[\"emails\"][\"receive_marketing\"]);\n            checkboxMap.set('receive_newsletter', data[\"emails\"][\"receive_newsletter\"]);\n            checkboxMap.set('rent_pay_date', data[\"notifications\"][\"rent_pay_date\"]);\n            checkboxMap.set('mortgage_pay_date', data[\"notifications\"][\"mortgage_pay_date\"]);\n            checkboxMap.set('property_value', data[\"notifications\"][\"property_value\"]);\n\n            // originalCheckboxMap gives us a reference to what is loaded for the user, since user\n            // actions will modify checkboxStates directly. When we \"save\" their changes, we need to\n            // make sure we update this map as well or it will override their changes until a page reload.\n            var originalCheckboxMap = this.deepCopyMap(checkboxMap);\n\n            this.setState({\n                checkboxStates: checkboxMap,\n                originalCheckboxStates: originalCheckboxMap,\n                isLoading: false\n            });\n        }).catch(error =>{\n            this.setState({\n                displayErrorMessage: true,\n                isLoading: false,\n            });\n        });\n\n        // axios({\n        //     method: 'get',\n        //     url: '/api/user/settings/profile/picture/' + this.state.user[\"id\"],\n        // }).then(response => {\n        //     var src = response.data;\n        //     this.setState({\n        //         profilePicture: src\n        //     })\n        // }).catch(error => console.log(error))\n    }\n\n    updateUserSettingsProfile() {\n\n        var editFirstNameInput = document.getElementById(\"edit_first_name_input\")\n        var editLastNameInput = document.getElementById(\"edit_last_name_input\")\n        var editEmailInput = document.getElementById(\"edit_email_input\")\n        var editPasswordInput = document.getElementById(\"edit_password_input\")\n\n        var editFirstNameInputValue = editFirstNameInput.value;\n        var editLastNameInputValue = editLastNameInput.value;\n        var editEmailInputValue = editEmailInput.value;\n        var editPasswordInputValue = editPasswordInput.value;\n\n        let formData = new FormData();\n        \n        if (editFirstNameInputValue !== \"\") {\n            formData.append(\"first_name\", editFirstNameInputValue)\n        }\n        if (editLastNameInputValue !== \"\") {\n            formData.append(\"last_name\", editLastNameInputValue)\n        }\n        if (editEmailInputValue !== \"\") {\n            formData.append(\"email\", editEmailInputValue)\n        }\n        if (editPasswordInputValue !== \"\") {\n            formData.append(\"password\", editPasswordInputValue)\n        }\n\n        var url = 'api/user/settings/profile/' + this.state.user[\"id\"];\n        axios({\n            method: 'put',\n            url: url,\n            data: formData\n        }).then(response => {\n            console.log(response);\n            if (response.status === 200) {\n                // response.data contains the fields which were successfully changed.\n\n                var editedFields = response.data;\n                var user = this.mergeUser(this.state.user, editedFields);\n                \n                this.setState({\n                    user: user,\n                    editGeneral: false,\n                })\n            }\n        }).catch(error => {\n            console.log(error);\n        });\n    }\n\n    mergeUser(originalUser, editedFields) {\n        for (const [key, value] of Object.entries(editedFields)) {\n            originalUser[key] = value;\n        }\n        return originalUser;\n    }\n    \n    // updateUserSettingsPreferences updates the 'settings' field within the users table.\n    updateUserSettingsPreferences() {\n\n        // No changes to the settings made by the user, just return. \n        if (this.mapsAreEqual(this.state.checkboxStates, this.state.originalCheckboxStates)) {\n            this.setState({\n                editNotifications: false,\n                editEmail: false\n            })\n            return;\n        }\n\n        let formData = new FormData();\n\n        var checkboxStatesObject = this.convertCheckboxMapToObject(this.state.checkboxStates);\n        formData.append('settings', JSON.stringify(checkboxStatesObject));\n\n        var url = 'api/user/settings/preferences/' + this.state.user[\"id\"];\n        axios({\n            method: 'put',\n            url: url,\n            data: formData\n        }).then(response => {\n            if (response.status === 200) {\n                this.setState({\n                    editEmail: false,\n                    editNotifications: false\n                })\n            }\n        }).catch(error => {\n            console.log(error);\n        });\n    }\n\n    mapsAreEqual(map1, map2) {\n        var testVal;\n        if (map1.size !== map2.size) {\n            return false;\n        }\n\n        for (var [key, val] of map1) {\n            testVal = map2.get(key);\n            // in cases of an undefined value, make sure the key\n            // actually exists on the object so there are no false positives\n            if (testVal !== val || (testVal === undefined && !map2.has(key))) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    convertCheckboxMapToObject(checkboxMap) {\n\n        // TODO: el (do we need to convert our response to a map, then back to object? Maybe we can just keep it as an\n        // object).\n        var obj = {\n            \"emails\": {\n                \"receive_digest\": checkboxMap.get(\"receive_digest\"),\n                \"receive_marketing\": checkboxMap.get(\"receive_marketing\"),\n                \"receive_newsletter\": checkboxMap.get(\"receive_newsletter\")\n            },\n            \"notifications\": {\n                \"rent_pay_date\": checkboxMap.get(\"rent_pay_date\"),\n                \"mortgage_pay_date\": checkboxMap.get(\"mortgage_pay_date\"),\n                \"property_value\": checkboxMap.get(\"property_value\")\n            }\n        };\n        return obj;\n    }\n\n    // deepCopyMap will create a deep copy of the input map.\n    deepCopyMap(originalMap) {\n        var newMap = new Map();\n        originalMap.forEach((value, key, map) => {\n            newMap.set(key, value);\n        })\n        return newMap;\n    }\n\n    handleProfilePictureChange(e) {\n        var file = e.target.files[0];\n        var url = '/api/user/settings/profile/picture/' + this.state.user[\"id\"];\n        let formData = new FormData();\n        formData.append('file', file);\n\n        axios({\n            method: 'post',\n            url: url,\n            data: formData\n        }).then(response => {\n            if (response.status === 200) {\n                var src = URL.createObjectURL(file);\n                console.log(src);\n                this.setState({\n                    profilePicture: src\n                })\n            }\n        }).catch(error => {\n            console.log(error);\n        })\n        \n    }\n\n    handleFieldChange(e) {\n        this.setState({ [e.target.name]: e.target.value })\n    }\n\n    capitalizeName(x) {\n        return x.charAt(0).toUpperCase() + x.slice(1);\n    }\n\n    getJoinedAt() {\n        var joined = this.state.user[\"created_at\"];\n        if (joined === null || joined === undefined) {\n            return \"01/01/0001\";\n        }\n        var date = new Date(joined);\n        return date.getMonth() + \"/\" + date.getDate() + \"/\" + date.getFullYear();\n    }\n\n    handleCheckboxChange(e) {\n        var checkboxMap = this.state.checkboxStates;\n        checkboxMap.set(e.target.name, !checkboxMap.get(e.target.name));\n        this.setState({ \n            checkboxStates: checkboxMap\n        });\n    }\n\n    renderChangePlanWarningText() {\n        // Depending on the current user's plans and the plan they have selected, we want to display different warning texts. \n    }\n    \n    renderRightBoxPage() {\n        switch(this.state.toDisplay) {\n            case general:\n                return (\n                    <div className=\"right_box_page_inner_box\">\n                        <p className=\"right_box_page_title\">\n                            General Settings\n                        </p>\n                        <p \n                            className=\"right_box_page_edit_button\"\n                            onClick={() => this.setState({editGeneral: !this.state.editGeneral})}>\n                            {this.state.editGeneral ? \"Cancel\" : \"Edit\"}\n                        </p>\n                        <div className=\"right_box_page_content_inner_box\">\n                            <div className=\"right_box_page_content_inner_box_list\">\n                                <p className=\"right_box_page_content_inner_box_list_text\">\n                                    First Name\n                                </p>\n                                <p className=\"right_box_page_content_inner_box_list_value_text\">\n                                    {this.state.editGeneral ? \n                                    <input\n                                        id=\"edit_first_name_input\"\n                                        className=\"right_box_page_content_inner_box_list_input\"\n                                        placeholder={this.capitalizeName(this.state.user[\"first_name\"])}></input>: \n                                    this.capitalizeName(this.state.user[\"first_name\"])}\n                                </p>\n                            </div>\n                            <div className=\"right_box_page_content_inner_box_list\">\n                                <p className=\"right_box_page_content_inner_box_list_text\">\n                                    Last Name\n                                </p>\n                                <p className=\"right_box_page_content_inner_box_list_value_text\">\n                                    {this.state.editGeneral && this.state.toDisplay === general ? \n                                    <input\n                                        id=\"edit_last_name_input\"\n                                        className=\"right_box_page_content_inner_box_list_input\"\n                                        placeholder={this.capitalizeName(this.state.user[\"last_name\"])}></input>: \n                                    this.capitalizeName(this.state.user[\"last_name\"])}\n                                </p>\n                            </div>\n                            <div className=\"right_box_page_content_inner_box_list\">\n                                <p className=\"right_box_page_content_inner_box_list_text\">\n                                    Email\n                                </p>\n                                <p className=\"right_box_page_content_inner_box_list_value_text\">\n                                    {this.state.editGeneral ? \n                                    <input\n                                        id=\"edit_email_input\"\n                                        className=\"right_box_page_content_inner_box_list_input\"\n                                        placeholder={this.state.user[\"email\"]}></input>: \n                                        this.state.user[\"email\"]}\n                                </p>\n                            </div>\n                            {/* <div className=\"right_box_page_content_inner_box_list\">\n                                <p className=\"right_box_page_content_inner_box_list_text\">\n                                    Phone Number\n                                </p>\n                                <p className=\"right_box_page_content_inner_box_list_value_text\">\n                                    {this.state.editGeneral ? \n                                    <input\n                                        id=\"edit_phone_number_input\"\n                                        type=\"number\"\n                                        className=\"right_box_page_content_inner_box_list_input\"\n                                        placeholder={this.state.phoneNumber ? this.state.phoneNumber : \"(XXX) XXX - XXXX\"}></input>:\n                                    (this.state.phoneNumber ? this.state.phoneNumber : \"(XXX) XXX - XXXX\")}\n                                </p>\n                            </div> */}\n                            <div className=\"right_box_page_content_inner_box_list\">\n                                <p className=\"right_box_page_content_inner_box_list_text\">\n                                    Password\n                                </p>\n                                <p className=\"right_box_page_content_inner_box_list_value_text\">\n                                    {this.state.editGeneral ? \n                                    <input\n                                        id=\"edit_password_input\"\n                                        type=\"password\"\n                                        className=\"right_box_page_content_inner_box_list_input\"\n                                        placeholder={\"********\"}></input>:\n                                    \"********\"}\n                                </p>\n                            </div>\n                            <div className=\"clearfix\"/>\n                            {this.state.editGeneral ? \n                            <div \n                                onClick={this.updateUserSettingsProfile}\n                                className=\"right_box_page_content_save_edits_button\">\n                                Save\n                            </div> :\n                            <div></div>}\n                        </div>\n                    </div>\n                );\n            case email:\n                return (\n                    <div className=\"right_box_page_inner_box\">\n                        <p className=\"right_box_page_title\">\n                            Email Settings\n                        </p>\n                        <p \n                            className=\"right_box_page_edit_button\"\n                            onClick={() => {\n                                if (this.state.editEmail) {\n                                    this.setState({\n                                        checkboxStates: this.deepCopyMap(this.state.originalCheckboxStates)\n                                    })\n                                }\n                                this.setState({\n                                    editEmail: !this.state.editEmail,\n                                })}}>\n                            {this.state.editEmail ? \"Cancel\" : \"Edit\"}\n                        </p>\n                        {this.state.editEmail ?\n                        <p className=\"right_box_page_title_unsubscribe_all_button\">Unsubscribe from All</p> : <p></p>}\n                        <div className=\"clearfix\"/>\n                        <p id=\"email_fyi_text\">\n                            You will always receive emails about important account information\n                        </p>\n                        <div className=\"right_box_page_content_inner_box\">\n                            <div className=\"right_box_page_content_inner_box_list\">\n                                <p className=\"right_box_page_content_inner_box_list_text\">\n                                    Digest Emails\n                                </p>\n                                <p className=\"right_box_page_content_inner_box_list_value_text\">\n                                    {this.state.editEmail ? \n                                    <label className=\"switch\">\n                                        <input \n                                            type=\"checkbox\"\n                                            name=\"receive_digest\"\n                                            checked={this.state.checkboxStates.get('receive_digest')}\n                                            onChange={this.handleCheckboxChange}/>\n                                        <span className=\"slider round\"></span>\n                                    </label> : (this.state.checkboxStates.get('receive_digest') ? \"Yes\" : \"No\")}\n                                </p>\n                            </div>\n                            <div className=\"right_box_page_content_inner_box_list\">\n                                <p className=\"right_box_page_content_inner_box_list_text\">\n                                    Newsletter Emails\n                                </p>\n                                <p className=\"right_box_page_content_inner_box_list_value_text\">\n                                    {this.state.editEmail ? \n                                    <label className=\"switch\">\n                                        <input \n                                            type=\"checkbox\"\n                                            name=\"receive_newsletter\"\n                                            checked={this.state.checkboxStates.get('receive_newsletter')}\n                                            onChange={this.handleCheckboxChange}/>\n                                        <span className=\"slider round\"></span>\n                                    </label>: \n                                    (this.state.checkboxStates.get('receive_newsletter') ? \"Yes\" : \"No\")}\n                                </p>\n                            </div>\n                            <div className=\"right_box_page_content_inner_box_list\">\n                                <p className=\"right_box_page_content_inner_box_list_text\">\n                                    Marketing Emails\n                                </p>\n                                <p className=\"right_box_page_content_inner_box_list_value_text\">\n                                    {this.state.editEmail ? \n                                    <label className=\"switch\">\n                                        <input \n                                            type=\"checkbox\"\n                                            name=\"receive_marketing\"\n                                            checked={this.state.checkboxStates.get('receive_marketing')}\n                                            onChange={this.handleCheckboxChange}/>\n                                        <span className=\"slider round\"></span>\n                                    </label>: \n                                    (this.state.checkboxStates.get('receive_marketing') ? \"Yes\" : \"No\")}\n                                </p>\n                            </div>\n                            <div className=\"clearfix\"/>\n                            {this.state.editEmail ? \n                            <div \n                                onClick={this.updateUserSettingsPreferences}\n                                className=\"right_box_page_content_save_edits_button\">\n                                Save\n                            </div> :\n                            <div></div>}\n                        </div>\n                    </div>\n                );\n            case notifications:\n                return (\n                    <div className=\"right_box_page_inner_box\">\n                        <p className=\"right_box_page_title\">\n                            Notifications Settings\n                        </p>\n                        <p \n                            className=\"right_box_page_edit_button\"\n                            onClick={() => {\n                                if (this.state.editNotifications) {\n                                    this.setState({\n                                        checkboxStates: this.deepCopyMap(this.state.originalCheckboxStates)\n                                    })\n                                }\n                                this.setState({\n                                    editNotifications: !this.state.editNotifications,\n                                })}}>\n                            {this.state.editNotifications ? \"Cancel\" : \"Edit\"}\n                        </p>\n                        <div className=\"right_box_page_content_inner_box\">\n                            <div className=\"right_box_page_content_inner_box_list\">\n                                <p className=\"right_box_page_content_inner_box_list_text\">\n                                    Rent Pay date\n                                </p>\n                                <p className=\"right_box_page_content_inner_box_list_value_text\">\n                                    {this.state.editNotifications ? \n                                    <label className=\"switch\">\n                                        <input\n                                        type=\"checkbox\"\n                                        name=\"rent_pay_date\"\n                                        checked={this.state.checkboxStates.get('rent_pay_date')}\n                                        onChange={this.handleCheckboxChange}></input>\n                                        <span className=\"slider round\"></span>\n                                    </label>: \n                                    (this.state.checkboxStates.get('rent_pay_date') ? \"Yes\" : \"No\")}\n                                </p>\n                            </div>\n                            <div className=\"right_box_page_content_inner_box_list\">\n                                <p className=\"right_box_page_content_inner_box_list_text\">\n                                    Mortgage\n                                </p>\n                                <p className=\"right_box_page_content_inner_box_list_value_text\">\n                                    {this.state.editNotifications ? \n                                    <label className=\"switch\">\n                                        <input \n                                            type=\"checkbox\"\n                                            name=\"mortgage_pay_date\"\n                                            checked={this.state.checkboxStates.get('mortgage_pay_date')}\n                                            onChange={this.handleCheckboxChange}/>\n                                        <span className=\"slider round\"></span>\n                                    </label>: \n                                    (this.state.checkboxStates.get('mortgage_pay_date') ? \"Yes\" : \"No\")}\n                                </p>\n                            </div>\n                            <div className=\"right_box_page_content_inner_box_list\">\n                                <p className=\"right_box_page_content_inner_box_list_text\">\n                                    Property Values\n                                </p>\n                                <p className=\"right_box_page_content_inner_box_list_value_text\">\n                                    {this.state.editNotifications ? \n                                    <label className=\"switch\">\n                                        <input \n                                            type=\"checkbox\"\n                                            name=\"property_value\"\n                                            checked={this.state.checkboxStates.get('property_value')}\n                                            onChange={this.handleCheckboxChange}/>\n                                        <span className=\"slider round\"></span>\n                                    </label>: \n                                    (this.state.checkboxStates.get('property_value') ? \"Yes\" : \"No\")}\n                                </p>\n                            </div>\n                            <div className=\"clearfix\"/>\n                            {this.state.editNotifications ? \n                            <div \n                                onClick={this.updateUserSettingsPreferences}\n                                className=\"right_box_page_content_save_edits_button\">\n                                Save\n                            </div> :\n                            <div></div>}\n                        </div>\n                    </div>\n                );\n            case plan:\n                return (\n                    <div className=\"right_box_page_inner_box\">\n                        <p className=\"right_box_page_title\">\n                            Plan Settings\n                        </p>\n                        <p \n                            className=\"right_box_page_edit_button\"\n                            onClick={() => this.setState({editPlan: !this.state.editPlan})}>\n                            {this.state.editPlan ? \"Cancel\" : \"Change\"}\n                        </p>\n                        <div className=\"right_box_page_content_inner_box\">\n                            <div \n                                className={\n                                    this.state.editPlan ? \n                                    \"edit_plan_class right_box_page_content_inner_box_list\" : \n                                    \"right_box_page_content_inner_box_list\"\n                                }>\n                                <p className=\"right_box_page_content_inner_box_list_text\">\n                                    Plan\n                                </p>\n                                <p className=\"right_box_page_content_inner_box_list_value_text\">\n                                    {this.state.user[\"plan\"] ? this.capitalizeName(this.state.user[\"plan\"]) : \"Starter\"}\n                                </p>\n                                <div className=\"clearfix\"/>\n                                {this.state.editPlan ? \n                                    <div className=\"edit_plan_class_inside_box\">\n                                        <div \n                                            onClick={() => {\n                                                this.setState({\n                                                    starterPlanActive: !this.state.starterPlanActive,\n                                                    professionalPlanActive: false,\n                                                    enterprisePlanActive: false,\n                                                })\n                                            }}\n                                            className={\n                                                this.state.user[\"plan\"] === \"starter\" ? \n                                                \"edit_plan_class_inside_box_card edit_plan_class_inside_box_card_active\" :\n                                                (this.state.starterPlanActive ? \"edit_plan_class_inside_box_card edit_plan_class_inside_box_card_selected\" : \n                                                \"edit_plan_class_inside_box_card\")}>\n                                            <IoIosSend className={\n                                                this.state.user[\"plan\"] === \"starter\" ? \n                                                \"edit_plan_class_inside_box_card_icon edit_plan_class_inside_box_card_icon_active\" :\n                                                \"edit_plan_class_inside_box_card_icon\"}></IoIosSend>\n                                            <p className=\"edit_plan_class_inside_box_card_title\">\n                                                Starter\n                                            </p>\n                                        </div>\n                                        <div \n                                            onClick={() => {\n                                                this.setState({\n                                                    starterPlanActive: false,\n                                                    professionalPlanActive: !this.state.professionalPlanActive,\n                                                    enterprisePlanActive: false,\n                                                })\n                                            }}\n                                            className={\n                                                this.state.user[\"plan\"] === \"professional\" ? \n                                                \"edit_plan_class_inside_box_card edit_plan_class_inside_box_card_active\" :\n                                                (this.state.professionalPlanActive ? \"edit_plan_class_inside_box_card edit_plan_class_inside_box_card_selected\" :\n                                                \"edit_plan_class_inside_box_card\")}>\n                                                <FaUserTie \n                                                    className={\n                                                    this.state.user[\"plan\"] === \"professional\" ? \n                                                    \"edit_plan_class_inside_box_card_icon edit_plan_class_inside_box_card_icon_active\" :\n                                                    \"edit_plan_class_inside_box_card_icon\"}></FaUserTie>\n                                                <p className=\"edit_plan_class_inside_box_card_title\">\n                                                    Professional\n                                                </p>\n                                        </div>\n                                        <div \n                                            onClick={() => {\n                                                this.setState({\n                                                    starterPlanActive: false,\n                                                    professionalPlanActive: false,\n                                                    enterprisePlanActive: !this.state.enterprisePlanActive,\n                                                })\n                                            }}\n                                            className={\n                                                this.state.user[\"plan\"] === \"enterprise\" ? \n                                                \"edit_plan_class_inside_box_card edit_plan_class_inside_box_card_active\" :\n                                                \"edit_plan_class_inside_box_card\"}>\n                                                <FaBuilding \n                                                    className={\n                                                    this.state.user[\"plan\"] === \"enterprise\" ? \n                                                    \"edit_plan_class_inside_box_card_icon edit_plan_class_inside_box_card_icon_active\" :\n                                                    \"edit_plan_class_inside_box_card_icon\"}></FaBuilding>\n                                                <p className={\n                                                    this.state.user[\"plan\"] === \"enterprise\" ?\n                                                    \"edit_plan_class_inside_box_card_title edit_plan_class_inside_box_card_title_active\" : \n                                                    \"edit_plan_class_inside_box_card_title\"}>\n                                                    Enterprise\n                                                </p>\n                                        </div>\n                                        <div className=\"clearfix\"/>\n                                        {this.state.initialChangeButtonPressed ? \n                                        this.renderChangePlanWarningText() : \n                                        <div>\n                                        </div>}\n                                        <div \n                                            onClick={() => this.setState({\n                                                initialChangeButtonPressed: true\n                                            })}\n                                            className=\"edit_plan_submit_button\">\n                                            Change\n                                        </div>\n                                    </div> :\n                                    <div></div>\n                                }\n                            </div>\n                        </div>\n                        \n                    </div>\n                );\n        }\n    }\n\n    render() {\n        return (\n            // <LoadingScreen data={{\n            //     state: {\n            //         id: this.state.userID,\n            //         firstName: this.state.firstName,\n            //         lastName: this.state.lastName,\n            //         email: this.state.email\n            //     }\n            // }}/>\n            <div>\n                <DashboardSidebar key={this.state.profilePicture} data={{\n                    state: {\n                        user: this.state.user,\n                        totalEstimateWorth: this.state.totalEstimateWorth,\n                        missingEstimate: this.state.missingEstimate,\n                        profilePicture: this.state.profilePicture,\n                        currentPage: \"settings\"\n                    }\n                }}/>\n                {this.state.isLoading ? \n                <div></div> :\n\n                <div id=\"settings_dashboard_parent_box\">\n                    <div id=\"settings_dashboard_title_box\">\n                        <p id=\"settings_dashboard_title_box_title\">\n                            Settings\n                        </p>\n                    </div>\n                    <div className=\"clearfix\"></div>\n                    <div id=\"settings_dashboard_parent_inner_box\">\n                        <div id=\"settings_dashboard_user_information_box\">\n                            \n                            {this.state.profilePicture ? \n                            <img id=\"settings_dashboard_user_information_profile_picture\" src={this.state.profilePicture} alt={\"logo\"}/> :\n                            <RiUser3Fill id=\"settings_dashboard_user_information_profile_picture_default\"></RiUser3Fill>}\n\n                            <label htmlFor=\"settings_dashboard_upload_profile_picture_button\">\n                                <MdEdit id=\"settings_dashboard_user_information_profile_picture_edit_icon\"></MdEdit>\n                            </label>\n                            <input \n                                id=\"settings_dashboard_upload_profile_picture_button\" \n                                type=\"file\" \n                                accept=\".png,.jpg,.heic\"\n                                onChange={this.handleProfilePictureChange}></input>\n\n                            <div className=\"clearfix\"/>\n                            <div id=\"settings_dasboard_user_information_inner_box\">\n                                <p className=\"settings_dashboard_user_information_inner_box_title\">\n                                    Info\n                                </p>\n                                <div className=\"settings_dashboard_user_information_bullet_box\">\n                                    <ImUser className=\"settings_dashboard_user_information_icon\"></ImUser>\n                                    <p className=\"settings_dashboard_user_information_inner_box_text\">\n                                        {this.capitalizeName(this.state.user[\"first_name\"])} {this.capitalizeName(this.state.user[\"last_name\"])} \n                                    </p>\n                                </div>\n                                <div className=\"clearfix\"/>\n                                <div className=\"settings_dashboard_user_information_bullet_box\">\n                                    <MdEmail className=\"settings_dashboard_user_information_icon\"></MdEmail>\n                                    <p className=\"settings_dashboard_user_information_inner_box_text\">\n                                        {this.state.user[\"email\"]}\n                                    </p>\n                                </div>\n                                <div className=\"clearfix\"/>\n                                <div className=\"settings_dashboard_user_information_bullet_box\">\n                                    <AiFillClockCircle className=\"settings_dashboard_user_information_icon\"></AiFillClockCircle>\n                                    <p className=\"settings_dashboard_user_information_inner_box_text\">\n                                        Joined on {this.getJoinedAt()}\n                                    </p>\n                                </div>\n                                <div className=\"clearfix\"/>\n                                <div className=\"settings_dashboard_user_information_bullet_box\">\n                                    <BsFillAwardFill className=\"settings_dashboard_user_information_icon\"></BsFillAwardFill>\n                                    <p className=\"settings_dashboard_user_information_inner_box_text\">\n                                        {this.state.user[\"plan\"] ? this.capitalizeName(this.state.user[\"plan\"]) : \"Starter\"} Plan\n                                    </p>\n                                </div>\n                            </div>\n                            {/* <form id=\"settings_dashboard_user_information_form\">\n                                <input placeholder={this.state.firstName ? this.capitalizeName(this.state.firstName) : \"First Name\"}  className=\"settings_dashboard_user_information_input\" type=\"text\" name=\"firstNameChange\" onChange={this.handleFieldChange}/>\n                                <input placeholder={this.state.lastName ? this.capitalizeName(this.state.lastName) : \"Last Name\"}  className=\"settings_dashboard_user_information_input\" type=\"text\" name=\"lastNameChange\" onChange={this.handleFieldChange}/>\n                                <input placeholder={this.state.email ? this.state.email : \"Email\"}  className=\"settings_dashboard_user_information_input\" type=\"text\" name=\"emailChange\" onChange={this.handleFieldChange}/>\n                                <input placeholder=\"New Password\"  id=\"settings_dashboard_user_information_input_password\" className=\"settings_dashboard_user_information_input\" type=\"text\" name=\"passwordChange\" onChange={this.handleFieldChange}/>\n                                <input id=\"settings_dashboard_user_information_form_submit_button\" type=\"submit\" value=\"Save\"></input>\n                            </form> */}\n                        </div>\n                        <div id=\"settings_dashboard_right_box\">\n                            <div id=\"settings_dashboard_right_box_nav_bar\">\n                                <li \n                                    onClick={() => \n                                        this.setState({\n                                            toDisplay: general,\n                                            editEmail: false,\n                                            editNotifications: false,\n                                            editPlan: false\n                                        })}\n                                    className={\n                                        this.state.toDisplay === general ? \n                                        \"settings_dashboard_right_box_nav_bar_list settings_dashboard_right_box_nav_bar_active_list\" : \n                                        \"settings_dashboard_right_box_nav_bar_list\"}>\n                                    <IoMdSettings className=\"settings_dashboard_right_box_nav_bar_list_icon\"></IoMdSettings>\n                                    <p className=\"settings_dashboard_right_box_nav_bar_list_text\">\n                                        General\n                                    </p>\n                                </li>\n                                <div className=\"clearfix\"/>\n                                <li \n                                    onClick={() => \n                                        this.setState({\n                                            toDisplay: email,\n                                            editGeneral: false,\n                                            editNotifications: false,\n                                            editPlan: false\n                                        })}\n                                    className={\n                                        this.state.toDisplay === email ? \n                                        \"settings_dashboard_right_box_nav_bar_list settings_dashboard_right_box_nav_bar_active_list\" : \n                                        \"settings_dashboard_right_box_nav_bar_list\"}>\n                                    <MdEmail className=\"settings_dashboard_right_box_nav_bar_list_icon\"></MdEmail>\n                                    <p className=\"settings_dashboard_right_box_nav_bar_list_text\">\n                                        Email\n                                    </p>\n                                </li>\n                                <div className=\"clearfix\"/>\n                                <li \n                                    onClick={() => \n                                        this.setState({\n                                            toDisplay: notifications,\n                                            editGeneral: false,\n                                            editEmail: false,\n                                            editPlan: false\n                                        })}\n                                    className={\n                                        this.state.toDisplay === notifications ? \n                                        \"settings_dashboard_right_box_nav_bar_list settings_dashboard_right_box_nav_bar_active_list\" : \n                                        \"settings_dashboard_right_box_nav_bar_list\"}>\n                                    <IoMdNotifications className=\"settings_dashboard_right_box_nav_bar_list_icon\"></IoMdNotifications>\n                                    <p className=\"settings_dashboard_right_box_nav_bar_list_text\">\n                                        Notifications\n                                    </p>\n                                </li>\n                                <div className=\"clearfix\"/>\n                                <li \n                                    onClick={() => \n                                        this.setState({\n                                            toDisplay: plan,\n                                            editGeneral: false,\n                                            editEmail: false,\n                                            editNotifications: false\n                                        })}\n                                    className={\n                                        this.state.toDisplay === plan ? \n                                        \"settings_dashboard_right_box_nav_bar_list settings_dashboard_right_box_nav_bar_active_list\" : \n                                        \"settings_dashboard_right_box_nav_bar_list\"}>\n                                    <BsFillAwardFill className=\"settings_dashboard_right_box_nav_bar_list_icon\"></BsFillAwardFill>\n                                    <p className=\"settings_dashboard_right_box_nav_bar_list_text\">\n                                        Plan\n                                    </p>\n                                </li>\n                            </div>\n                            {this.renderRightBoxPage()}\n                        </div>\n                    </div>\n                </div>}\n            </div>\n        )\n    }\n}\n\nexport default SettingsDashboard;","/Users/eric.lin/Documents/RealEstateApp/ui/src/components/LoadingScreen.js",[],["167","168"],"/Users/eric.lin/Documents/RealEstateApp/ui/src/utility/ProgressBar.js",["169"],"import React from \"react\";\n\nconst ProgressBar = (props) => {\n\n    const { bgcolor, completed } = props;\n\n    const containerStyles = {\n        bottom: 0,\n        borderRadius: \"0px 0px 0px 8px\",\n        height: 7,\n        width: '100%',\n        backgroundColor: \"transparent\",\n    }\n\n    const fillerStyles = {\n        height: '100%',\n        width: `${completed}%`,\n        backgroundColor: \"#296CF6\",\n        borderRadius: 'inherit',\n        textAlign: 'right',\n        transition: 'width 1s ease-in-out'\n    }\n\n    return (\n        <div style={containerStyles}>\n            <div style={fillerStyles}>\n                <span></span>\n            </div>\n        </div>\n    );\n};\n\nexport default ProgressBar;",["170","171"],"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/ExploreDashboard.js",[],"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/AnalysisDashboard.js",["172"],"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/FeedbackForm.js",["173"],"/Users/eric.lin/Documents/RealEstateApp/ui/src/components/ExpensesDashboard.js",[],{"ruleId":"174","severity":1,"message":"175","line":8,"column":10,"nodeType":"176","messageId":"177","endLine":8,"endColumn":21},{"ruleId":"174","severity":1,"message":"178","line":9,"column":10,"nodeType":"176","messageId":"177","endLine":9,"endColumn":19},{"ruleId":"174","severity":1,"message":"179","line":10,"column":10,"nodeType":"176","messageId":"177","endLine":10,"endColumn":16},{"ruleId":"174","severity":1,"message":"180","line":11,"column":10,"nodeType":"176","messageId":"177","endLine":11,"endColumn":27},{"ruleId":"174","severity":1,"message":"181","line":12,"column":10,"nodeType":"176","messageId":"177","endLine":12,"endColumn":25},{"ruleId":"174","severity":1,"message":"182","line":14,"column":10,"nodeType":"176","messageId":"177","endLine":14,"endColumn":26},{"ruleId":"174","severity":1,"message":"183","line":15,"column":10,"nodeType":"176","messageId":"177","endLine":15,"endColumn":20},{"ruleId":"174","severity":1,"message":"184","line":16,"column":10,"nodeType":"176","messageId":"177","endLine":16,"endColumn":36},{"ruleId":"174","severity":1,"message":"185","line":17,"column":10,"nodeType":"176","messageId":"177","endLine":17,"endColumn":22},{"ruleId":"174","severity":1,"message":"186","line":96,"column":13,"nodeType":"176","messageId":"177","endLine":96,"endColumn":21},{"ruleId":"174","severity":1,"message":"187","line":99,"column":13,"nodeType":"176","messageId":"177","endLine":99,"endColumn":18},{"ruleId":"174","severity":1,"message":"188","line":108,"column":17,"nodeType":"176","messageId":"177","endLine":108,"endColumn":21},{"ruleId":"189","replacedBy":"190"},{"ruleId":"191","replacedBy":"192"},{"ruleId":"193","severity":1,"message":"194","line":12,"column":5,"nodeType":"195","messageId":"196","endLine":14,"endColumn":6},{"ruleId":"174","severity":1,"message":"197","line":3,"column":10,"nodeType":"176","messageId":"177","endLine":3,"endColumn":20},{"ruleId":"193","severity":1,"message":"194","line":12,"column":5,"nodeType":"195","messageId":"196","endLine":14,"endColumn":6},{"ruleId":"198","severity":1,"message":"199","line":39,"column":29,"nodeType":"200","endLine":39,"endColumn":70},{"ruleId":"189","replacedBy":"201"},{"ruleId":"191","replacedBy":"202"},{"ruleId":"174","severity":1,"message":"203","line":9,"column":10,"nodeType":"176","messageId":"177","endLine":9,"endColumn":14},{"ruleId":"198","severity":1,"message":"199","line":55,"column":25,"nodeType":"200","endLine":55,"endColumn":97},{"ruleId":"174","severity":1,"message":"204","line":3,"column":8,"nodeType":"176","messageId":"177","endLine":3,"endColumn":13},{"ruleId":"174","severity":1,"message":"203","line":8,"column":10,"nodeType":"176","messageId":"177","endLine":8,"endColumn":14},{"ruleId":"193","severity":1,"message":"194","line":11,"column":5,"nodeType":"195","messageId":"196","endLine":13,"endColumn":6},{"ruleId":"174","severity":1,"message":"203","line":4,"column":10,"nodeType":"176","messageId":"177","endLine":4,"endColumn":14},{"ruleId":"189","replacedBy":"205"},{"ruleId":"191","replacedBy":"206"},{"ruleId":"189","replacedBy":"207"},{"ruleId":"191","replacedBy":"208"},{"ruleId":"174","severity":1,"message":"178","line":14,"column":10,"nodeType":"176","messageId":"177","endLine":14,"endColumn":19},{"ruleId":"209","severity":1,"message":"210","line":175,"column":13,"nodeType":"211","messageId":"212","endLine":175,"endColumn":33},{"ruleId":"213","severity":1,"message":"214","line":338,"column":26,"nodeType":"176","messageId":"215","endLine":338,"endColumn":27},{"ruleId":"213","severity":1,"message":"216","line":342,"column":25,"nodeType":"176","messageId":"215","endLine":342,"endColumn":29},{"ruleId":"174","severity":1,"message":"217","line":380,"column":13,"nodeType":"176","messageId":"177","endLine":380,"endColumn":21},{"ruleId":"218","severity":1,"message":"219","line":542,"column":13,"nodeType":"220","messageId":"221","endLine":567,"endColumn":14},{"ruleId":"174","severity":1,"message":"222","line":8,"column":10,"nodeType":"176","messageId":"177","endLine":8,"endColumn":29},{"ruleId":"174","severity":1,"message":"223","line":8,"column":31,"nodeType":"176","messageId":"177","endLine":8,"endColumn":42},{"ruleId":"174","severity":1,"message":"224","line":11,"column":8,"nodeType":"176","messageId":"177","endLine":11,"endColumn":20},{"ruleId":"174","severity":1,"message":"225","line":24,"column":10,"nodeType":"176","messageId":"177","endLine":24,"endColumn":19},{"ruleId":"174","severity":1,"message":"226","line":24,"column":21,"nodeType":"176","messageId":"177","endLine":24,"endColumn":29},{"ruleId":"174","severity":1,"message":"227","line":28,"column":10,"nodeType":"176","messageId":"177","endLine":28,"endColumn":18},{"ruleId":"174","severity":1,"message":"228","line":28,"column":20,"nodeType":"176","messageId":"177","endLine":28,"endColumn":25},{"ruleId":"174","severity":1,"message":"229","line":28,"column":27,"nodeType":"176","messageId":"177","endLine":28,"endColumn":30},{"ruleId":"174","severity":1,"message":"230","line":204,"column":26,"nodeType":"176","messageId":"177","endLine":204,"endColumn":31},{"ruleId":"213","severity":1,"message":"231","line":207,"column":17,"nodeType":"176","messageId":"215","endLine":207,"endColumn":26},{"ruleId":"174","severity":1,"message":"232","line":16,"column":16,"nodeType":"176","messageId":"177","endLine":16,"endColumn":24},{"ruleId":"174","severity":1,"message":"233","line":17,"column":37,"nodeType":"176","messageId":"177","endLine":17,"endColumn":48},{"ruleId":"174","severity":1,"message":"234","line":17,"column":50,"nodeType":"176","messageId":"177","endLine":17,"endColumn":62},{"ruleId":"174","severity":1,"message":"222","line":18,"column":10,"nodeType":"176","messageId":"177","endLine":18,"endColumn":29},{"ruleId":"174","severity":1,"message":"223","line":18,"column":31,"nodeType":"176","messageId":"177","endLine":18,"endColumn":42},{"ruleId":"174","severity":1,"message":"235","line":23,"column":10,"nodeType":"176","messageId":"177","endLine":23,"endColumn":21},{"ruleId":"174","severity":1,"message":"236","line":25,"column":5,"nodeType":"176","messageId":"177","endLine":25,"endColumn":18},{"ruleId":"174","severity":1,"message":"237","line":32,"column":5,"nodeType":"176","messageId":"177","endLine":32,"endColumn":18},{"ruleId":"213","severity":1,"message":"214","line":104,"column":22,"nodeType":"176","messageId":"215","endLine":104,"endColumn":23},{"ruleId":"218","severity":1,"message":"219","line":330,"column":9,"nodeType":"220","messageId":"221","endLine":516,"endColumn":10},{"ruleId":"218","severity":1,"message":"219","line":315,"column":9,"nodeType":"220","messageId":"221","endLine":689,"endColumn":10},{"ruleId":"189","replacedBy":"238"},{"ruleId":"191","replacedBy":"239"},{"ruleId":"174","severity":1,"message":"240","line":5,"column":13,"nodeType":"176","messageId":"177","endLine":5,"endColumn":20},{"ruleId":"189","replacedBy":"241"},{"ruleId":"191","replacedBy":"242"},{"ruleId":"218","severity":1,"message":"219","line":255,"column":9,"nodeType":"220","messageId":"221","endLine":413,"endColumn":10},{"ruleId":"218","severity":1,"message":"219","line":73,"column":9,"nodeType":"220","messageId":"221","endLine":231,"endColumn":10},"no-unused-vars","'BsHouseFill' is defined but never used.","Identifier","unusedVar","'IoMdTrash' is defined but never used.","'MdEdit' is defined but never used.","'SiGoogleanalytics' is defined but never used.","'GoFileDirectory' is defined but never used.","'SiGooglecalendar' is defined but never used.","'GiTwoCoins' is defined but never used.","'HiOutlineExclamationCircle' is defined but never used.","'MdFileUpload' is defined but never used.","'ltvRatio' is assigned a value but never used.","'files' is defined but never used.","'data' is assigned a value but never used.","no-native-reassign",["243"],"no-negated-in-lhs",["244"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'AiFillHome' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["243"],["244"],"'Link' is defined but never used.","'Login' is defined but never used.",["243"],["244"],["243"],["244"],"no-dupe-keys","Duplicate key 'displayUploadFileBox'.","ObjectExpression","unexpected","no-redeclare","'i' is already defined.","redeclared","'fKey' is already defined.","'fileName' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'CircularProgressbar' is defined but never used.","'buildStyles' is defined but never used.","'PropertyCard' is defined but never used.","'LineChart' is defined but never used.","'PieChart' is defined but never used.","'BarChart' is defined but never used.","'XAxis' is defined but never used.","'Bar' is defined but never used.","'value' is assigned a value but never used.","'daysUntil' is already defined.","'Redirect' is defined but never used.","'VictoryAxis' is defined but never used.","'VictoryLabel' is defined but never used.","'MdDashboard' is defined but never used.","'IoOpenOutline' is defined but never used.","'IoFolderSharp' is defined but never used.",["243"],["244"],"'bgcolor' is assigned a value but never used.",["243"],["244"],"no-global-assign","no-unsafe-negation"]